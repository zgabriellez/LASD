
LASD2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006c  00800100  000026ba  0000274e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000026ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000259  0080016c  0080016c  000027ba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000027ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000027ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  0000282c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000111c  00000000  00000000  0000296c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000981  00000000  00000000  00003a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001552  00000000  00000000  00004409  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000690  00000000  00000000  0000595c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00008859  00000000  00000000  00005fec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e73  00000000  00000000  0000e845  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  0000f6b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002f0c  00000000  00000000  0000f7c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 24 01 	jmp	0x248	; 0x248 <__ctors_end>
       4:	0c 94 c9 08 	jmp	0x1192	; 0x1192 <__vector_1>
       8:	0c 94 b4 09 	jmp	0x1368	; 0x1368 <__vector_2>
       c:	0c 94 c6 0b 	jmp	0x178c	; 0x178c <__vector_3>
      10:	0c 94 8b 0b 	jmp	0x1716	; 0x1716 <__vector_4>
      14:	0c 94 35 08 	jmp	0x106a	; 0x106a <__vector_5>
      18:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      1c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      20:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      24:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      28:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      2c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      30:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      34:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      38:	0c 94 ee 07 	jmp	0xfdc	; 0xfdc <__vector_14>
      3c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      40:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      44:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      48:	0c 94 e6 0b 	jmp	0x17cc	; 0x17cc <__vector_18>
      4c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      50:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      54:	0c 94 15 0a 	jmp	0x142a	; 0x142a <__vector_21>
      58:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      5c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      60:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      64:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>

00000068 <CHARSET>:
      68:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
      78:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
      88:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
      98:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
      a8:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
      b8:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
      c8:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
      d8:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
      e8:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
      f8:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
     108:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     118:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     128:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
     138:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     148:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     158:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     168:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     178:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
     188:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
     198:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
     1a8:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     1b8:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     1c8:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
     1d8:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
     1e8:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     1f8:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     208:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     218:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     228:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     238:	00 00 41 36 08 00 10 08 08 10 08 00 00 00 00 00     ..A6............

00000248 <__ctors_end>:
     248:	11 24       	eor	r1, r1
     24a:	1f be       	out	0x3f, r1	; 63
     24c:	cf ef       	ldi	r28, 0xFF	; 255
     24e:	d8 e0       	ldi	r29, 0x08	; 8
     250:	de bf       	out	0x3e, r29	; 62
     252:	cd bf       	out	0x3d, r28	; 61

00000254 <__do_copy_data>:
     254:	11 e0       	ldi	r17, 0x01	; 1
     256:	a0 e0       	ldi	r26, 0x00	; 0
     258:	b1 e0       	ldi	r27, 0x01	; 1
     25a:	ea eb       	ldi	r30, 0xBA	; 186
     25c:	f6 e2       	ldi	r31, 0x26	; 38
     25e:	02 c0       	rjmp	.+4      	; 0x264 <__do_copy_data+0x10>
     260:	05 90       	lpm	r0, Z+
     262:	0d 92       	st	X+, r0
     264:	ac 36       	cpi	r26, 0x6C	; 108
     266:	b1 07       	cpc	r27, r17
     268:	d9 f7       	brne	.-10     	; 0x260 <__do_copy_data+0xc>

0000026a <__do_clear_bss>:
     26a:	23 e0       	ldi	r18, 0x03	; 3
     26c:	ac e6       	ldi	r26, 0x6C	; 108
     26e:	b1 e0       	ldi	r27, 0x01	; 1
     270:	01 c0       	rjmp	.+2      	; 0x274 <.do_clear_bss_start>

00000272 <.do_clear_bss_loop>:
     272:	1d 92       	st	X+, r1

00000274 <.do_clear_bss_start>:
     274:	a5 3c       	cpi	r26, 0xC5	; 197
     276:	b2 07       	cpc	r27, r18
     278:	e1 f7       	brne	.-8      	; 0x272 <.do_clear_bss_loop>
     27a:	0e 94 9c 0c 	call	0x1938	; 0x1938 <main>
     27e:	0c 94 5b 13 	jmp	0x26b6	; 0x26b6 <_exit>

00000282 <__bad_interrupt>:
     282:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000286 <enabling>:
uint16_t leitura2, leitura3, conv2, conv1;
float leitura1, conv, conv3;
unsigned int truth=2, r = 0;

void enabling(unsigned int ubrr)
{
     286:	cf 93       	push	r28
     288:	df 93       	push	r29
     28a:	00 d0       	rcall	.+0      	; 0x28c <enabling+0x6>
     28c:	cd b7       	in	r28, 0x3d	; 61
     28e:	de b7       	in	r29, 0x3e	; 62
     290:	9a 83       	std	Y+2, r25	; 0x02
     292:	89 83       	std	Y+1, r24	; 0x01
	UBRR0H = (unsigned char)(ubrr>>8); 
     294:	85 ec       	ldi	r24, 0xC5	; 197
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	29 81       	ldd	r18, Y+1	; 0x01
     29a:	3a 81       	ldd	r19, Y+2	; 0x02
     29c:	23 2f       	mov	r18, r19
     29e:	33 27       	eor	r19, r19
     2a0:	fc 01       	movw	r30, r24
     2a2:	20 83       	st	Z, r18
	UBRR0L = (unsigned char)ubrr;
     2a4:	84 ec       	ldi	r24, 0xC4	; 196
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	29 81       	ldd	r18, Y+1	; 0x01
     2aa:	fc 01       	movw	r30, r24
     2ac:	20 83       	st	Z, r18
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     2ae:	81 ec       	ldi	r24, 0xC1	; 193
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	28 e1       	ldi	r18, 0x18	; 24
     2b4:	fc 01       	movw	r30, r24
     2b6:	20 83       	st	Z, r18
	UCSR0C = (0<<USBS0)|(3<<UCSZ00); //primeiro é o de parada e dps o tamanho da transmissao 
     2b8:	82 ec       	ldi	r24, 0xC2	; 194
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	26 e0       	ldi	r18, 0x06	; 6
     2be:	fc 01       	movw	r30, r24
     2c0:	20 83       	st	Z, r18
}
     2c2:	00 00       	nop
     2c4:	0f 90       	pop	r0
     2c6:	0f 90       	pop	r0
     2c8:	df 91       	pop	r29
     2ca:	cf 91       	pop	r28
     2cc:	08 95       	ret

000002ce <USART_Recepcao>:
unsigned char USART_Recepcao()
{
     2ce:	cf 93       	push	r28
     2d0:	df 93       	push	r29
     2d2:	cd b7       	in	r28, 0x3d	; 61
     2d4:	de b7       	in	r29, 0x3e	; 62
	while(!(UCSR0A & (1<<RXC0)));
     2d6:	00 00       	nop
     2d8:	80 ec       	ldi	r24, 0xC0	; 192
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	fc 01       	movw	r30, r24
     2de:	80 81       	ld	r24, Z
     2e0:	88 23       	and	r24, r24
     2e2:	d4 f7       	brge	.-12     	; 0x2d8 <USART_Recepcao+0xa>
	return UDR0;  
     2e4:	86 ec       	ldi	r24, 0xC6	; 198
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	fc 01       	movw	r30, r24
     2ea:	80 81       	ld	r24, Z
}
     2ec:	df 91       	pop	r29
     2ee:	cf 91       	pop	r28
     2f0:	08 95       	ret

000002f2 <USART_Transmit>:
void USART_Transmit(unsigned char data)
{
     2f2:	cf 93       	push	r28
     2f4:	df 93       	push	r29
     2f6:	1f 92       	push	r1
     2f8:	cd b7       	in	r28, 0x3d	; 61
     2fa:	de b7       	in	r29, 0x3e	; 62
     2fc:	89 83       	std	Y+1, r24	; 0x01
    while(!( UCSR0A & (1<<UDRE0)));//Espera a limpeza do registr. de transmissão
     2fe:	00 00       	nop
     300:	80 ec       	ldi	r24, 0xC0	; 192
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	fc 01       	movw	r30, r24
     306:	80 81       	ld	r24, Z
     308:	88 2f       	mov	r24, r24
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	80 72       	andi	r24, 0x20	; 32
     30e:	99 27       	eor	r25, r25
     310:	89 2b       	or	r24, r25
     312:	b1 f3       	breq	.-20     	; 0x300 <USART_Transmit+0xe>
    UDR0 = data; //Coloca o dado no registrador e o envia
     314:	86 ec       	ldi	r24, 0xC6	; 198
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	29 81       	ldd	r18, Y+1	; 0x01
     31a:	fc 01       	movw	r30, r24
     31c:	20 83       	st	Z, r18
}
     31e:	00 00       	nop
     320:	0f 90       	pop	r0
     322:	df 91       	pop	r29
     324:	cf 91       	pop	r28
     326:	08 95       	ret

00000328 <limita>:
void limita ()
{
     328:	cf 93       	push	r28
     32a:	df 93       	push	r29
     32c:	cd b7       	in	r28, 0x3d	; 61
     32e:	de b7       	in	r29, 0x3e	; 62
	if ((FreqRespiracao) > 30)
     330:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     334:	8f 31       	cpi	r24, 0x1F	; 31
     336:	20 f0       	brcs	.+8      	; 0x340 <limita+0x18>
	 FreqRespiracao = 30; 
     338:	8e e1       	ldi	r24, 0x1E	; 30
     33a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	else if ((FreqRespiracao) < 5)
	{
	 FreqRespiracao = 5;
	}
}
     33e:	07 c0       	rjmp	.+14     	; 0x34e <limita+0x26>
}
void limita ()
{
	if ((FreqRespiracao) > 30)
	 FreqRespiracao = 30; 
	else if ((FreqRespiracao) < 5)
     340:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     344:	85 30       	cpi	r24, 0x05	; 5
     346:	18 f4       	brcc	.+6      	; 0x34e <limita+0x26>
	{
	 FreqRespiracao = 5;
     348:	85 e0       	ldi	r24, 0x05	; 5
     34a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
}
     34e:	00 00       	nop
     350:	df 91       	pop	r29
     352:	cf 91       	pop	r28
     354:	08 95       	ret

00000356 <limitaO2>:

void limitaO2(uint8_t *O)
{
     356:	cf 93       	push	r28
     358:	df 93       	push	r29
     35a:	00 d0       	rcall	.+0      	; 0x35c <limitaO2+0x6>
     35c:	cd b7       	in	r28, 0x3d	; 61
     35e:	de b7       	in	r29, 0x3e	; 62
     360:	9a 83       	std	Y+2, r25	; 0x02
     362:	89 83       	std	Y+1, r24	; 0x01
	if(*O>10)
     364:	89 81       	ldd	r24, Y+1	; 0x01
     366:	9a 81       	ldd	r25, Y+2	; 0x02
     368:	fc 01       	movw	r30, r24
     36a:	80 81       	ld	r24, Z
     36c:	8b 30       	cpi	r24, 0x0B	; 11
     36e:	28 f0       	brcs	.+10     	; 0x37a <limitaO2+0x24>
		*O=10;
     370:	89 81       	ldd	r24, Y+1	; 0x01
     372:	9a 81       	ldd	r25, Y+2	; 0x02
     374:	2a e0       	ldi	r18, 0x0A	; 10
     376:	fc 01       	movw	r30, r24
     378:	20 83       	st	Z, r18
}
     37a:	00 00       	nop
     37c:	0f 90       	pop	r0
     37e:	0f 90       	pop	r0
     380:	df 91       	pop	r29
     382:	cf 91       	pop	r28
     384:	08 95       	ret

00000386 <timing_google>:
//gera o tempo do periodo
double timing_google ()
{
     386:	cf 93       	push	r28
     388:	df 93       	push	r29
     38a:	cd b7       	in	r28, 0x3d	; 61
     38c:	de b7       	in	r29, 0x3e	; 62
	return 60000.0/(FreqRespiracao*16); 
     38e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     392:	88 2f       	mov	r24, r24
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	82 95       	swap	r24
     398:	92 95       	swap	r25
     39a:	90 7f       	andi	r25, 0xF0	; 240
     39c:	98 27       	eor	r25, r24
     39e:	80 7f       	andi	r24, 0xF0	; 240
     3a0:	98 27       	eor	r25, r24
     3a2:	09 2e       	mov	r0, r25
     3a4:	00 0c       	add	r0, r0
     3a6:	aa 0b       	sbc	r26, r26
     3a8:	bb 0b       	sbc	r27, r27
     3aa:	bc 01       	movw	r22, r24
     3ac:	cd 01       	movw	r24, r26
     3ae:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <__floatsisf>
     3b2:	dc 01       	movw	r26, r24
     3b4:	cb 01       	movw	r24, r22
     3b6:	9c 01       	movw	r18, r24
     3b8:	ad 01       	movw	r20, r26
     3ba:	60 e0       	ldi	r22, 0x00	; 0
     3bc:	70 e6       	ldi	r23, 0x60	; 96
     3be:	8a e6       	ldi	r24, 0x6A	; 106
     3c0:	97 e4       	ldi	r25, 0x47	; 71
     3c2:	0e 94 41 11 	call	0x2282	; 0x2282 <__divsf3>
     3c6:	dc 01       	movw	r26, r24
     3c8:	cb 01       	movw	r24, r22
	//utilizei 60000 segundos pq quando for passar pra ms não terá alteração no valor
}
     3ca:	bc 01       	movw	r22, r24
     3cc:	cd 01       	movw	r24, r26
     3ce:	df 91       	pop	r29
     3d0:	cf 91       	pop	r28
     3d2:	08 95       	ret

000003d4 <pressure>:

void pressure()
{
     3d4:	cf 93       	push	r28
     3d6:	df 93       	push	r29
     3d8:	cd b7       	in	r28, 0x3d	; 61
     3da:	de b7       	in	r29, 0x3e	; 62
     3dc:	2a 97       	sbiw	r28, 0x0a	; 10
     3de:	0f b6       	in	r0, 0x3f	; 63
     3e0:	f8 94       	cli
     3e2:	de bf       	out	0x3e, r29	; 62
     3e4:	0f be       	out	0x3f, r0	; 63
     3e6:	cd bf       	out	0x3d, r28	; 61
	char vect[8];
	vect[7] = '\0';
     3e8:	1a 86       	std	Y+10, r1	; 0x0a
	
	nokia_lcd_set_cursor(0,40);
     3ea:	68 e2       	ldi	r22, 0x28	; 40
     3ec:	80 e0       	ldi	r24, 0x00	; 0
     3ee:	0e 94 9a 10 	call	0x2134	; 0x2134 <nokia_lcd_set_cursor>
	for(int p=0; p<7; p++)
     3f2:	1a 82       	std	Y+2, r1	; 0x02
     3f4:	19 82       	std	Y+1, r1	; 0x01
     3f6:	15 c0       	rjmp	.+42     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
	{
		vect[p] = pressao[p+1];
     3f8:	89 81       	ldd	r24, Y+1	; 0x01
     3fa:	9a 81       	ldd	r25, Y+2	; 0x02
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	87 56       	subi	r24, 0x67	; 103
     400:	9c 4f       	sbci	r25, 0xFC	; 252
     402:	fc 01       	movw	r30, r24
     404:	40 81       	ld	r20, Z
     406:	9e 01       	movw	r18, r28
     408:	2d 5f       	subi	r18, 0xFD	; 253
     40a:	3f 4f       	sbci	r19, 0xFF	; 255
     40c:	89 81       	ldd	r24, Y+1	; 0x01
     40e:	9a 81       	ldd	r25, Y+2	; 0x02
     410:	82 0f       	add	r24, r18
     412:	93 1f       	adc	r25, r19
     414:	fc 01       	movw	r30, r24
     416:	40 83       	st	Z, r20
{
	char vect[8];
	vect[7] = '\0';
	
	nokia_lcd_set_cursor(0,40);
	for(int p=0; p<7; p++)
     418:	89 81       	ldd	r24, Y+1	; 0x01
     41a:	9a 81       	ldd	r25, Y+2	; 0x02
     41c:	01 96       	adiw	r24, 0x01	; 1
     41e:	9a 83       	std	Y+2, r25	; 0x02
     420:	89 83       	std	Y+1, r24	; 0x01
     422:	89 81       	ldd	r24, Y+1	; 0x01
     424:	9a 81       	ldd	r25, Y+2	; 0x02
     426:	07 97       	sbiw	r24, 0x07	; 7
     428:	3c f3       	brlt	.-50     	; 0x3f8 <pressure+0x24>
	{
		vect[p] = pressao[p+1];
	}
	if(truth == 1)
     42a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <truth>
     42e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <truth+0x1>
     432:	01 97       	sbiw	r24, 0x01	; 1
     434:	31 f4       	brne	.+12     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
	{
		nokia_lcd_write_string(vect, 1);
     436:	ce 01       	movw	r24, r28
     438:	03 96       	adiw	r24, 0x03	; 3
     43a:	61 e0       	ldi	r22, 0x01	; 1
     43c:	0e 94 77 10 	call	0x20ee	; 0x20ee <nokia_lcd_write_string>
     440:	11 c0       	rjmp	.+34     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
	}
	else if(truth == 2)
     442:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <truth>
     446:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <truth+0x1>
     44a:	02 97       	sbiw	r24, 0x02	; 2
     44c:	31 f4       	brne	.+12     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
	{
		nokia_lcd_write_string("HHHxLLL", 1);
     44e:	61 e0       	ldi	r22, 0x01	; 1
     450:	8a e0       	ldi	r24, 0x0A	; 10
     452:	91 e0       	ldi	r25, 0x01	; 1
     454:	0e 94 77 10 	call	0x20ee	; 0x20ee <nokia_lcd_write_string>
     458:	05 c0       	rjmp	.+10     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
	}
	else
	{
		nokia_lcd_write_string("Erro!", 1);
     45a:	61 e0       	ldi	r22, 0x01	; 1
     45c:	82 e1       	ldi	r24, 0x12	; 18
     45e:	91 e0       	ldi	r25, 0x01	; 1
     460:	0e 94 77 10 	call	0x20ee	; 0x20ee <nokia_lcd_write_string>
	}
	nokia_lcd_set_cursor(45, 40);
     464:	68 e2       	ldi	r22, 0x28	; 40
     466:	8d e2       	ldi	r24, 0x2D	; 45
     468:	0e 94 9a 10 	call	0x2134	; 0x2134 <nokia_lcd_set_cursor>
	nokia_lcd_write_string("mmHg", 1);
     46c:	61 e0       	ldi	r22, 0x01	; 1
     46e:	88 e1       	ldi	r24, 0x18	; 24
     470:	91 e0       	ldi	r25, 0x01	; 1
     472:	0e 94 77 10 	call	0x20ee	; 0x20ee <nokia_lcd_write_string>
}
     476:	00 00       	nop
     478:	2a 96       	adiw	r28, 0x0a	; 10
     47a:	0f b6       	in	r0, 0x3f	; 63
     47c:	f8 94       	cli
     47e:	de bf       	out	0x3e, r29	; 62
     480:	0f be       	out	0x3f, r0	; 63
     482:	cd bf       	out	0x3d, r28	; 61
     484:	df 91       	pop	r29
     486:	cf 91       	pop	r28
     488:	08 95       	ret

0000048a <conversao>:
void conversao ()
{
     48a:	ef 92       	push	r14
     48c:	ff 92       	push	r15
     48e:	0f 93       	push	r16
     490:	1f 93       	push	r17
     492:	cf 93       	push	r28
     494:	df 93       	push	r29
     496:	cd b7       	in	r28, 0x3d	; 61
     498:	de b7       	in	r29, 0x3e	; 62
	flag = 0; 
     49a:	10 92 92 03 	sts	0x0392, r1	; 0x800392 <flag>
	b[1] = (FreqRespiracao%10) + '0';
     49e:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     4a2:	8d ec       	ldi	r24, 0xCD	; 205
     4a4:	98 9f       	mul	r25, r24
     4a6:	81 2d       	mov	r24, r1
     4a8:	11 24       	eor	r1, r1
     4aa:	86 95       	lsr	r24
     4ac:	86 95       	lsr	r24
     4ae:	86 95       	lsr	r24
     4b0:	88 0f       	add	r24, r24
     4b2:	28 2f       	mov	r18, r24
     4b4:	22 0f       	add	r18, r18
     4b6:	22 0f       	add	r18, r18
     4b8:	82 0f       	add	r24, r18
     4ba:	e9 2e       	mov	r14, r25
     4bc:	e8 1a       	sub	r14, r24
     4be:	8e 2d       	mov	r24, r14
     4c0:	80 5d       	subi	r24, 0xD0	; 208
     4c2:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <b+0x1>
	b[0] = (FreqRespiracao/10) + '0';
     4c6:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     4ca:	8d ec       	ldi	r24, 0xCD	; 205
     4cc:	98 9f       	mul	r25, r24
     4ce:	81 2d       	mov	r24, r1
     4d0:	11 24       	eor	r1, r1
     4d2:	86 95       	lsr	r24
     4d4:	86 95       	lsr	r24
     4d6:	86 95       	lsr	r24
     4d8:	80 5d       	subi	r24, 0xD0	; 208
     4da:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <b>
	
	O21[2] = ((O2*10)%100)%10 + '0';
     4de:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <O2>
     4e2:	88 2f       	mov	r24, r24
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	88 0f       	add	r24, r24
     4e8:	99 1f       	adc	r25, r25
     4ea:	9c 01       	movw	r18, r24
     4ec:	22 0f       	add	r18, r18
     4ee:	33 1f       	adc	r19, r19
     4f0:	22 0f       	add	r18, r18
     4f2:	33 1f       	adc	r19, r19
     4f4:	82 0f       	add	r24, r18
     4f6:	93 1f       	adc	r25, r19
     4f8:	24 e6       	ldi	r18, 0x64	; 100
     4fa:	30 e0       	ldi	r19, 0x00	; 0
     4fc:	b9 01       	movw	r22, r18
     4fe:	0e 94 19 13 	call	0x2632	; 0x2632 <__divmodhi4>
     502:	2a e0       	ldi	r18, 0x0A	; 10
     504:	30 e0       	ldi	r19, 0x00	; 0
     506:	b9 01       	movw	r22, r18
     508:	0e 94 19 13 	call	0x2632	; 0x2632 <__divmodhi4>
     50c:	80 5d       	subi	r24, 0xD0	; 208
     50e:	80 93 be 03 	sts	0x03BE, r24	; 0x8003be <O21+0x2>
	O21[1] = ((O2*10)%100)/10 + '0'; 
     512:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <O2>
     516:	88 2f       	mov	r24, r24
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	88 0f       	add	r24, r24
     51c:	99 1f       	adc	r25, r25
     51e:	9c 01       	movw	r18, r24
     520:	22 0f       	add	r18, r18
     522:	33 1f       	adc	r19, r19
     524:	22 0f       	add	r18, r18
     526:	33 1f       	adc	r19, r19
     528:	82 0f       	add	r24, r18
     52a:	93 1f       	adc	r25, r19
     52c:	24 e6       	ldi	r18, 0x64	; 100
     52e:	30 e0       	ldi	r19, 0x00	; 0
     530:	b9 01       	movw	r22, r18
     532:	0e 94 19 13 	call	0x2632	; 0x2632 <__divmodhi4>
     536:	2a e0       	ldi	r18, 0x0A	; 10
     538:	30 e0       	ldi	r19, 0x00	; 0
     53a:	b9 01       	movw	r22, r18
     53c:	0e 94 19 13 	call	0x2632	; 0x2632 <__divmodhi4>
     540:	cb 01       	movw	r24, r22
     542:	80 5d       	subi	r24, 0xD0	; 208
     544:	80 93 bd 03 	sts	0x03BD, r24	; 0x8003bd <O21+0x1>
	O21[0] = ((O2*10)/100) + '0'; 
     548:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <O2>
     54c:	88 2f       	mov	r24, r24
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	88 0f       	add	r24, r24
     552:	99 1f       	adc	r25, r25
     554:	9c 01       	movw	r18, r24
     556:	22 0f       	add	r18, r18
     558:	33 1f       	adc	r19, r19
     55a:	22 0f       	add	r18, r18
     55c:	33 1f       	adc	r19, r19
     55e:	82 0f       	add	r24, r18
     560:	93 1f       	adc	r25, r19
     562:	24 e6       	ldi	r18, 0x64	; 100
     564:	30 e0       	ldi	r19, 0x00	; 0
     566:	b9 01       	movw	r22, r18
     568:	0e 94 19 13 	call	0x2632	; 0x2632 <__divmodhi4>
     56c:	cb 01       	movw	r24, r22
     56e:	80 5d       	subi	r24, 0xD0	; 208
     570:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <O21>
	
	c[2] = (bpm%100)%10 + '0';
     574:	80 91 bb 03 	lds	r24, 0x03BB	; 0x8003bb <bpm>
     578:	99 e2       	ldi	r25, 0x29	; 41
     57a:	89 9f       	mul	r24, r25
     57c:	91 2d       	mov	r25, r1
     57e:	11 24       	eor	r1, r1
     580:	92 95       	swap	r25
     582:	9f 70       	andi	r25, 0x0F	; 15
     584:	24 e6       	ldi	r18, 0x64	; 100
     586:	92 9f       	mul	r25, r18
     588:	90 2d       	mov	r25, r0
     58a:	11 24       	eor	r1, r1
     58c:	f8 2e       	mov	r15, r24
     58e:	f9 1a       	sub	r15, r25
     590:	9f 2d       	mov	r25, r15
     592:	8d ec       	ldi	r24, 0xCD	; 205
     594:	98 9f       	mul	r25, r24
     596:	81 2d       	mov	r24, r1
     598:	11 24       	eor	r1, r1
     59a:	86 95       	lsr	r24
     59c:	86 95       	lsr	r24
     59e:	86 95       	lsr	r24
     5a0:	88 0f       	add	r24, r24
     5a2:	28 2f       	mov	r18, r24
     5a4:	22 0f       	add	r18, r18
     5a6:	22 0f       	add	r18, r18
     5a8:	82 0f       	add	r24, r18
     5aa:	09 2f       	mov	r16, r25
     5ac:	08 1b       	sub	r16, r24
     5ae:	80 2f       	mov	r24, r16
     5b0:	80 5d       	subi	r24, 0xD0	; 208
     5b2:	80 93 b5 03 	sts	0x03B5, r24	; 0x8003b5 <c+0x2>
	c[1] = (bpm%100)/10 + '0';
     5b6:	90 91 bb 03 	lds	r25, 0x03BB	; 0x8003bb <bpm>
     5ba:	89 e2       	ldi	r24, 0x29	; 41
     5bc:	98 9f       	mul	r25, r24
     5be:	81 2d       	mov	r24, r1
     5c0:	11 24       	eor	r1, r1
     5c2:	82 95       	swap	r24
     5c4:	8f 70       	andi	r24, 0x0F	; 15
     5c6:	24 e6       	ldi	r18, 0x64	; 100
     5c8:	82 9f       	mul	r24, r18
     5ca:	80 2d       	mov	r24, r0
     5cc:	11 24       	eor	r1, r1
     5ce:	19 2f       	mov	r17, r25
     5d0:	18 1b       	sub	r17, r24
     5d2:	81 2f       	mov	r24, r17
     5d4:	9d ec       	ldi	r25, 0xCD	; 205
     5d6:	89 9f       	mul	r24, r25
     5d8:	81 2d       	mov	r24, r1
     5da:	11 24       	eor	r1, r1
     5dc:	86 95       	lsr	r24
     5de:	86 95       	lsr	r24
     5e0:	86 95       	lsr	r24
     5e2:	80 5d       	subi	r24, 0xD0	; 208
     5e4:	80 93 b4 03 	sts	0x03B4, r24	; 0x8003b4 <c+0x1>
	c[0] = (bpm/100) + '0'; 
     5e8:	90 91 bb 03 	lds	r25, 0x03BB	; 0x8003bb <bpm>
     5ec:	89 e2       	ldi	r24, 0x29	; 41
     5ee:	98 9f       	mul	r25, r24
     5f0:	81 2d       	mov	r24, r1
     5f2:	11 24       	eor	r1, r1
     5f4:	82 95       	swap	r24
     5f6:	8f 70       	andi	r24, 0x0F	; 15
     5f8:	80 5d       	subi	r24, 0xD0	; 208
     5fa:	80 93 b3 03 	sts	0x03B3, r24	; 0x8003b3 <c>
	
	sp02[2] = (conv2%100)%10 + '0';
     5fe:	e0 91 93 03 	lds	r30, 0x0393	; 0x800393 <conv2>
     602:	f0 91 94 03 	lds	r31, 0x0394	; 0x800394 <conv2+0x1>
     606:	cf 01       	movw	r24, r30
     608:	96 95       	lsr	r25
     60a:	87 95       	ror	r24
     60c:	96 95       	lsr	r25
     60e:	87 95       	ror	r24
     610:	9c 01       	movw	r18, r24
     612:	ab e7       	ldi	r26, 0x7B	; 123
     614:	b4 e1       	ldi	r27, 0x14	; 20
     616:	0e 94 2d 13 	call	0x265a	; 0x265a <__umulhisi3>
     61a:	ac 01       	movw	r20, r24
     61c:	56 95       	lsr	r21
     61e:	47 95       	ror	r20
     620:	24 e6       	ldi	r18, 0x64	; 100
     622:	24 9f       	mul	r18, r20
     624:	c0 01       	movw	r24, r0
     626:	25 9f       	mul	r18, r21
     628:	90 0d       	add	r25, r0
     62a:	11 24       	eor	r1, r1
     62c:	af 01       	movw	r20, r30
     62e:	48 1b       	sub	r20, r24
     630:	59 0b       	sbc	r21, r25
     632:	9a 01       	movw	r18, r20
     634:	ad ec       	ldi	r26, 0xCD	; 205
     636:	bc ec       	ldi	r27, 0xCC	; 204
     638:	0e 94 2d 13 	call	0x265a	; 0x265a <__umulhisi3>
     63c:	96 95       	lsr	r25
     63e:	87 95       	ror	r24
     640:	96 95       	lsr	r25
     642:	87 95       	ror	r24
     644:	96 95       	lsr	r25
     646:	87 95       	ror	r24
     648:	88 0f       	add	r24, r24
     64a:	99 1f       	adc	r25, r25
     64c:	9c 01       	movw	r18, r24
     64e:	22 0f       	add	r18, r18
     650:	33 1f       	adc	r19, r19
     652:	22 0f       	add	r18, r18
     654:	33 1f       	adc	r19, r19
     656:	82 0f       	add	r24, r18
     658:	93 1f       	adc	r25, r19
     65a:	9a 01       	movw	r18, r20
     65c:	28 1b       	sub	r18, r24
     65e:	39 0b       	sbc	r19, r25
     660:	c9 01       	movw	r24, r18
     662:	80 5d       	subi	r24, 0xD0	; 208
     664:	80 93 b9 03 	sts	0x03B9, r24	; 0x8003b9 <sp02+0x2>
	sp02[1] = (conv2%100)/10 + '0';
     668:	40 91 93 03 	lds	r20, 0x0393	; 0x800393 <conv2>
     66c:	50 91 94 03 	lds	r21, 0x0394	; 0x800394 <conv2+0x1>
     670:	ca 01       	movw	r24, r20
     672:	96 95       	lsr	r25
     674:	87 95       	ror	r24
     676:	96 95       	lsr	r25
     678:	87 95       	ror	r24
     67a:	9c 01       	movw	r18, r24
     67c:	ab e7       	ldi	r26, 0x7B	; 123
     67e:	b4 e1       	ldi	r27, 0x14	; 20
     680:	0e 94 2d 13 	call	0x265a	; 0x265a <__umulhisi3>
     684:	96 95       	lsr	r25
     686:	87 95       	ror	r24
     688:	64 e6       	ldi	r22, 0x64	; 100
     68a:	68 9f       	mul	r22, r24
     68c:	90 01       	movw	r18, r0
     68e:	69 9f       	mul	r22, r25
     690:	30 0d       	add	r19, r0
     692:	11 24       	eor	r1, r1
     694:	ca 01       	movw	r24, r20
     696:	82 1b       	sub	r24, r18
     698:	93 0b       	sbc	r25, r19
     69a:	9c 01       	movw	r18, r24
     69c:	ad ec       	ldi	r26, 0xCD	; 205
     69e:	bc ec       	ldi	r27, 0xCC	; 204
     6a0:	0e 94 2d 13 	call	0x265a	; 0x265a <__umulhisi3>
     6a4:	96 95       	lsr	r25
     6a6:	87 95       	ror	r24
     6a8:	96 95       	lsr	r25
     6aa:	87 95       	ror	r24
     6ac:	96 95       	lsr	r25
     6ae:	87 95       	ror	r24
     6b0:	80 5d       	subi	r24, 0xD0	; 208
     6b2:	80 93 b8 03 	sts	0x03B8, r24	; 0x8003b8 <sp02+0x1>
	sp02[0] = (conv2/100) + '0'; 
     6b6:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <conv2>
     6ba:	90 91 94 03 	lds	r25, 0x0394	; 0x800394 <conv2+0x1>
     6be:	96 95       	lsr	r25
     6c0:	87 95       	ror	r24
     6c2:	96 95       	lsr	r25
     6c4:	87 95       	ror	r24
     6c6:	9c 01       	movw	r18, r24
     6c8:	ab e7       	ldi	r26, 0x7B	; 123
     6ca:	b4 e1       	ldi	r27, 0x14	; 20
     6cc:	0e 94 2d 13 	call	0x265a	; 0x265a <__umulhisi3>
     6d0:	96 95       	lsr	r25
     6d2:	87 95       	ror	r24
     6d4:	80 5d       	subi	r24, 0xD0	; 208
     6d6:	80 93 b7 03 	sts	0x03B7, r24	; 0x8003b7 <sp02>
	
	pH[4] = '\0';
     6da:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <pH+0x4>
	pH[3] = ((int)(conv3*100)%100)%10 + '0';
     6de:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <conv3>
     6e2:	90 91 ab 03 	lds	r25, 0x03AB	; 0x8003ab <conv3+0x1>
     6e6:	a0 91 ac 03 	lds	r26, 0x03AC	; 0x8003ac <conv3+0x2>
     6ea:	b0 91 ad 03 	lds	r27, 0x03AD	; 0x8003ad <conv3+0x3>
     6ee:	20 e0       	ldi	r18, 0x00	; 0
     6f0:	30 e0       	ldi	r19, 0x00	; 0
     6f2:	48 ec       	ldi	r20, 0xC8	; 200
     6f4:	52 e4       	ldi	r21, 0x42	; 66
     6f6:	bc 01       	movw	r22, r24
     6f8:	cd 01       	movw	r24, r26
     6fa:	0e 94 a0 12 	call	0x2540	; 0x2540 <__mulsf3>
     6fe:	dc 01       	movw	r26, r24
     700:	cb 01       	movw	r24, r22
     702:	bc 01       	movw	r22, r24
     704:	cd 01       	movw	r24, r26
     706:	0e 94 b3 11 	call	0x2366	; 0x2366 <__fixsfsi>
     70a:	dc 01       	movw	r26, r24
     70c:	cb 01       	movw	r24, r22
     70e:	24 e6       	ldi	r18, 0x64	; 100
     710:	30 e0       	ldi	r19, 0x00	; 0
     712:	b9 01       	movw	r22, r18
     714:	0e 94 19 13 	call	0x2632	; 0x2632 <__divmodhi4>
     718:	2a e0       	ldi	r18, 0x0A	; 10
     71a:	30 e0       	ldi	r19, 0x00	; 0
     71c:	b9 01       	movw	r22, r18
     71e:	0e 94 19 13 	call	0x2632	; 0x2632 <__divmodhi4>
     722:	80 5d       	subi	r24, 0xD0	; 208
     724:	80 93 b1 03 	sts	0x03B1, r24	; 0x8003b1 <pH+0x3>
	pH[2] = ((int)(conv3*100)%100)/10 + '0';
     728:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <conv3>
     72c:	90 91 ab 03 	lds	r25, 0x03AB	; 0x8003ab <conv3+0x1>
     730:	a0 91 ac 03 	lds	r26, 0x03AC	; 0x8003ac <conv3+0x2>
     734:	b0 91 ad 03 	lds	r27, 0x03AD	; 0x8003ad <conv3+0x3>
     738:	20 e0       	ldi	r18, 0x00	; 0
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	48 ec       	ldi	r20, 0xC8	; 200
     73e:	52 e4       	ldi	r21, 0x42	; 66
     740:	bc 01       	movw	r22, r24
     742:	cd 01       	movw	r24, r26
     744:	0e 94 a0 12 	call	0x2540	; 0x2540 <__mulsf3>
     748:	dc 01       	movw	r26, r24
     74a:	cb 01       	movw	r24, r22
     74c:	bc 01       	movw	r22, r24
     74e:	cd 01       	movw	r24, r26
     750:	0e 94 b3 11 	call	0x2366	; 0x2366 <__fixsfsi>
     754:	dc 01       	movw	r26, r24
     756:	cb 01       	movw	r24, r22
     758:	24 e6       	ldi	r18, 0x64	; 100
     75a:	30 e0       	ldi	r19, 0x00	; 0
     75c:	b9 01       	movw	r22, r18
     75e:	0e 94 19 13 	call	0x2632	; 0x2632 <__divmodhi4>
     762:	2a e0       	ldi	r18, 0x0A	; 10
     764:	30 e0       	ldi	r19, 0x00	; 0
     766:	b9 01       	movw	r22, r18
     768:	0e 94 19 13 	call	0x2632	; 0x2632 <__divmodhi4>
     76c:	cb 01       	movw	r24, r22
     76e:	80 5d       	subi	r24, 0xD0	; 208
     770:	80 93 b0 03 	sts	0x03B0, r24	; 0x8003b0 <pH+0x2>
	pH[1] = 46;
     774:	8e e2       	ldi	r24, 0x2E	; 46
     776:	80 93 af 03 	sts	0x03AF, r24	; 0x8003af <pH+0x1>
	pH[0] = ((int)(conv3*100)/100) + '0'; 
     77a:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <conv3>
     77e:	90 91 ab 03 	lds	r25, 0x03AB	; 0x8003ab <conv3+0x1>
     782:	a0 91 ac 03 	lds	r26, 0x03AC	; 0x8003ac <conv3+0x2>
     786:	b0 91 ad 03 	lds	r27, 0x03AD	; 0x8003ad <conv3+0x3>
     78a:	20 e0       	ldi	r18, 0x00	; 0
     78c:	30 e0       	ldi	r19, 0x00	; 0
     78e:	48 ec       	ldi	r20, 0xC8	; 200
     790:	52 e4       	ldi	r21, 0x42	; 66
     792:	bc 01       	movw	r22, r24
     794:	cd 01       	movw	r24, r26
     796:	0e 94 a0 12 	call	0x2540	; 0x2540 <__mulsf3>
     79a:	dc 01       	movw	r26, r24
     79c:	cb 01       	movw	r24, r22
     79e:	bc 01       	movw	r22, r24
     7a0:	cd 01       	movw	r24, r26
     7a2:	0e 94 b3 11 	call	0x2366	; 0x2366 <__fixsfsi>
     7a6:	dc 01       	movw	r26, r24
     7a8:	cb 01       	movw	r24, r22
     7aa:	24 e6       	ldi	r18, 0x64	; 100
     7ac:	30 e0       	ldi	r19, 0x00	; 0
     7ae:	b9 01       	movw	r22, r18
     7b0:	0e 94 19 13 	call	0x2632	; 0x2632 <__divmodhi4>
     7b4:	cb 01       	movw	r24, r22
     7b6:	80 5d       	subi	r24, 0xD0	; 208
     7b8:	80 93 ae 03 	sts	0x03AE, r24	; 0x8003ae <pH>
 
	conv1 = (int)(conv*10);
     7bc:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <conv>
     7c0:	90 91 96 03 	lds	r25, 0x0396	; 0x800396 <conv+0x1>
     7c4:	a0 91 97 03 	lds	r26, 0x0397	; 0x800397 <conv+0x2>
     7c8:	b0 91 98 03 	lds	r27, 0x0398	; 0x800398 <conv+0x3>
     7cc:	20 e0       	ldi	r18, 0x00	; 0
     7ce:	30 e0       	ldi	r19, 0x00	; 0
     7d0:	40 e2       	ldi	r20, 0x20	; 32
     7d2:	51 e4       	ldi	r21, 0x41	; 65
     7d4:	bc 01       	movw	r22, r24
     7d6:	cd 01       	movw	r24, r26
     7d8:	0e 94 a0 12 	call	0x2540	; 0x2540 <__mulsf3>
     7dc:	dc 01       	movw	r26, r24
     7de:	cb 01       	movw	r24, r22
     7e0:	bc 01       	movw	r22, r24
     7e2:	cd 01       	movw	r24, r26
     7e4:	0e 94 b3 11 	call	0x2366	; 0x2366 <__fixsfsi>
     7e8:	dc 01       	movw	r26, r24
     7ea:	cb 01       	movw	r24, r22
     7ec:	90 93 c4 03 	sts	0x03C4, r25	; 0x8003c4 <conv1+0x1>
     7f0:	80 93 c3 03 	sts	0x03C3, r24	; 0x8003c3 <conv1>
	
	temp[3] = (conv1%100)%10 + '0';
     7f4:	e0 91 c3 03 	lds	r30, 0x03C3	; 0x8003c3 <conv1>
     7f8:	f0 91 c4 03 	lds	r31, 0x03C4	; 0x8003c4 <conv1+0x1>
     7fc:	cf 01       	movw	r24, r30
     7fe:	96 95       	lsr	r25
     800:	87 95       	ror	r24
     802:	96 95       	lsr	r25
     804:	87 95       	ror	r24
     806:	9c 01       	movw	r18, r24
     808:	ab e7       	ldi	r26, 0x7B	; 123
     80a:	b4 e1       	ldi	r27, 0x14	; 20
     80c:	0e 94 2d 13 	call	0x265a	; 0x265a <__umulhisi3>
     810:	ac 01       	movw	r20, r24
     812:	56 95       	lsr	r21
     814:	47 95       	ror	r20
     816:	24 e6       	ldi	r18, 0x64	; 100
     818:	24 9f       	mul	r18, r20
     81a:	c0 01       	movw	r24, r0
     81c:	25 9f       	mul	r18, r21
     81e:	90 0d       	add	r25, r0
     820:	11 24       	eor	r1, r1
     822:	af 01       	movw	r20, r30
     824:	48 1b       	sub	r20, r24
     826:	59 0b       	sbc	r21, r25
     828:	9a 01       	movw	r18, r20
     82a:	ad ec       	ldi	r26, 0xCD	; 205
     82c:	bc ec       	ldi	r27, 0xCC	; 204
     82e:	0e 94 2d 13 	call	0x265a	; 0x265a <__umulhisi3>
     832:	96 95       	lsr	r25
     834:	87 95       	ror	r24
     836:	96 95       	lsr	r25
     838:	87 95       	ror	r24
     83a:	96 95       	lsr	r25
     83c:	87 95       	ror	r24
     83e:	88 0f       	add	r24, r24
     840:	99 1f       	adc	r25, r25
     842:	9c 01       	movw	r18, r24
     844:	22 0f       	add	r18, r18
     846:	33 1f       	adc	r19, r19
     848:	22 0f       	add	r18, r18
     84a:	33 1f       	adc	r19, r19
     84c:	82 0f       	add	r24, r18
     84e:	93 1f       	adc	r25, r19
     850:	7a 01       	movw	r14, r20
     852:	e8 1a       	sub	r14, r24
     854:	f9 0a       	sbc	r15, r25
     856:	c7 01       	movw	r24, r14
     858:	80 5d       	subi	r24, 0xD0	; 208
     85a:	80 93 a8 03 	sts	0x03A8, r24	; 0x8003a8 <temp+0x3>
	temp[2] = 46;// ponto
     85e:	8e e2       	ldi	r24, 0x2E	; 46
     860:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <temp+0x2>
	temp[1] = (conv1%100)/10 + '0';
     864:	40 91 c3 03 	lds	r20, 0x03C3	; 0x8003c3 <conv1>
     868:	50 91 c4 03 	lds	r21, 0x03C4	; 0x8003c4 <conv1+0x1>
     86c:	ca 01       	movw	r24, r20
     86e:	96 95       	lsr	r25
     870:	87 95       	ror	r24
     872:	96 95       	lsr	r25
     874:	87 95       	ror	r24
     876:	9c 01       	movw	r18, r24
     878:	ab e7       	ldi	r26, 0x7B	; 123
     87a:	b4 e1       	ldi	r27, 0x14	; 20
     87c:	0e 94 2d 13 	call	0x265a	; 0x265a <__umulhisi3>
     880:	96 95       	lsr	r25
     882:	87 95       	ror	r24
     884:	64 e6       	ldi	r22, 0x64	; 100
     886:	68 9f       	mul	r22, r24
     888:	90 01       	movw	r18, r0
     88a:	69 9f       	mul	r22, r25
     88c:	30 0d       	add	r19, r0
     88e:	11 24       	eor	r1, r1
     890:	ca 01       	movw	r24, r20
     892:	82 1b       	sub	r24, r18
     894:	93 0b       	sbc	r25, r19
     896:	9c 01       	movw	r18, r24
     898:	ad ec       	ldi	r26, 0xCD	; 205
     89a:	bc ec       	ldi	r27, 0xCC	; 204
     89c:	0e 94 2d 13 	call	0x265a	; 0x265a <__umulhisi3>
     8a0:	96 95       	lsr	r25
     8a2:	87 95       	ror	r24
     8a4:	96 95       	lsr	r25
     8a6:	87 95       	ror	r24
     8a8:	96 95       	lsr	r25
     8aa:	87 95       	ror	r24
     8ac:	80 5d       	subi	r24, 0xD0	; 208
     8ae:	80 93 a6 03 	sts	0x03A6, r24	; 0x8003a6 <temp+0x1>
	temp[0] = (conv1/100) + '0'; 
     8b2:	80 91 c3 03 	lds	r24, 0x03C3	; 0x8003c3 <conv1>
     8b6:	90 91 c4 03 	lds	r25, 0x03C4	; 0x8003c4 <conv1+0x1>
     8ba:	96 95       	lsr	r25
     8bc:	87 95       	ror	r24
     8be:	96 95       	lsr	r25
     8c0:	87 95       	ror	r24
     8c2:	9c 01       	movw	r18, r24
     8c4:	ab e7       	ldi	r26, 0x7B	; 123
     8c6:	b4 e1       	ldi	r27, 0x14	; 20
     8c8:	0e 94 2d 13 	call	0x265a	; 0x265a <__umulhisi3>
     8cc:	96 95       	lsr	r25
     8ce:	87 95       	ror	r24
     8d0:	80 5d       	subi	r24, 0xD0	; 208
     8d2:	80 93 a5 03 	sts	0x03A5, r24	; 0x8003a5 <temp>
	
	Vol[0] = VolAr%10 + '0'; 
     8d6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <VolAr>
     8da:	8d ec       	ldi	r24, 0xCD	; 205
     8dc:	98 9f       	mul	r25, r24
     8de:	81 2d       	mov	r24, r1
     8e0:	11 24       	eor	r1, r1
     8e2:	86 95       	lsr	r24
     8e4:	86 95       	lsr	r24
     8e6:	86 95       	lsr	r24
     8e8:	88 0f       	add	r24, r24
     8ea:	28 2f       	mov	r18, r24
     8ec:	22 0f       	add	r18, r18
     8ee:	22 0f       	add	r18, r18
     8f0:	82 0f       	add	r24, r18
     8f2:	f9 2e       	mov	r15, r25
     8f4:	f8 1a       	sub	r15, r24
     8f6:	8f 2d       	mov	r24, r15
     8f8:	80 5d       	subi	r24, 0xD0	; 208
     8fa:	80 93 a3 03 	sts	0x03A3, r24	; 0x8003a3 <Vol>
	
	if((tempo_ms - tempo200) >= 200)//a cada 200ms, é mostrada uma atualizacao no display. 
     8fe:	20 91 71 01 	lds	r18, 0x0171	; 0x800171 <tempo_ms>
     902:	30 91 72 01 	lds	r19, 0x0172	; 0x800172 <tempo_ms+0x1>
     906:	40 91 73 01 	lds	r20, 0x0173	; 0x800173 <tempo_ms+0x2>
     90a:	50 91 74 01 	lds	r21, 0x0174	; 0x800174 <tempo_ms+0x3>
     90e:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <tempo200>
     912:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <tempo200+0x1>
     916:	a0 91 87 01 	lds	r26, 0x0187	; 0x800187 <tempo200+0x2>
     91a:	b0 91 88 01 	lds	r27, 0x0188	; 0x800188 <tempo200+0x3>
     91e:	79 01       	movw	r14, r18
     920:	8a 01       	movw	r16, r20
     922:	e8 1a       	sub	r14, r24
     924:	f9 0a       	sbc	r15, r25
     926:	0a 0b       	sbc	r16, r26
     928:	1b 0b       	sbc	r17, r27
     92a:	d8 01       	movw	r26, r16
     92c:	c7 01       	movw	r24, r14
     92e:	88 3c       	cpi	r24, 0xC8	; 200
     930:	91 05       	cpc	r25, r1
     932:	a1 05       	cpc	r26, r1
     934:	b1 05       	cpc	r27, r1
     936:	08 f4       	brcc	.+2      	; 0x93a <__stack+0x3b>
     938:	ff c1       	rjmp	.+1022   	; 0xd38 <__stack+0x439>
	{
		if(sel == 0)//sinais vitais
     93a:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <__data_end>
     93e:	88 23       	and	r24, r24
     940:	09 f0       	breq	.+2      	; 0x944 <__stack+0x45>
     942:	46 c0       	rjmp	.+140    	; 0x9d0 <__stack+0xd1>
		{
			nokia_lcd_clear();
     944:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <nokia_lcd_clear>
			nokia_lcd_set_cursor(0,0); 
     948:	60 e0       	ldi	r22, 0x00	; 0
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	0e 94 9a 10 	call	0x2134	; 0x2134 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("Sinais Vitais", 1);
     950:	61 e0       	ldi	r22, 0x01	; 1
     952:	8d e1       	ldi	r24, 0x1D	; 29
     954:	91 e0       	ldi	r25, 0x01	; 1
     956:	0e 94 77 10 	call	0x20ee	; 0x20ee <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0,10);
     95a:	6a e0       	ldi	r22, 0x0A	; 10
     95c:	80 e0       	ldi	r24, 0x00	; 0
     95e:	0e 94 9a 10 	call	0x2134	; 0x2134 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(c, 1);
     962:	61 e0       	ldi	r22, 0x01	; 1
     964:	83 eb       	ldi	r24, 0xB3	; 179
     966:	93 e0       	ldi	r25, 0x03	; 3
     968:	0e 94 77 10 	call	0x20ee	; 0x20ee <nokia_lcd_write_string>
			nokia_lcd_set_cursor(30, 10);
     96c:	6a e0       	ldi	r22, 0x0A	; 10
     96e:	8e e1       	ldi	r24, 0x1E	; 30
     970:	0e 94 9a 10 	call	0x2134	; 0x2134 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("bpm", 1);
     974:	61 e0       	ldi	r22, 0x01	; 1
     976:	8b e2       	ldi	r24, 0x2B	; 43
     978:	91 e0       	ldi	r25, 0x01	; 1
     97a:	0e 94 77 10 	call	0x20ee	; 0x20ee <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0,20);
     97e:	64 e1       	ldi	r22, 0x14	; 20
     980:	80 e0       	ldi	r24, 0x00	; 0
     982:	0e 94 9a 10 	call	0x2134	; 0x2134 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(sp02, 1);
     986:	61 e0       	ldi	r22, 0x01	; 1
     988:	87 eb       	ldi	r24, 0xB7	; 183
     98a:	93 e0       	ldi	r25, 0x03	; 3
     98c:	0e 94 77 10 	call	0x20ee	; 0x20ee <nokia_lcd_write_string>
			nokia_lcd_set_cursor(30, 20);
     990:	64 e1       	ldi	r22, 0x14	; 20
     992:	8e e1       	ldi	r24, 0x1E	; 30
     994:	0e 94 9a 10 	call	0x2134	; 0x2134 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("SpO2", 1);
     998:	61 e0       	ldi	r22, 0x01	; 1
     99a:	8f e2       	ldi	r24, 0x2F	; 47
     99c:	91 e0       	ldi	r25, 0x01	; 1
     99e:	0e 94 77 10 	call	0x20ee	; 0x20ee <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0,30);
     9a2:	6e e1       	ldi	r22, 0x1E	; 30
     9a4:	80 e0       	ldi	r24, 0x00	; 0
     9a6:	0e 94 9a 10 	call	0x2134	; 0x2134 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(temp, 1);
     9aa:	61 e0       	ldi	r22, 0x01	; 1
     9ac:	85 ea       	ldi	r24, 0xA5	; 165
     9ae:	93 e0       	ldi	r25, 0x03	; 3
     9b0:	0e 94 77 10 	call	0x20ee	; 0x20ee <nokia_lcd_write_string>
			nokia_lcd_set_cursor(30, 30);
     9b4:	6e e1       	ldi	r22, 0x1E	; 30
     9b6:	8e e1       	ldi	r24, 0x1E	; 30
     9b8:	0e 94 9a 10 	call	0x2134	; 0x2134 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("C", 1);
     9bc:	61 e0       	ldi	r22, 0x01	; 1
     9be:	84 e3       	ldi	r24, 0x34	; 52
     9c0:	91 e0       	ldi	r25, 0x01	; 1
     9c2:	0e 94 77 10 	call	0x20ee	; 0x20ee <nokia_lcd_write_string>
			pressure();
     9c6:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <pressure>
			nokia_lcd_render();
     9ca:	0e 94 ad 10 	call	0x215a	; 0x215a <nokia_lcd_render>
     9ce:	a4 c1       	rjmp	.+840    	; 0xd18 <__stack+0x419>
		}
		else if(sel == 2)
     9d0:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <__data_end>
     9d4:	82 30       	cpi	r24, 0x02	; 2
     9d6:	09 f0       	breq	.+2      	; 0x9da <__stack+0xdb>
     9d8:	ca c0       	rjmp	.+404    	; 0xb6e <__stack+0x26f>
		{
			nokia_lcd_clear();
     9da:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <nokia_lcd_clear>
			nokia_lcd_set_cursor(0,0);
     9de:	60 e0       	ldi	r22, 0x00	; 0
     9e0:	80 e0       	ldi	r24, 0x00	; 0
     9e2:	0e 94 9a 10 	call	0x2134	; 0x2134 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("Sinais Vitais", 1);
     9e6:	61 e0       	ldi	r22, 0x01	; 1
     9e8:	8d e1       	ldi	r24, 0x1D	; 29
     9ea:	91 e0       	ldi	r25, 0x01	; 1
     9ec:	0e 94 77 10 	call	0x20ee	; 0x20ee <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0,20);
     9f0:	64 e1       	ldi	r22, 0x14	; 20
     9f2:	80 e0       	ldi	r24, 0x00	; 0
     9f4:	0e 94 9a 10 	call	0x2134	; 0x2134 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(sp02, 1);
     9f8:	61 e0       	ldi	r22, 0x01	; 1
     9fa:	87 eb       	ldi	r24, 0xB7	; 183
     9fc:	93 e0       	ldi	r25, 0x03	; 3
     9fe:	0e 94 77 10 	call	0x20ee	; 0x20ee <nokia_lcd_write_string>
			nokia_lcd_set_cursor(30, 20);
     a02:	64 e1       	ldi	r22, 0x14	; 20
     a04:	8e e1       	ldi	r24, 0x1E	; 30
     a06:	0e 94 9a 10 	call	0x2134	; 0x2134 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("SpO2", 1);
     a0a:	61 e0       	ldi	r22, 0x01	; 1
     a0c:	8f e2       	ldi	r24, 0x2F	; 47
     a0e:	91 e0       	ldi	r25, 0x01	; 1
     a10:	0e 94 77 10 	call	0x20ee	; 0x20ee <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 30);
     a14:	6e e1       	ldi	r22, 0x1E	; 30
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	0e 94 9a 10 	call	0x2134	; 0x2134 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(pH, 1);
     a1c:	61 e0       	ldi	r22, 0x01	; 1
     a1e:	8e ea       	ldi	r24, 0xAE	; 174
     a20:	93 e0       	ldi	r25, 0x03	; 3
     a22:	0e 94 77 10 	call	0x20ee	; 0x20ee <nokia_lcd_write_string>
			if((conv3 > 6.85) | (conv3 < 7.35) | (conv3 > 7.45) | (conv3 < 7.95) | (conv3 < 6.85) | (conv3 > 7.8))
     a26:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <conv3>
     a2a:	90 91 ab 03 	lds	r25, 0x03AB	; 0x8003ab <conv3+0x1>
     a2e:	a0 91 ac 03 	lds	r26, 0x03AC	; 0x8003ac <conv3+0x2>
     a32:	b0 91 ad 03 	lds	r27, 0x03AD	; 0x8003ad <conv3+0x3>
     a36:	01 e0       	ldi	r16, 0x01	; 1
     a38:	23 e3       	ldi	r18, 0x33	; 51
     a3a:	33 e3       	ldi	r19, 0x33	; 51
     a3c:	4b ed       	ldi	r20, 0xDB	; 219
     a3e:	50 e4       	ldi	r21, 0x40	; 64
     a40:	bc 01       	movw	r22, r24
     a42:	cd 01       	movw	r24, r26
     a44:	0e 94 9b 12 	call	0x2536	; 0x2536 <__gesf2>
     a48:	18 16       	cp	r1, r24
     a4a:	0c f0       	brlt	.+2      	; 0xa4e <__stack+0x14f>
     a4c:	00 e0       	ldi	r16, 0x00	; 0
     a4e:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <conv3>
     a52:	90 91 ab 03 	lds	r25, 0x03AB	; 0x8003ab <conv3+0x1>
     a56:	a0 91 ac 03 	lds	r26, 0x03AC	; 0x8003ac <conv3+0x2>
     a5a:	b0 91 ad 03 	lds	r27, 0x03AD	; 0x8003ad <conv3+0x3>
     a5e:	11 e0       	ldi	r17, 0x01	; 1
     a60:	23 e3       	ldi	r18, 0x33	; 51
     a62:	33 e3       	ldi	r19, 0x33	; 51
     a64:	4b ee       	ldi	r20, 0xEB	; 235
     a66:	50 e4       	ldi	r21, 0x40	; 64
     a68:	bc 01       	movw	r22, r24
     a6a:	cd 01       	movw	r24, r26
     a6c:	0e 94 3c 11 	call	0x2278	; 0x2278 <__cmpsf2>
     a70:	88 23       	and	r24, r24
     a72:	0c f0       	brlt	.+2      	; 0xa76 <__stack+0x177>
     a74:	10 e0       	ldi	r17, 0x00	; 0
     a76:	80 2f       	mov	r24, r16
     a78:	81 2b       	or	r24, r17
     a7a:	08 2f       	mov	r16, r24
     a7c:	10 e0       	ldi	r17, 0x00	; 0
     a7e:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <conv3>
     a82:	90 91 ab 03 	lds	r25, 0x03AB	; 0x8003ab <conv3+0x1>
     a86:	a0 91 ac 03 	lds	r26, 0x03AC	; 0x8003ac <conv3+0x2>
     a8a:	b0 91 ad 03 	lds	r27, 0x03AD	; 0x8003ad <conv3+0x3>
     a8e:	ff 24       	eor	r15, r15
     a90:	f3 94       	inc	r15
     a92:	26 e6       	ldi	r18, 0x66	; 102
     a94:	36 e6       	ldi	r19, 0x66	; 102
     a96:	4e ee       	ldi	r20, 0xEE	; 238
     a98:	50 e4       	ldi	r21, 0x40	; 64
     a9a:	bc 01       	movw	r22, r24
     a9c:	cd 01       	movw	r24, r26
     a9e:	0e 94 9b 12 	call	0x2536	; 0x2536 <__gesf2>
     aa2:	18 16       	cp	r1, r24
     aa4:	0c f0       	brlt	.+2      	; 0xaa8 <__stack+0x1a9>
     aa6:	f1 2c       	mov	r15, r1
     aa8:	8f 2d       	mov	r24, r15
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	08 2b       	or	r16, r24
     aae:	19 2b       	or	r17, r25
     ab0:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <conv3>
     ab4:	90 91 ab 03 	lds	r25, 0x03AB	; 0x8003ab <conv3+0x1>
     ab8:	a0 91 ac 03 	lds	r26, 0x03AC	; 0x8003ac <conv3+0x2>
     abc:	b0 91 ad 03 	lds	r27, 0x03AD	; 0x8003ad <conv3+0x3>
     ac0:	ff 24       	eor	r15, r15
     ac2:	f3 94       	inc	r15
     ac4:	26 e6       	ldi	r18, 0x66	; 102
     ac6:	36 e6       	ldi	r19, 0x66	; 102
     ac8:	4e ef       	ldi	r20, 0xFE	; 254
     aca:	50 e4       	ldi	r21, 0x40	; 64
     acc:	bc 01       	movw	r22, r24
     ace:	cd 01       	movw	r24, r26
     ad0:	0e 94 3c 11 	call	0x2278	; 0x2278 <__cmpsf2>
     ad4:	88 23       	and	r24, r24
     ad6:	0c f0       	brlt	.+2      	; 0xada <__stack+0x1db>
     ad8:	f1 2c       	mov	r15, r1
     ada:	8f 2d       	mov	r24, r15
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	08 2b       	or	r16, r24
     ae0:	19 2b       	or	r17, r25
     ae2:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <conv3>
     ae6:	90 91 ab 03 	lds	r25, 0x03AB	; 0x8003ab <conv3+0x1>
     aea:	a0 91 ac 03 	lds	r26, 0x03AC	; 0x8003ac <conv3+0x2>
     aee:	b0 91 ad 03 	lds	r27, 0x03AD	; 0x8003ad <conv3+0x3>
     af2:	ff 24       	eor	r15, r15
     af4:	f3 94       	inc	r15
     af6:	23 e3       	ldi	r18, 0x33	; 51
     af8:	33 e3       	ldi	r19, 0x33	; 51
     afa:	4b ed       	ldi	r20, 0xDB	; 219
     afc:	50 e4       	ldi	r21, 0x40	; 64
     afe:	bc 01       	movw	r22, r24
     b00:	cd 01       	movw	r24, r26
     b02:	0e 94 3c 11 	call	0x2278	; 0x2278 <__cmpsf2>
     b06:	88 23       	and	r24, r24
     b08:	0c f0       	brlt	.+2      	; 0xb0c <__stack+0x20d>
     b0a:	f1 2c       	mov	r15, r1
     b0c:	8f 2d       	mov	r24, r15
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	08 2b       	or	r16, r24
     b12:	19 2b       	or	r17, r25
     b14:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <conv3>
     b18:	90 91 ab 03 	lds	r25, 0x03AB	; 0x8003ab <conv3+0x1>
     b1c:	a0 91 ac 03 	lds	r26, 0x03AC	; 0x8003ac <conv3+0x2>
     b20:	b0 91 ad 03 	lds	r27, 0x03AD	; 0x8003ad <conv3+0x3>
     b24:	ff 24       	eor	r15, r15
     b26:	f3 94       	inc	r15
     b28:	2a e9       	ldi	r18, 0x9A	; 154
     b2a:	39 e9       	ldi	r19, 0x99	; 153
     b2c:	49 ef       	ldi	r20, 0xF9	; 249
     b2e:	50 e4       	ldi	r21, 0x40	; 64
     b30:	bc 01       	movw	r22, r24
     b32:	cd 01       	movw	r24, r26
     b34:	0e 94 9b 12 	call	0x2536	; 0x2536 <__gesf2>
     b38:	18 16       	cp	r1, r24
     b3a:	0c f0       	brlt	.+2      	; 0xb3e <__stack+0x23f>
     b3c:	f1 2c       	mov	r15, r1
     b3e:	8f 2d       	mov	r24, r15
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	80 2b       	or	r24, r16
     b44:	91 2b       	or	r25, r17
     b46:	89 2b       	or	r24, r25
     b48:	69 f0       	breq	.+26     	; 0xb64 <__stack+0x265>
			{
				flag=1;
     b4a:	81 e0       	ldi	r24, 0x01	; 1
     b4c:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <flag>
				nokia_lcd_set_cursor(30, 30);
     b50:	6e e1       	ldi	r22, 0x1E	; 30
     b52:	8e e1       	ldi	r24, 0x1E	; 30
     b54:	0e 94 9a 10 	call	0x2134	; 0x2134 <nokia_lcd_set_cursor>
				nokia_lcd_write_string("pH", 1);
     b58:	61 e0       	ldi	r22, 0x01	; 1
     b5a:	86 e3       	ldi	r24, 0x36	; 54
     b5c:	91 e0       	ldi	r25, 0x01	; 1
     b5e:	0e 94 77 10 	call	0x20ee	; 0x20ee <nokia_lcd_write_string>
     b62:	02 c0       	rjmp	.+4      	; 0xb68 <__stack+0x269>
			}
			else 
			{
				flag = 0; 
     b64:	10 92 92 03 	sts	0x0392, r1	; 0x800392 <flag>
			}
			nokia_lcd_render();
     b68:	0e 94 ad 10 	call	0x215a	; 0x215a <nokia_lcd_render>
     b6c:	d5 c0       	rjmp	.+426    	; 0xd18 <__stack+0x419>
		}
		else if(sel == 4)//mostra a freq resp
     b6e:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <__data_end>
     b72:	84 30       	cpi	r24, 0x04	; 4
     b74:	09 f0       	breq	.+2      	; 0xb78 <__stack+0x279>
     b76:	44 c0       	rjmp	.+136    	; 0xc00 <__stack+0x301>
		{
			nokia_lcd_clear();
     b78:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <nokia_lcd_clear>
			nokia_lcd_set_cursor(0,0); 
     b7c:	60 e0       	ldi	r22, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	0e 94 9a 10 	call	0x2134	; 0x2134 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("Parametros", 1);
     b84:	61 e0       	ldi	r22, 0x01	; 1
     b86:	89 e3       	ldi	r24, 0x39	; 57
     b88:	91 e0       	ldi	r25, 0x01	; 1
     b8a:	0e 94 77 10 	call	0x20ee	; 0x20ee <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0,10);
     b8e:	6a e0       	ldi	r22, 0x0A	; 10
     b90:	80 e0       	ldi	r24, 0x00	; 0
     b92:	0e 94 9a 10 	call	0x2134	; 0x2134 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(b, 1);
     b96:	61 e0       	ldi	r22, 0x01	; 1
     b98:	8f e8       	ldi	r24, 0x8F	; 143
     b9a:	93 e0       	ldi	r25, 0x03	; 3
     b9c:	0e 94 77 10 	call	0x20ee	; 0x20ee <nokia_lcd_write_string>
			nokia_lcd_set_cursor(30, 10);
     ba0:	6a e0       	ldi	r22, 0x0A	; 10
     ba2:	8e e1       	ldi	r24, 0x1E	; 30
     ba4:	0e 94 9a 10 	call	0x2134	; 0x2134 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("* resp/min", 1);
     ba8:	61 e0       	ldi	r22, 0x01	; 1
     baa:	84 e4       	ldi	r24, 0x44	; 68
     bac:	91 e0       	ldi	r25, 0x01	; 1
     bae:	0e 94 77 10 	call	0x20ee	; 0x20ee <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0,20);
     bb2:	64 e1       	ldi	r22, 0x14	; 20
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	0e 94 9a 10 	call	0x2134	; 0x2134 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(O21, 1);
     bba:	61 e0       	ldi	r22, 0x01	; 1
     bbc:	8c eb       	ldi	r24, 0xBC	; 188
     bbe:	93 e0       	ldi	r25, 0x03	; 3
     bc0:	0e 94 77 10 	call	0x20ee	; 0x20ee <nokia_lcd_write_string>
			nokia_lcd_set_cursor(30, 20);
     bc4:	64 e1       	ldi	r22, 0x14	; 20
     bc6:	8e e1       	ldi	r24, 0x1E	; 30
     bc8:	0e 94 9a 10 	call	0x2134	; 0x2134 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("%O2", 1);
     bcc:	61 e0       	ldi	r22, 0x01	; 1
     bce:	8f e4       	ldi	r24, 0x4F	; 79
     bd0:	91 e0       	ldi	r25, 0x01	; 1
     bd2:	0e 94 77 10 	call	0x20ee	; 0x20ee <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0,30);
     bd6:	6e e1       	ldi	r22, 0x1E	; 30
     bd8:	80 e0       	ldi	r24, 0x00	; 0
     bda:	0e 94 9a 10 	call	0x2134	; 0x2134 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(Vol, 1);
     bde:	61 e0       	ldi	r22, 0x01	; 1
     be0:	83 ea       	ldi	r24, 0xA3	; 163
     be2:	93 e0       	ldi	r25, 0x03	; 3
     be4:	0e 94 77 10 	call	0x20ee	; 0x20ee <nokia_lcd_write_string>
			nokia_lcd_set_cursor(30, 30);
     be8:	6e e1       	ldi	r22, 0x1E	; 30
     bea:	8e e1       	ldi	r24, 0x1E	; 30
     bec:	0e 94 9a 10 	call	0x2134	; 0x2134 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("Vol", 1);
     bf0:	61 e0       	ldi	r22, 0x01	; 1
     bf2:	83 e5       	ldi	r24, 0x53	; 83
     bf4:	91 e0       	ldi	r25, 0x01	; 1
     bf6:	0e 94 77 10 	call	0x20ee	; 0x20ee <nokia_lcd_write_string>
			nokia_lcd_render(); 
     bfa:	0e 94 ad 10 	call	0x215a	; 0x215a <nokia_lcd_render>
     bfe:	8c c0       	rjmp	.+280    	; 0xd18 <__stack+0x419>
		}
		else if(sel == 6)//mostra a freq resp
     c00:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <__data_end>
     c04:	86 30       	cpi	r24, 0x06	; 6
     c06:	09 f0       	breq	.+2      	; 0xc0a <__stack+0x30b>
     c08:	44 c0       	rjmp	.+136    	; 0xc92 <__stack+0x393>
		{
			nokia_lcd_clear();
     c0a:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <nokia_lcd_clear>
			nokia_lcd_set_cursor(0,0); 
     c0e:	60 e0       	ldi	r22, 0x00	; 0
     c10:	80 e0       	ldi	r24, 0x00	; 0
     c12:	0e 94 9a 10 	call	0x2134	; 0x2134 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("Parametros", 1);
     c16:	61 e0       	ldi	r22, 0x01	; 1
     c18:	89 e3       	ldi	r24, 0x39	; 57
     c1a:	91 e0       	ldi	r25, 0x01	; 1
     c1c:	0e 94 77 10 	call	0x20ee	; 0x20ee <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0,10);
     c20:	6a e0       	ldi	r22, 0x0A	; 10
     c22:	80 e0       	ldi	r24, 0x00	; 0
     c24:	0e 94 9a 10 	call	0x2134	; 0x2134 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(b, 1);
     c28:	61 e0       	ldi	r22, 0x01	; 1
     c2a:	8f e8       	ldi	r24, 0x8F	; 143
     c2c:	93 e0       	ldi	r25, 0x03	; 3
     c2e:	0e 94 77 10 	call	0x20ee	; 0x20ee <nokia_lcd_write_string>
			nokia_lcd_set_cursor(30, 10);
     c32:	6a e0       	ldi	r22, 0x0A	; 10
     c34:	8e e1       	ldi	r24, 0x1E	; 30
     c36:	0e 94 9a 10 	call	0x2134	; 0x2134 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("resp/min", 1);
     c3a:	61 e0       	ldi	r22, 0x01	; 1
     c3c:	87 e5       	ldi	r24, 0x57	; 87
     c3e:	91 e0       	ldi	r25, 0x01	; 1
     c40:	0e 94 77 10 	call	0x20ee	; 0x20ee <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0,20);
     c44:	64 e1       	ldi	r22, 0x14	; 20
     c46:	80 e0       	ldi	r24, 0x00	; 0
     c48:	0e 94 9a 10 	call	0x2134	; 0x2134 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(O21, 1);
     c4c:	61 e0       	ldi	r22, 0x01	; 1
     c4e:	8c eb       	ldi	r24, 0xBC	; 188
     c50:	93 e0       	ldi	r25, 0x03	; 3
     c52:	0e 94 77 10 	call	0x20ee	; 0x20ee <nokia_lcd_write_string>
			nokia_lcd_set_cursor(30, 20);
     c56:	64 e1       	ldi	r22, 0x14	; 20
     c58:	8e e1       	ldi	r24, 0x1E	; 30
     c5a:	0e 94 9a 10 	call	0x2134	; 0x2134 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("* %O2", 1);
     c5e:	61 e0       	ldi	r22, 0x01	; 1
     c60:	80 e6       	ldi	r24, 0x60	; 96
     c62:	91 e0       	ldi	r25, 0x01	; 1
     c64:	0e 94 77 10 	call	0x20ee	; 0x20ee <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0,30);
     c68:	6e e1       	ldi	r22, 0x1E	; 30
     c6a:	80 e0       	ldi	r24, 0x00	; 0
     c6c:	0e 94 9a 10 	call	0x2134	; 0x2134 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(Vol, 1);
     c70:	61 e0       	ldi	r22, 0x01	; 1
     c72:	83 ea       	ldi	r24, 0xA3	; 163
     c74:	93 e0       	ldi	r25, 0x03	; 3
     c76:	0e 94 77 10 	call	0x20ee	; 0x20ee <nokia_lcd_write_string>
			nokia_lcd_set_cursor(30, 30);
     c7a:	6e e1       	ldi	r22, 0x1E	; 30
     c7c:	8e e1       	ldi	r24, 0x1E	; 30
     c7e:	0e 94 9a 10 	call	0x2134	; 0x2134 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("Vol", 1);
     c82:	61 e0       	ldi	r22, 0x01	; 1
     c84:	83 e5       	ldi	r24, 0x53	; 83
     c86:	91 e0       	ldi	r25, 0x01	; 1
     c88:	0e 94 77 10 	call	0x20ee	; 0x20ee <nokia_lcd_write_string>
			nokia_lcd_render(); 
     c8c:	0e 94 ad 10 	call	0x215a	; 0x215a <nokia_lcd_render>
     c90:	43 c0       	rjmp	.+134    	; 0xd18 <__stack+0x419>
		}
		else
		{
			nokia_lcd_clear();
     c92:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <nokia_lcd_clear>
			nokia_lcd_set_cursor(0,0); 
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	80 e0       	ldi	r24, 0x00	; 0
     c9a:	0e 94 9a 10 	call	0x2134	; 0x2134 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("Parametros", 1);
     c9e:	61 e0       	ldi	r22, 0x01	; 1
     ca0:	89 e3       	ldi	r24, 0x39	; 57
     ca2:	91 e0       	ldi	r25, 0x01	; 1
     ca4:	0e 94 77 10 	call	0x20ee	; 0x20ee <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0,10);
     ca8:	6a e0       	ldi	r22, 0x0A	; 10
     caa:	80 e0       	ldi	r24, 0x00	; 0
     cac:	0e 94 9a 10 	call	0x2134	; 0x2134 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(b, 1);
     cb0:	61 e0       	ldi	r22, 0x01	; 1
     cb2:	8f e8       	ldi	r24, 0x8F	; 143
     cb4:	93 e0       	ldi	r25, 0x03	; 3
     cb6:	0e 94 77 10 	call	0x20ee	; 0x20ee <nokia_lcd_write_string>
			nokia_lcd_set_cursor(30, 10);
     cba:	6a e0       	ldi	r22, 0x0A	; 10
     cbc:	8e e1       	ldi	r24, 0x1E	; 30
     cbe:	0e 94 9a 10 	call	0x2134	; 0x2134 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("resp/min", 1);
     cc2:	61 e0       	ldi	r22, 0x01	; 1
     cc4:	87 e5       	ldi	r24, 0x57	; 87
     cc6:	91 e0       	ldi	r25, 0x01	; 1
     cc8:	0e 94 77 10 	call	0x20ee	; 0x20ee <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0,20);
     ccc:	64 e1       	ldi	r22, 0x14	; 20
     cce:	80 e0       	ldi	r24, 0x00	; 0
     cd0:	0e 94 9a 10 	call	0x2134	; 0x2134 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(O21, 1);
     cd4:	61 e0       	ldi	r22, 0x01	; 1
     cd6:	8c eb       	ldi	r24, 0xBC	; 188
     cd8:	93 e0       	ldi	r25, 0x03	; 3
     cda:	0e 94 77 10 	call	0x20ee	; 0x20ee <nokia_lcd_write_string>
			nokia_lcd_set_cursor(30, 20);
     cde:	64 e1       	ldi	r22, 0x14	; 20
     ce0:	8e e1       	ldi	r24, 0x1E	; 30
     ce2:	0e 94 9a 10 	call	0x2134	; 0x2134 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("%O2", 1);
     ce6:	61 e0       	ldi	r22, 0x01	; 1
     ce8:	8f e4       	ldi	r24, 0x4F	; 79
     cea:	91 e0       	ldi	r25, 0x01	; 1
     cec:	0e 94 77 10 	call	0x20ee	; 0x20ee <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0,30);
     cf0:	6e e1       	ldi	r22, 0x1E	; 30
     cf2:	80 e0       	ldi	r24, 0x00	; 0
     cf4:	0e 94 9a 10 	call	0x2134	; 0x2134 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(Vol, 1);
     cf8:	61 e0       	ldi	r22, 0x01	; 1
     cfa:	83 ea       	ldi	r24, 0xA3	; 163
     cfc:	93 e0       	ldi	r25, 0x03	; 3
     cfe:	0e 94 77 10 	call	0x20ee	; 0x20ee <nokia_lcd_write_string>
			nokia_lcd_set_cursor(30, 30);
     d02:	6e e1       	ldi	r22, 0x1E	; 30
     d04:	8e e1       	ldi	r24, 0x1E	; 30
     d06:	0e 94 9a 10 	call	0x2134	; 0x2134 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("* Vol", 1);
     d0a:	61 e0       	ldi	r22, 0x01	; 1
     d0c:	86 e6       	ldi	r24, 0x66	; 102
     d0e:	91 e0       	ldi	r25, 0x01	; 1
     d10:	0e 94 77 10 	call	0x20ee	; 0x20ee <nokia_lcd_write_string>
			nokia_lcd_render(); 
     d14:	0e 94 ad 10 	call	0x215a	; 0x215a <nokia_lcd_render>
		}
	tempo200 = tempo_ms;
     d18:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <tempo_ms>
     d1c:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <tempo_ms+0x1>
     d20:	a0 91 73 01 	lds	r26, 0x0173	; 0x800173 <tempo_ms+0x2>
     d24:	b0 91 74 01 	lds	r27, 0x0174	; 0x800174 <tempo_ms+0x3>
     d28:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <tempo200>
     d2c:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <tempo200+0x1>
     d30:	a0 93 87 01 	sts	0x0187, r26	; 0x800187 <tempo200+0x2>
     d34:	b0 93 88 01 	sts	0x0188, r27	; 0x800188 <tempo200+0x3>
	}	
}
     d38:	00 00       	nop
     d3a:	df 91       	pop	r29
     d3c:	cf 91       	pop	r28
     d3e:	1f 91       	pop	r17
     d40:	0f 91       	pop	r16
     d42:	ff 90       	pop	r15
     d44:	ef 90       	pop	r14
     d46:	08 95       	ret

00000d48 <buzzer>:
void buzzer ()//funcao do buzzer
{
     d48:	0f 93       	push	r16
     d4a:	1f 93       	push	r17
     d4c:	cf 93       	push	r28
     d4e:	df 93       	push	r29
     d50:	cd b7       	in	r28, 0x3d	; 61
     d52:	de b7       	in	r29, 0x3e	; 62
	if ((conv > 41.0) | (conv < 35.0) | (conv2 < 60) | (OCR1A == 2000)| (flag==1))
     d54:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <conv>
     d58:	90 91 96 03 	lds	r25, 0x0396	; 0x800396 <conv+0x1>
     d5c:	a0 91 97 03 	lds	r26, 0x0397	; 0x800397 <conv+0x2>
     d60:	b0 91 98 03 	lds	r27, 0x0398	; 0x800398 <conv+0x3>
     d64:	01 e0       	ldi	r16, 0x01	; 1
     d66:	20 e0       	ldi	r18, 0x00	; 0
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	44 e2       	ldi	r20, 0x24	; 36
     d6c:	52 e4       	ldi	r21, 0x42	; 66
     d6e:	bc 01       	movw	r22, r24
     d70:	cd 01       	movw	r24, r26
     d72:	0e 94 9b 12 	call	0x2536	; 0x2536 <__gesf2>
     d76:	18 16       	cp	r1, r24
     d78:	0c f0       	brlt	.+2      	; 0xd7c <buzzer+0x34>
     d7a:	00 e0       	ldi	r16, 0x00	; 0
     d7c:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <conv>
     d80:	90 91 96 03 	lds	r25, 0x0396	; 0x800396 <conv+0x1>
     d84:	a0 91 97 03 	lds	r26, 0x0397	; 0x800397 <conv+0x2>
     d88:	b0 91 98 03 	lds	r27, 0x0398	; 0x800398 <conv+0x3>
     d8c:	11 e0       	ldi	r17, 0x01	; 1
     d8e:	20 e0       	ldi	r18, 0x00	; 0
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	4c e0       	ldi	r20, 0x0C	; 12
     d94:	52 e4       	ldi	r21, 0x42	; 66
     d96:	bc 01       	movw	r22, r24
     d98:	cd 01       	movw	r24, r26
     d9a:	0e 94 3c 11 	call	0x2278	; 0x2278 <__cmpsf2>
     d9e:	88 23       	and	r24, r24
     da0:	0c f0       	brlt	.+2      	; 0xda4 <buzzer+0x5c>
     da2:	10 e0       	ldi	r17, 0x00	; 0
     da4:	80 2f       	mov	r24, r16
     da6:	81 2b       	or	r24, r17
     da8:	28 2f       	mov	r18, r24
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <conv2>
     db0:	90 91 94 03 	lds	r25, 0x0394	; 0x800394 <conv2+0x1>
     db4:	41 e0       	ldi	r20, 0x01	; 1
     db6:	cc 97       	sbiw	r24, 0x3c	; 60
     db8:	08 f0       	brcs	.+2      	; 0xdbc <buzzer+0x74>
     dba:	40 e0       	ldi	r20, 0x00	; 0
     dbc:	84 2f       	mov	r24, r20
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	28 2b       	or	r18, r24
     dc2:	39 2b       	or	r19, r25
     dc4:	88 e8       	ldi	r24, 0x88	; 136
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	fc 01       	movw	r30, r24
     dca:	80 81       	ld	r24, Z
     dcc:	91 81       	ldd	r25, Z+1	; 0x01
     dce:	41 e0       	ldi	r20, 0x01	; 1
     dd0:	80 3d       	cpi	r24, 0xD0	; 208
     dd2:	97 40       	sbci	r25, 0x07	; 7
     dd4:	09 f0       	breq	.+2      	; 0xdd8 <buzzer+0x90>
     dd6:	40 e0       	ldi	r20, 0x00	; 0
     dd8:	84 2f       	mov	r24, r20
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	28 2b       	or	r18, r24
     dde:	39 2b       	or	r19, r25
     de0:	90 91 92 03 	lds	r25, 0x0392	; 0x800392 <flag>
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	91 30       	cpi	r25, 0x01	; 1
     de8:	09 f0       	breq	.+2      	; 0xdec <buzzer+0xa4>
     dea:	80 e0       	ldi	r24, 0x00	; 0
     dec:	88 2f       	mov	r24, r24
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	82 2b       	or	r24, r18
     df2:	93 2b       	or	r25, r19
     df4:	89 2b       	or	r24, r25
     df6:	31 f0       	breq	.+12     	; 0xe04 <buzzer+0xbc>
	{
		PORTD = 0b11111111;   
     df8:	8b e2       	ldi	r24, 0x2B	; 43
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	2f ef       	ldi	r18, 0xFF	; 255
     dfe:	fc 01       	movw	r30, r24
     e00:	20 83       	st	Z, r18
	else 
	{
		PORTD = 0b01111111; 
	}
	
}
     e02:	05 c0       	rjmp	.+10     	; 0xe0e <buzzer+0xc6>
	{
		PORTD = 0b11111111;   
	}
	else 
	{
		PORTD = 0b01111111; 
     e04:	8b e2       	ldi	r24, 0x2B	; 43
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	2f e7       	ldi	r18, 0x7F	; 127
     e0a:	fc 01       	movw	r30, r24
     e0c:	20 83       	st	Z, r18
	}
	
}
     e0e:	00 00       	nop
     e10:	df 91       	pop	r29
     e12:	cf 91       	pop	r28
     e14:	1f 91       	pop	r17
     e16:	0f 91       	pop	r16
     e18:	08 95       	ret

00000e1a <funcao_led>:
void funcao_led (int *a)
{
     e1a:	cf 92       	push	r12
     e1c:	df 92       	push	r13
     e1e:	ef 92       	push	r14
     e20:	ff 92       	push	r15
     e22:	0f 93       	push	r16
     e24:	1f 93       	push	r17
     e26:	cf 93       	push	r28
     e28:	df 93       	push	r29
     e2a:	00 d0       	rcall	.+0      	; 0xe2c <funcao_led+0x12>
     e2c:	cd b7       	in	r28, 0x3d	; 61
     e2e:	de b7       	in	r29, 0x3e	; 62
     e30:	9a 83       	std	Y+2, r25	; 0x02
     e32:	89 83       	std	Y+1, r24	; 0x01
	int static i=1; 
	double static tempo;
	tempo = timing_google(FreqRespiracao);
     e34:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     e38:	88 2f       	mov	r24, r24
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	0e 94 c3 01 	call	0x386	; 0x386 <timing_google>
     e40:	dc 01       	movw	r26, r24
     e42:	cb 01       	movw	r24, r22
     e44:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <tempo.2030>
     e48:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <tempo.2030+0x1>
     e4c:	a0 93 8d 01 	sts	0x018D, r26	; 0x80018d <tempo.2030+0x2>
     e50:	b0 93 8e 01 	sts	0x018E, r27	; 0x80018e <tempo.2030+0x3>
		if(i==2)
     e54:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <i.2029>
     e58:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <i.2029+0x1>
     e5c:	02 97       	sbiw	r24, 0x02	; 2
     e5e:	b1 f4       	brne	.+44     	; 0xe8c <funcao_led+0x72>
		{
			i=1;
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <i.2029+0x1>
     e68:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <i.2029>
			*a = !(*a); //nega o valor de a pra chegar na proxima interacao do for. 
     e6c:	89 81       	ldd	r24, Y+1	; 0x01
     e6e:	9a 81       	ldd	r25, Y+2	; 0x02
     e70:	fc 01       	movw	r30, r24
     e72:	80 81       	ld	r24, Z
     e74:	91 81       	ldd	r25, Z+1	; 0x01
     e76:	21 e0       	ldi	r18, 0x01	; 1
     e78:	89 2b       	or	r24, r25
     e7a:	09 f0       	breq	.+2      	; 0xe7e <funcao_led+0x64>
     e7c:	20 e0       	ldi	r18, 0x00	; 0
     e7e:	22 2f       	mov	r18, r18
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	89 81       	ldd	r24, Y+1	; 0x01
     e84:	9a 81       	ldd	r25, Y+2	; 0x02
     e86:	fc 01       	movw	r30, r24
     e88:	31 83       	std	Z+1, r19	; 0x01
     e8a:	20 83       	st	Z, r18
		} //chamei a funcao de conversao aqui pq ficaria mais rapido, mas só vai printar a cada 200 ms
		conversao(); 
     e8c:	0e 94 45 02 	call	0x48a	; 0x48a <conversao>
		if ((tempo_ms - tempo2) >= tempo*8) //logica de pseudothread
     e90:	20 91 71 01 	lds	r18, 0x0171	; 0x800171 <tempo_ms>
     e94:	30 91 72 01 	lds	r19, 0x0172	; 0x800172 <tempo_ms+0x1>
     e98:	40 91 73 01 	lds	r20, 0x0173	; 0x800173 <tempo_ms+0x2>
     e9c:	50 91 74 01 	lds	r21, 0x0174	; 0x800174 <tempo_ms+0x3>
     ea0:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <tempo2>
     ea4:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <tempo2+0x1>
     ea8:	a0 91 77 01 	lds	r26, 0x0177	; 0x800177 <tempo2+0x2>
     eac:	b0 91 78 01 	lds	r27, 0x0178	; 0x800178 <tempo2+0x3>
     eb0:	79 01       	movw	r14, r18
     eb2:	8a 01       	movw	r16, r20
     eb4:	e8 1a       	sub	r14, r24
     eb6:	f9 0a       	sbc	r15, r25
     eb8:	0a 0b       	sbc	r16, r26
     eba:	1b 0b       	sbc	r17, r27
     ebc:	d8 01       	movw	r26, r16
     ebe:	c7 01       	movw	r24, r14
     ec0:	bc 01       	movw	r22, r24
     ec2:	cd 01       	movw	r24, r26
     ec4:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <__floatunsisf>
     ec8:	6b 01       	movw	r12, r22
     eca:	7c 01       	movw	r14, r24
     ecc:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <tempo.2030>
     ed0:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <tempo.2030+0x1>
     ed4:	a0 91 8d 01 	lds	r26, 0x018D	; 0x80018d <tempo.2030+0x2>
     ed8:	b0 91 8e 01 	lds	r27, 0x018E	; 0x80018e <tempo.2030+0x3>
     edc:	20 e0       	ldi	r18, 0x00	; 0
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	40 e0       	ldi	r20, 0x00	; 0
     ee2:	51 e4       	ldi	r21, 0x41	; 65
     ee4:	bc 01       	movw	r22, r24
     ee6:	cd 01       	movw	r24, r26
     ee8:	0e 94 a0 12 	call	0x2540	; 0x2540 <__mulsf3>
     eec:	dc 01       	movw	r26, r24
     eee:	cb 01       	movw	r24, r22
     ef0:	9c 01       	movw	r18, r24
     ef2:	ad 01       	movw	r20, r26
     ef4:	c7 01       	movw	r24, r14
     ef6:	b6 01       	movw	r22, r12
     ef8:	0e 94 9b 12 	call	0x2536	; 0x2536 <__gesf2>
     efc:	88 23       	and	r24, r24
     efe:	0c f4       	brge	.+2      	; 0xf02 <funcao_led+0xe8>
			}
			tempo2 = tempo_ms; 
			i++;
			buzzer(); 
		}
}
     f00:	61 c0       	rjmp	.+194    	; 0xfc4 <funcao_led+0x1aa>
		} //chamei a funcao de conversao aqui pq ficaria mais rapido, mas só vai printar a cada 200 ms
		conversao(); 
		if ((tempo_ms - tempo2) >= tempo*8) //logica de pseudothread
		{
	
			if (*a)
     f02:	89 81       	ldd	r24, Y+1	; 0x01
     f04:	9a 81       	ldd	r25, Y+2	; 0x02
     f06:	fc 01       	movw	r30, r24
     f08:	80 81       	ld	r24, Z
     f0a:	91 81       	ldd	r25, Z+1	; 0x01
     f0c:	89 2b       	or	r24, r25
     f0e:	e9 f0       	breq	.+58     	; 0xf4a <funcao_led+0x130>
			{
				OCR1A = 250*i*VolAr + 2000; // equacao da reta dos pontos
     f10:	88 e8       	ldi	r24, 0x88	; 136
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <i.2029>
     f18:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <i.2029+0x1>
     f1c:	4a ef       	ldi	r20, 0xFA	; 250
     f1e:	42 9f       	mul	r20, r18
     f20:	b0 01       	movw	r22, r0
     f22:	43 9f       	mul	r20, r19
     f24:	70 0d       	add	r23, r0
     f26:	11 24       	eor	r1, r1
     f28:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <VolAr>
     f2c:	42 2f       	mov	r20, r18
     f2e:	50 e0       	ldi	r21, 0x00	; 0
     f30:	64 9f       	mul	r22, r20
     f32:	90 01       	movw	r18, r0
     f34:	65 9f       	mul	r22, r21
     f36:	30 0d       	add	r19, r0
     f38:	74 9f       	mul	r23, r20
     f3a:	30 0d       	add	r19, r0
     f3c:	11 24       	eor	r1, r1
     f3e:	20 53       	subi	r18, 0x30	; 48
     f40:	38 4f       	sbci	r19, 0xF8	; 248
     f42:	fc 01       	movw	r30, r24
     f44:	31 83       	std	Z+1, r19	; 0x01
     f46:	20 83       	st	Z, r18
     f48:	22 c0       	rjmp	.+68     	; 0xf8e <funcao_led+0x174>
			}
			else
			{
				OCR1A -= 250*i*VolAr; 
     f4a:	88 e8       	ldi	r24, 0x88	; 136
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	28 e8       	ldi	r18, 0x88	; 136
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	f9 01       	movw	r30, r18
     f54:	20 81       	ld	r18, Z
     f56:	31 81       	ldd	r19, Z+1	; 0x01
     f58:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <i.2029>
     f5c:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <i.2029+0x1>
     f60:	ea ef       	ldi	r30, 0xFA	; 250
     f62:	e4 9f       	mul	r30, r20
     f64:	b0 01       	movw	r22, r0
     f66:	e5 9f       	mul	r30, r21
     f68:	70 0d       	add	r23, r0
     f6a:	11 24       	eor	r1, r1
     f6c:	40 91 01 01 	lds	r20, 0x0101	; 0x800101 <VolAr>
     f70:	44 2f       	mov	r20, r20
     f72:	50 e0       	ldi	r21, 0x00	; 0
     f74:	64 9f       	mul	r22, r20
     f76:	f0 01       	movw	r30, r0
     f78:	65 9f       	mul	r22, r21
     f7a:	f0 0d       	add	r31, r0
     f7c:	74 9f       	mul	r23, r20
     f7e:	f0 0d       	add	r31, r0
     f80:	11 24       	eor	r1, r1
     f82:	af 01       	movw	r20, r30
     f84:	24 1b       	sub	r18, r20
     f86:	35 0b       	sbc	r19, r21
     f88:	fc 01       	movw	r30, r24
     f8a:	31 83       	std	Z+1, r19	; 0x01
     f8c:	20 83       	st	Z, r18
			}
			tempo2 = tempo_ms; 
     f8e:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <tempo_ms>
     f92:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <tempo_ms+0x1>
     f96:	a0 91 73 01 	lds	r26, 0x0173	; 0x800173 <tempo_ms+0x2>
     f9a:	b0 91 74 01 	lds	r27, 0x0174	; 0x800174 <tempo_ms+0x3>
     f9e:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <tempo2>
     fa2:	90 93 76 01 	sts	0x0176, r25	; 0x800176 <tempo2+0x1>
     fa6:	a0 93 77 01 	sts	0x0177, r26	; 0x800177 <tempo2+0x2>
     faa:	b0 93 78 01 	sts	0x0178, r27	; 0x800178 <tempo2+0x3>
			i++;
     fae:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <i.2029>
     fb2:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <i.2029+0x1>
     fb6:	01 96       	adiw	r24, 0x01	; 1
     fb8:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <i.2029+0x1>
     fbc:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <i.2029>
			buzzer(); 
     fc0:	0e 94 a4 06 	call	0xd48	; 0xd48 <buzzer>
		}
}
     fc4:	00 00       	nop
     fc6:	0f 90       	pop	r0
     fc8:	0f 90       	pop	r0
     fca:	df 91       	pop	r29
     fcc:	cf 91       	pop	r28
     fce:	1f 91       	pop	r17
     fd0:	0f 91       	pop	r16
     fd2:	ff 90       	pop	r15
     fd4:	ef 90       	pop	r14
     fd6:	df 90       	pop	r13
     fd8:	cf 90       	pop	r12
     fda:	08 95       	ret

00000fdc <__vector_14>:
//Funções de interrupção para os botoes INT0, INT1 e timer 
ISR(TIMER0_COMPA_vect)
{
     fdc:	1f 92       	push	r1
     fde:	0f 92       	push	r0
     fe0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     fe4:	0f 92       	push	r0
     fe6:	11 24       	eor	r1, r1
     fe8:	8f 93       	push	r24
     fea:	9f 93       	push	r25
     fec:	af 93       	push	r26
     fee:	bf 93       	push	r27
     ff0:	cf 93       	push	r28
     ff2:	df 93       	push	r29
     ff4:	cd b7       	in	r28, 0x3d	; 61
     ff6:	de b7       	in	r29, 0x3e	; 62
	tempo_ms += 1; 
     ff8:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <tempo_ms>
     ffc:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <tempo_ms+0x1>
    1000:	a0 91 73 01 	lds	r26, 0x0173	; 0x800173 <tempo_ms+0x2>
    1004:	b0 91 74 01 	lds	r27, 0x0174	; 0x800174 <tempo_ms+0x3>
    1008:	01 96       	adiw	r24, 0x01	; 1
    100a:	a1 1d       	adc	r26, r1
    100c:	b1 1d       	adc	r27, r1
    100e:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <tempo_ms>
    1012:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <tempo_ms+0x1>
    1016:	a0 93 73 01 	sts	0x0173, r26	; 0x800173 <tempo_ms+0x2>
    101a:	b0 93 74 01 	sts	0x0174, r27	; 0x800174 <tempo_ms+0x3>
}
    101e:	00 00       	nop
    1020:	df 91       	pop	r29
    1022:	cf 91       	pop	r28
    1024:	bf 91       	pop	r27
    1026:	af 91       	pop	r26
    1028:	9f 91       	pop	r25
    102a:	8f 91       	pop	r24
    102c:	0f 90       	pop	r0
    102e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    1032:	0f 90       	pop	r0
    1034:	1f 90       	pop	r1
    1036:	18 95       	reti

00001038 <func_servo>:

void func_servo()//essa funcao abaixo contra o movimento do servo de O2
{
    1038:	cf 93       	push	r28
    103a:	df 93       	push	r29
    103c:	cd b7       	in	r28, 0x3d	; 61
    103e:	de b7       	in	r29, 0x3e	; 62
	OCR1B = 200*O2 +2000;
    1040:	8a e8       	ldi	r24, 0x8A	; 138
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	20 91 6e 01 	lds	r18, 0x016E	; 0x80016e <O2>
    1048:	42 2f       	mov	r20, r18
    104a:	50 e0       	ldi	r21, 0x00	; 0
    104c:	68 ec       	ldi	r22, 0xC8	; 200
    104e:	64 9f       	mul	r22, r20
    1050:	90 01       	movw	r18, r0
    1052:	65 9f       	mul	r22, r21
    1054:	30 0d       	add	r19, r0
    1056:	11 24       	eor	r1, r1
    1058:	20 53       	subi	r18, 0x30	; 48
    105a:	38 4f       	sbci	r19, 0xF8	; 248
    105c:	fc 01       	movw	r30, r24
    105e:	31 83       	std	Z+1, r19	; 0x01
    1060:	20 83       	st	Z, r18
}
    1062:	00 00       	nop
    1064:	df 91       	pop	r29
    1066:	cf 91       	pop	r28
    1068:	08 95       	ret

0000106a <__vector_5>:
ISR(PCINT2_vect) 
{
    106a:	1f 92       	push	r1
    106c:	0f 92       	push	r0
    106e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    1072:	0f 92       	push	r0
    1074:	11 24       	eor	r1, r1
    1076:	ef 92       	push	r14
    1078:	ff 92       	push	r15
    107a:	0f 93       	push	r16
    107c:	1f 93       	push	r17
    107e:	2f 93       	push	r18
    1080:	3f 93       	push	r19
    1082:	4f 93       	push	r20
    1084:	5f 93       	push	r21
    1086:	6f 93       	push	r22
    1088:	7f 93       	push	r23
    108a:	8f 93       	push	r24
    108c:	9f 93       	push	r25
    108e:	af 93       	push	r26
    1090:	bf 93       	push	r27
    1092:	ef 93       	push	r30
    1094:	ff 93       	push	r31
    1096:	cf 93       	push	r28
    1098:	df 93       	push	r29
    109a:	cd b7       	in	r28, 0x3d	; 61
    109c:	de b7       	in	r29, 0x3e	; 62
	if (l == 0)
    109e:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <l>
    10a2:	88 23       	and	r24, r24
    10a4:	b1 f4       	brne	.+44     	; 0x10d2 <__vector_5+0x68>
	{
		tempobpm1 = tempo_ms; 
    10a6:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <tempo_ms>
    10aa:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <tempo_ms+0x1>
    10ae:	a0 91 73 01 	lds	r26, 0x0173	; 0x800173 <tempo_ms+0x2>
    10b2:	b0 91 74 01 	lds	r27, 0x0174	; 0x800174 <tempo_ms+0x3>
    10b6:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <tempobpm1>
    10ba:	90 93 7a 01 	sts	0x017A, r25	; 0x80017a <tempobpm1+0x1>
    10be:	a0 93 7b 01 	sts	0x017B, r26	; 0x80017b <tempobpm1+0x2>
    10c2:	b0 93 7c 01 	sts	0x017C, r27	; 0x80017c <tempobpm1+0x3>
		l++;
    10c6:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <l>
    10ca:	8f 5f       	subi	r24, 0xFF	; 255
    10cc:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <l>
	{
		tempobpm2 = tempo_ms; 
		l = 0;
		bpm = 30000./((tempobpm2-tempobpm1));
	}
}
    10d0:	47 c0       	rjmp	.+142    	; 0x1160 <__vector_5+0xf6>
	if (l == 0)
	{
		tempobpm1 = tempo_ms; 
		l++;
	}
	else if (l == 1)
    10d2:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <l>
    10d6:	81 30       	cpi	r24, 0x01	; 1
    10d8:	09 f0       	breq	.+2      	; 0x10dc <__vector_5+0x72>
    10da:	42 c0       	rjmp	.+132    	; 0x1160 <__vector_5+0xf6>
	{
		tempobpm2 = tempo_ms; 
    10dc:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <tempo_ms>
    10e0:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <tempo_ms+0x1>
    10e4:	a0 91 73 01 	lds	r26, 0x0173	; 0x800173 <tempo_ms+0x2>
    10e8:	b0 91 74 01 	lds	r27, 0x0174	; 0x800174 <tempo_ms+0x3>
    10ec:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <tempobpm2>
    10f0:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <tempobpm2+0x1>
    10f4:	a0 93 7f 01 	sts	0x017F, r26	; 0x80017f <tempobpm2+0x2>
    10f8:	b0 93 80 01 	sts	0x0180, r27	; 0x800180 <tempobpm2+0x3>
		l = 0;
    10fc:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <l>
		bpm = 30000./((tempobpm2-tempobpm1));
    1100:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <tempobpm2>
    1104:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <tempobpm2+0x1>
    1108:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <tempobpm2+0x2>
    110c:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <tempobpm2+0x3>
    1110:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <tempobpm1>
    1114:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <tempobpm1+0x1>
    1118:	a0 91 7b 01 	lds	r26, 0x017B	; 0x80017b <tempobpm1+0x2>
    111c:	b0 91 7c 01 	lds	r27, 0x017C	; 0x80017c <tempobpm1+0x3>
    1120:	79 01       	movw	r14, r18
    1122:	8a 01       	movw	r16, r20
    1124:	e8 1a       	sub	r14, r24
    1126:	f9 0a       	sbc	r15, r25
    1128:	0a 0b       	sbc	r16, r26
    112a:	1b 0b       	sbc	r17, r27
    112c:	d8 01       	movw	r26, r16
    112e:	c7 01       	movw	r24, r14
    1130:	bc 01       	movw	r22, r24
    1132:	cd 01       	movw	r24, r26
    1134:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <__floatunsisf>
    1138:	dc 01       	movw	r26, r24
    113a:	cb 01       	movw	r24, r22
    113c:	9c 01       	movw	r18, r24
    113e:	ad 01       	movw	r20, r26
    1140:	60 e0       	ldi	r22, 0x00	; 0
    1142:	70 e6       	ldi	r23, 0x60	; 96
    1144:	8a ee       	ldi	r24, 0xEA	; 234
    1146:	96 e4       	ldi	r25, 0x46	; 70
    1148:	0e 94 41 11 	call	0x2282	; 0x2282 <__divsf3>
    114c:	dc 01       	movw	r26, r24
    114e:	cb 01       	movw	r24, r22
    1150:	bc 01       	movw	r22, r24
    1152:	cd 01       	movw	r24, r26
    1154:	0e 94 ba 11 	call	0x2374	; 0x2374 <__fixunssfsi>
    1158:	dc 01       	movw	r26, r24
    115a:	cb 01       	movw	r24, r22
    115c:	80 93 bb 03 	sts	0x03BB, r24	; 0x8003bb <bpm>
	}
}
    1160:	00 00       	nop
    1162:	df 91       	pop	r29
    1164:	cf 91       	pop	r28
    1166:	ff 91       	pop	r31
    1168:	ef 91       	pop	r30
    116a:	bf 91       	pop	r27
    116c:	af 91       	pop	r26
    116e:	9f 91       	pop	r25
    1170:	8f 91       	pop	r24
    1172:	7f 91       	pop	r23
    1174:	6f 91       	pop	r22
    1176:	5f 91       	pop	r21
    1178:	4f 91       	pop	r20
    117a:	3f 91       	pop	r19
    117c:	2f 91       	pop	r18
    117e:	1f 91       	pop	r17
    1180:	0f 91       	pop	r16
    1182:	ff 90       	pop	r15
    1184:	ef 90       	pop	r14
    1186:	0f 90       	pop	r0
    1188:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    118c:	0f 90       	pop	r0
    118e:	1f 90       	pop	r1
    1190:	18 95       	reti

00001192 <__vector_1>:
//faço mais conversoes aqui tbm pq o valor de Freq é atualizado aqui tbm
ISR(INT0_vect)
{
    1192:	1f 92       	push	r1
    1194:	0f 92       	push	r0
    1196:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    119a:	0f 92       	push	r0
    119c:	11 24       	eor	r1, r1
    119e:	ef 92       	push	r14
    11a0:	ff 92       	push	r15
    11a2:	0f 93       	push	r16
    11a4:	1f 93       	push	r17
    11a6:	2f 93       	push	r18
    11a8:	3f 93       	push	r19
    11aa:	4f 93       	push	r20
    11ac:	5f 93       	push	r21
    11ae:	6f 93       	push	r22
    11b0:	7f 93       	push	r23
    11b2:	8f 93       	push	r24
    11b4:	9f 93       	push	r25
    11b6:	af 93       	push	r26
    11b8:	bf 93       	push	r27
    11ba:	ef 93       	push	r30
    11bc:	ff 93       	push	r31
    11be:	cf 93       	push	r28
    11c0:	df 93       	push	r29
    11c2:	cd b7       	in	r28, 0x3d	; 61
    11c4:	de b7       	in	r29, 0x3e	; 62
	if((sel == 2) | (sel == 4))
    11c6:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <__data_end>
    11ca:	91 e0       	ldi	r25, 0x01	; 1
    11cc:	82 30       	cpi	r24, 0x02	; 2
    11ce:	09 f0       	breq	.+2      	; 0x11d2 <__vector_1+0x40>
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	20 91 6c 01 	lds	r18, 0x016C	; 0x80016c <__data_end>
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	24 30       	cpi	r18, 0x04	; 4
    11da:	09 f0       	breq	.+2      	; 0x11de <__vector_1+0x4c>
    11dc:	80 e0       	ldi	r24, 0x00	; 0
    11de:	89 2b       	or	r24, r25
    11e0:	88 23       	and	r24, r24
    11e2:	51 f0       	breq	.+20     	; 0x11f8 <__vector_1+0x66>
	{
	FreqRespiracao +=1; 
    11e4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    11e8:	8f 5f       	subi	r24, 0xFF	; 255
    11ea:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	limita(&FreqRespiracao);
    11ee:	80 e0       	ldi	r24, 0x00	; 0
    11f0:	91 e0       	ldi	r25, 0x01	; 1
    11f2:	0e 94 94 01 	call	0x328	; 0x328 <limita>
	{
		VolAr += 1;
		if(VolAr>8)
			VolAr = 8;
	}
}
    11f6:	9f c0       	rjmp	.+318    	; 0x1336 <__vector_1+0x1a4>
	if((sel == 2) | (sel == 4))
	{
	FreqRespiracao +=1; 
	limita(&FreqRespiracao);
	}
	else if(sel == 6)
    11f8:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <__data_end>
    11fc:	86 30       	cpi	r24, 0x06	; 6
    11fe:	09 f0       	breq	.+2      	; 0x1202 <__vector_1+0x70>
    1200:	8a c0       	rjmp	.+276    	; 0x1316 <__vector_1+0x184>
	{ 
		if(((conv2 < 85) | (conv3 < 7.35)) && (sel2 >= 2)) //momento em que a respiracao do paciente começa a ser prejudicada
    1202:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <conv2>
    1206:	90 91 94 03 	lds	r25, 0x0394	; 0x800394 <conv2+0x1>
    120a:	01 e0       	ldi	r16, 0x01	; 1
    120c:	85 35       	cpi	r24, 0x55	; 85
    120e:	91 05       	cpc	r25, r1
    1210:	08 f0       	brcs	.+2      	; 0x1214 <__vector_1+0x82>
    1212:	00 e0       	ldi	r16, 0x00	; 0
    1214:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <conv3>
    1218:	90 91 ab 03 	lds	r25, 0x03AB	; 0x8003ab <conv3+0x1>
    121c:	a0 91 ac 03 	lds	r26, 0x03AC	; 0x8003ac <conv3+0x2>
    1220:	b0 91 ad 03 	lds	r27, 0x03AD	; 0x8003ad <conv3+0x3>
    1224:	11 e0       	ldi	r17, 0x01	; 1
    1226:	23 e3       	ldi	r18, 0x33	; 51
    1228:	33 e3       	ldi	r19, 0x33	; 51
    122a:	4b ee       	ldi	r20, 0xEB	; 235
    122c:	50 e4       	ldi	r21, 0x40	; 64
    122e:	bc 01       	movw	r22, r24
    1230:	cd 01       	movw	r24, r26
    1232:	0e 94 3c 11 	call	0x2278	; 0x2278 <__cmpsf2>
    1236:	88 23       	and	r24, r24
    1238:	0c f0       	brlt	.+2      	; 0x123c <__vector_1+0xaa>
    123a:	10 e0       	ldi	r17, 0x00	; 0
    123c:	80 2f       	mov	r24, r16
    123e:	81 2b       	or	r24, r17
    1240:	88 23       	and	r24, r24
    1242:	09 f4       	brne	.+2      	; 0x1246 <__vector_1+0xb4>
    1244:	5c c0       	rjmp	.+184    	; 0x12fe <__vector_1+0x16c>
    1246:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <sel2>
    124a:	82 30       	cpi	r24, 0x02	; 2
    124c:	08 f4       	brcc	.+2      	; 0x1250 <__vector_1+0xbe>
    124e:	57 c0       	rjmp	.+174    	; 0x12fe <__vector_1+0x16c>
		{
			if((tempo_ms - tempo_sat) > tempo_sat*1000)
    1250:	20 91 71 01 	lds	r18, 0x0171	; 0x800171 <tempo_ms>
    1254:	30 91 72 01 	lds	r19, 0x0172	; 0x800172 <tempo_ms+0x1>
    1258:	40 91 73 01 	lds	r20, 0x0173	; 0x800173 <tempo_ms+0x2>
    125c:	50 91 74 01 	lds	r21, 0x0174	; 0x800174 <tempo_ms+0x3>
    1260:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tempo_sat>
    1264:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <tempo_sat+0x1>
    1268:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <tempo_sat+0x2>
    126c:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <tempo_sat+0x3>
    1270:	79 01       	movw	r14, r18
    1272:	8a 01       	movw	r16, r20
    1274:	e8 1a       	sub	r14, r24
    1276:	f9 0a       	sbc	r15, r25
    1278:	0a 0b       	sbc	r16, r26
    127a:	1b 0b       	sbc	r17, r27
    127c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <tempo_sat>
    1280:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <tempo_sat+0x1>
    1284:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <tempo_sat+0x2>
    1288:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <tempo_sat+0x3>
    128c:	88 ee       	ldi	r24, 0xE8	; 232
    128e:	93 e0       	ldi	r25, 0x03	; 3
    1290:	dc 01       	movw	r26, r24
    1292:	0e 94 3c 13 	call	0x2678	; 0x2678 <__muluhisi3>
    1296:	dc 01       	movw	r26, r24
    1298:	cb 01       	movw	r24, r22
    129a:	8e 15       	cp	r24, r14
    129c:	9f 05       	cpc	r25, r15
    129e:	a0 07       	cpc	r26, r16
    12a0:	b1 07       	cpc	r27, r17
    12a2:	30 f4       	brcc	.+12     	; 0x12b0 <__vector_1+0x11e>
				O2 += 1; //aumenta a quantidade de oxigenio que o paciente recebe
    12a4:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <O2>
    12a8:	8f 5f       	subi	r24, 0xFF	; 255
    12aa:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <O2>
    12ae:	04 c0       	rjmp	.+8      	; 0x12b8 <__vector_1+0x126>
			else
			{
				O2+=0;
    12b0:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <O2>
    12b4:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <O2>
			}
			
			if(tempo_sat > 7200000) //se tempo_sat for maior de 2hs, uma flag será ativada, pois não houve melhora no quadro do paciente e algo deve ser visto pela equpe médica
    12b8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tempo_sat>
    12bc:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <tempo_sat+0x1>
    12c0:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <tempo_sat+0x2>
    12c4:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <tempo_sat+0x3>
    12c8:	81 30       	cpi	r24, 0x01	; 1
    12ca:	9d 4d       	sbci	r25, 0xDD	; 221
    12cc:	ad 46       	sbci	r26, 0x6D	; 109
    12ce:	b1 05       	cpc	r27, r1
    12d0:	20 f0       	brcs	.+8      	; 0x12da <__vector_1+0x148>
				flag_sat = 1;
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	80 93 c2 03 	sts	0x03C2, r24	; 0x8003c2 <flag_sat>
    12d8:	02 c0       	rjmp	.+4      	; 0x12de <__vector_1+0x14c>
			else
			{
				flag_sat = 0; 
    12da:	10 92 c2 03 	sts	0x03C2, r1	; 0x8003c2 <flag_sat>
			}
			tempo_sat = tempo_ms;
    12de:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <tempo_ms>
    12e2:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <tempo_ms+0x1>
    12e6:	a0 91 73 01 	lds	r26, 0x0173	; 0x800173 <tempo_ms+0x2>
    12ea:	b0 91 74 01 	lds	r27, 0x0174	; 0x800174 <tempo_ms+0x3>
    12ee:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <tempo_sat>
    12f2:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <tempo_sat+0x1>
    12f6:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <tempo_sat+0x2>
    12fa:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <tempo_sat+0x3>
		}	
		O2+= 1;
    12fe:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <O2>
    1302:	8f 5f       	subi	r24, 0xFF	; 255
    1304:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <O2>
		limitaO2(&O2);
    1308:	8e e6       	ldi	r24, 0x6E	; 110
    130a:	91 e0       	ldi	r25, 0x01	; 1
    130c:	0e 94 ab 01 	call	0x356	; 0x356 <limitaO2>
		func_servo();
    1310:	0e 94 1c 08 	call	0x1038	; 0x1038 <func_servo>
	{
		VolAr += 1;
		if(VolAr>8)
			VolAr = 8;
	}
}
    1314:	10 c0       	rjmp	.+32     	; 0x1336 <__vector_1+0x1a4>
		O2+= 1;
		limitaO2(&O2);
		func_servo();
		//chama funcao do servo do O2
	}
	else if(sel == 8)
    1316:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <__data_end>
    131a:	88 30       	cpi	r24, 0x08	; 8
    131c:	61 f4       	brne	.+24     	; 0x1336 <__vector_1+0x1a4>
	{
		VolAr += 1;
    131e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <VolAr>
    1322:	8f 5f       	subi	r24, 0xFF	; 255
    1324:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <VolAr>
		if(VolAr>8)
    1328:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <VolAr>
    132c:	89 30       	cpi	r24, 0x09	; 9
    132e:	18 f0       	brcs	.+6      	; 0x1336 <__vector_1+0x1a4>
			VolAr = 8;
    1330:	88 e0       	ldi	r24, 0x08	; 8
    1332:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <VolAr>
	}
}
    1336:	00 00       	nop
    1338:	df 91       	pop	r29
    133a:	cf 91       	pop	r28
    133c:	ff 91       	pop	r31
    133e:	ef 91       	pop	r30
    1340:	bf 91       	pop	r27
    1342:	af 91       	pop	r26
    1344:	9f 91       	pop	r25
    1346:	8f 91       	pop	r24
    1348:	7f 91       	pop	r23
    134a:	6f 91       	pop	r22
    134c:	5f 91       	pop	r21
    134e:	4f 91       	pop	r20
    1350:	3f 91       	pop	r19
    1352:	2f 91       	pop	r18
    1354:	1f 91       	pop	r17
    1356:	0f 91       	pop	r16
    1358:	ff 90       	pop	r15
    135a:	ef 90       	pop	r14
    135c:	0f 90       	pop	r0
    135e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    1362:	0f 90       	pop	r0
    1364:	1f 90       	pop	r1
    1366:	18 95       	reti

00001368 <__vector_2>:
ISR(INT1_vect)
{
    1368:	1f 92       	push	r1
    136a:	0f 92       	push	r0
    136c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    1370:	0f 92       	push	r0
    1372:	11 24       	eor	r1, r1
    1374:	2f 93       	push	r18
    1376:	3f 93       	push	r19
    1378:	4f 93       	push	r20
    137a:	5f 93       	push	r21
    137c:	6f 93       	push	r22
    137e:	7f 93       	push	r23
    1380:	8f 93       	push	r24
    1382:	9f 93       	push	r25
    1384:	af 93       	push	r26
    1386:	bf 93       	push	r27
    1388:	ef 93       	push	r30
    138a:	ff 93       	push	r31
    138c:	cf 93       	push	r28
    138e:	df 93       	push	r29
    1390:	cd b7       	in	r28, 0x3d	; 61
    1392:	de b7       	in	r29, 0x3e	; 62
	
	if(sel == 2 || sel == 4)
    1394:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <__data_end>
    1398:	82 30       	cpi	r24, 0x02	; 2
    139a:	21 f0       	breq	.+8      	; 0x13a4 <__vector_2+0x3c>
    139c:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <__data_end>
    13a0:	84 30       	cpi	r24, 0x04	; 4
    13a2:	51 f4       	brne	.+20     	; 0x13b8 <__vector_2+0x50>
	{
	FreqRespiracao -= 1; 
    13a4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    13a8:	81 50       	subi	r24, 0x01	; 1
    13aa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	limita(&FreqRespiracao);
    13ae:	80 e0       	ldi	r24, 0x00	; 0
    13b0:	91 e0       	ldi	r25, 0x01	; 1
    13b2:	0e 94 94 01 	call	0x328	; 0x328 <limita>
	{
		VolAr -= 1;
		if(VolAr<1)
			VolAr = 1;
	}
}
    13b6:	24 c0       	rjmp	.+72     	; 0x1400 <__vector_2+0x98>
	if(sel == 2 || sel == 4)
	{
	FreqRespiracao -= 1; 
	limita(&FreqRespiracao);
	}
	else if(sel == 6)
    13b8:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <__data_end>
    13bc:	86 30       	cpi	r24, 0x06	; 6
    13be:	81 f4       	brne	.+32     	; 0x13e0 <__vector_2+0x78>
	{
		if(O2>0)
    13c0:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <O2>
    13c4:	88 23       	and	r24, r24
    13c6:	29 f0       	breq	.+10     	; 0x13d2 <__vector_2+0x6a>
		O2-= 1;
    13c8:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <O2>
    13cc:	81 50       	subi	r24, 0x01	; 1
    13ce:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <O2>
		limitaO2(&O2);
    13d2:	8e e6       	ldi	r24, 0x6E	; 110
    13d4:	91 e0       	ldi	r25, 0x01	; 1
    13d6:	0e 94 ab 01 	call	0x356	; 0x356 <limitaO2>
		func_servo();
    13da:	0e 94 1c 08 	call	0x1038	; 0x1038 <func_servo>
	{
		VolAr -= 1;
		if(VolAr<1)
			VolAr = 1;
	}
}
    13de:	10 c0       	rjmp	.+32     	; 0x1400 <__vector_2+0x98>
		O2-= 1;
		limitaO2(&O2);
		func_servo();
		//chama funcao do servo O2 
	}
	else if(sel == 8)
    13e0:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <__data_end>
    13e4:	88 30       	cpi	r24, 0x08	; 8
    13e6:	61 f4       	brne	.+24     	; 0x1400 <__vector_2+0x98>
	{
		VolAr -= 1;
    13e8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <VolAr>
    13ec:	81 50       	subi	r24, 0x01	; 1
    13ee:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <VolAr>
		if(VolAr<1)
    13f2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <VolAr>
    13f6:	88 23       	and	r24, r24
    13f8:	19 f4       	brne	.+6      	; 0x1400 <__vector_2+0x98>
			VolAr = 1;
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <VolAr>
	}
}
    1400:	00 00       	nop
    1402:	df 91       	pop	r29
    1404:	cf 91       	pop	r28
    1406:	ff 91       	pop	r31
    1408:	ef 91       	pop	r30
    140a:	bf 91       	pop	r27
    140c:	af 91       	pop	r26
    140e:	9f 91       	pop	r25
    1410:	8f 91       	pop	r24
    1412:	7f 91       	pop	r23
    1414:	6f 91       	pop	r22
    1416:	5f 91       	pop	r21
    1418:	4f 91       	pop	r20
    141a:	3f 91       	pop	r19
    141c:	2f 91       	pop	r18
    141e:	0f 90       	pop	r0
    1420:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    1424:	0f 90       	pop	r0
    1426:	1f 90       	pop	r1
    1428:	18 95       	reti

0000142a <__vector_21>:
ISR(ADC_vect)
{
    142a:	1f 92       	push	r1
    142c:	0f 92       	push	r0
    142e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    1432:	0f 92       	push	r0
    1434:	11 24       	eor	r1, r1
    1436:	ef 92       	push	r14
    1438:	ff 92       	push	r15
    143a:	0f 93       	push	r16
    143c:	1f 93       	push	r17
    143e:	2f 93       	push	r18
    1440:	3f 93       	push	r19
    1442:	4f 93       	push	r20
    1444:	5f 93       	push	r21
    1446:	6f 93       	push	r22
    1448:	7f 93       	push	r23
    144a:	8f 93       	push	r24
    144c:	9f 93       	push	r25
    144e:	af 93       	push	r26
    1450:	bf 93       	push	r27
    1452:	ef 93       	push	r30
    1454:	ff 93       	push	r31
    1456:	cf 93       	push	r28
    1458:	df 93       	push	r29
    145a:	cd b7       	in	r28, 0x3d	; 61
    145c:	de b7       	in	r29, 0x3e	; 62
	if ((tempo_ms-tempo150)>=150)
    145e:	20 91 71 01 	lds	r18, 0x0171	; 0x800171 <tempo_ms>
    1462:	30 91 72 01 	lds	r19, 0x0172	; 0x800172 <tempo_ms+0x1>
    1466:	40 91 73 01 	lds	r20, 0x0173	; 0x800173 <tempo_ms+0x2>
    146a:	50 91 74 01 	lds	r21, 0x0174	; 0x800174 <tempo_ms+0x3>
    146e:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <tempo150>
    1472:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <tempo150+0x1>
    1476:	a0 91 83 01 	lds	r26, 0x0183	; 0x800183 <tempo150+0x2>
    147a:	b0 91 84 01 	lds	r27, 0x0184	; 0x800184 <tempo150+0x3>
    147e:	79 01       	movw	r14, r18
    1480:	8a 01       	movw	r16, r20
    1482:	e8 1a       	sub	r14, r24
    1484:	f9 0a       	sbc	r15, r25
    1486:	0a 0b       	sbc	r16, r26
    1488:	1b 0b       	sbc	r17, r27
    148a:	d8 01       	movw	r26, r16
    148c:	c7 01       	movw	r24, r14
    148e:	86 39       	cpi	r24, 0x96	; 150
    1490:	91 05       	cpc	r25, r1
    1492:	a1 05       	cpc	r26, r1
    1494:	b1 05       	cpc	r27, r1
    1496:	08 f4       	brcc	.+2      	; 0x149a <__vector_21+0x70>
    1498:	25 c1       	rjmp	.+586    	; 0x16e4 <__vector_21+0x2ba>
	{
		if (t==0)//sensor C0
    149a:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <t>
    149e:	88 23       	and	r24, r24
    14a0:	09 f0       	breq	.+2      	; 0x14a4 <__vector_21+0x7a>
    14a2:	88 c0       	rjmp	.+272    	; 0x15b4 <__vector_21+0x18a>
		{	
		ADMUX = 0b01000000;
    14a4:	8c e7       	ldi	r24, 0x7C	; 124
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	20 e4       	ldi	r18, 0x40	; 64
    14aa:	fc 01       	movw	r30, r24
    14ac:	20 83       	st	Z, r18
		DIDR0 = 0b00111110;
    14ae:	8e e7       	ldi	r24, 0x7E	; 126
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	2e e3       	ldi	r18, 0x3E	; 62
    14b4:	fc 01       	movw	r30, r24
    14b6:	20 83       	st	Z, r18
		leitura1 = ADC;
    14b8:	88 e7       	ldi	r24, 0x78	; 120
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	fc 01       	movw	r30, r24
    14be:	80 81       	ld	r24, Z
    14c0:	91 81       	ldd	r25, Z+1	; 0x01
    14c2:	cc 01       	movw	r24, r24
    14c4:	a0 e0       	ldi	r26, 0x00	; 0
    14c6:	b0 e0       	ldi	r27, 0x00	; 0
    14c8:	bc 01       	movw	r22, r24
    14ca:	cd 01       	movw	r24, r26
    14cc:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <__floatunsisf>
    14d0:	dc 01       	movw	r26, r24
    14d2:	cb 01       	movw	r24, r22
    14d4:	80 93 89 03 	sts	0x0389, r24	; 0x800389 <leitura1>
    14d8:	90 93 8a 03 	sts	0x038A, r25	; 0x80038a <leitura1+0x1>
    14dc:	a0 93 8b 03 	sts	0x038B, r26	; 0x80038b <leitura1+0x2>
    14e0:	b0 93 8c 03 	sts	0x038C, r27	; 0x80038c <leitura1+0x3>
		t++;
    14e4:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <t>
    14e8:	8f 5f       	subi	r24, 0xFF	; 255
    14ea:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <t>
		if(leitura1 <= 410)
    14ee:	80 91 89 03 	lds	r24, 0x0389	; 0x800389 <leitura1>
    14f2:	90 91 8a 03 	lds	r25, 0x038A	; 0x80038a <leitura1+0x1>
    14f6:	a0 91 8b 03 	lds	r26, 0x038B	; 0x80038b <leitura1+0x2>
    14fa:	b0 91 8c 03 	lds	r27, 0x038C	; 0x80038c <leitura1+0x3>
    14fe:	20 e0       	ldi	r18, 0x00	; 0
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	4d ec       	ldi	r20, 0xCD	; 205
    1504:	53 e4       	ldi	r21, 0x43	; 67
    1506:	bc 01       	movw	r22, r24
    1508:	cd 01       	movw	r24, r26
    150a:	0e 94 3c 11 	call	0x2278	; 0x2278 <__cmpsf2>
    150e:	18 16       	cp	r1, r24
    1510:	6c f0       	brlt	.+26     	; 0x152c <__vector_21+0x102>
		{
			conv = 30; 
    1512:	80 e0       	ldi	r24, 0x00	; 0
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	a0 ef       	ldi	r26, 0xF0	; 240
    1518:	b1 e4       	ldi	r27, 0x41	; 65
    151a:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <conv>
    151e:	90 93 96 03 	sts	0x0396, r25	; 0x800396 <conv+0x1>
    1522:	a0 93 97 03 	sts	0x0397, r26	; 0x800397 <conv+0x2>
    1526:	b0 93 98 03 	sts	0x0398, r27	; 0x800398 <conv+0x3>
    152a:	cc c0       	rjmp	.+408    	; 0x16c4 <__vector_21+0x29a>
		}
		else if(leitura1 >= 716 )
    152c:	80 91 89 03 	lds	r24, 0x0389	; 0x800389 <leitura1>
    1530:	90 91 8a 03 	lds	r25, 0x038A	; 0x80038a <leitura1+0x1>
    1534:	a0 91 8b 03 	lds	r26, 0x038B	; 0x80038b <leitura1+0x2>
    1538:	b0 91 8c 03 	lds	r27, 0x038C	; 0x80038c <leitura1+0x3>
    153c:	20 e0       	ldi	r18, 0x00	; 0
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	43 e3       	ldi	r20, 0x33	; 51
    1542:	54 e4       	ldi	r21, 0x44	; 68
    1544:	bc 01       	movw	r22, r24
    1546:	cd 01       	movw	r24, r26
    1548:	0e 94 9b 12 	call	0x2536	; 0x2536 <__gesf2>
    154c:	88 23       	and	r24, r24
    154e:	6c f0       	brlt	.+26     	; 0x156a <__vector_21+0x140>
		{
			conv = 45; 
    1550:	80 e0       	ldi	r24, 0x00	; 0
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	a4 e3       	ldi	r26, 0x34	; 52
    1556:	b2 e4       	ldi	r27, 0x42	; 66
    1558:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <conv>
    155c:	90 93 96 03 	sts	0x0396, r25	; 0x800396 <conv+0x1>
    1560:	a0 93 97 03 	sts	0x0397, r26	; 0x800397 <conv+0x2>
    1564:	b0 93 98 03 	sts	0x0398, r27	; 0x800398 <conv+0x3>
    1568:	ad c0       	rjmp	.+346    	; 0x16c4 <__vector_21+0x29a>
		}
		else
		{
			conv = (leitura1 + 205)/20.5; /*aqui eu relacionei a funcao da reta da temperatura com o numero de 'a' pontos que seria lido pelo adc,
    156a:	80 91 89 03 	lds	r24, 0x0389	; 0x800389 <leitura1>
    156e:	90 91 8a 03 	lds	r25, 0x038A	; 0x80038a <leitura1+0x1>
    1572:	a0 91 8b 03 	lds	r26, 0x038B	; 0x80038b <leitura1+0x2>
    1576:	b0 91 8c 03 	lds	r27, 0x038C	; 0x80038c <leitura1+0x3>
    157a:	20 e0       	ldi	r18, 0x00	; 0
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	4d e4       	ldi	r20, 0x4D	; 77
    1580:	53 e4       	ldi	r21, 0x43	; 67
    1582:	bc 01       	movw	r22, r24
    1584:	cd 01       	movw	r24, r26
    1586:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__addsf3>
    158a:	dc 01       	movw	r26, r24
    158c:	cb 01       	movw	r24, r22
    158e:	20 e0       	ldi	r18, 0x00	; 0
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	44 ea       	ldi	r20, 0xA4	; 164
    1594:	51 e4       	ldi	r21, 0x41	; 65
    1596:	bc 01       	movw	r22, r24
    1598:	cd 01       	movw	r24, r26
    159a:	0e 94 41 11 	call	0x2282	; 0x2282 <__divsf3>
    159e:	dc 01       	movw	r26, r24
    15a0:	cb 01       	movw	r24, r22
    15a2:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <conv>
    15a6:	90 93 96 03 	sts	0x0396, r25	; 0x800396 <conv+0x1>
    15aa:	a0 93 97 03 	sts	0x0397, r26	; 0x800397 <conv+0x2>
    15ae:	b0 93 98 03 	sts	0x0398, r27	; 0x800398 <conv+0x3>
    15b2:	88 c0       	rjmp	.+272    	; 0x16c4 <__vector_21+0x29a>
			0.1x - 1 -- a
			5 -- 1024, isolei o x em funcao de 'a' e deu isso aí.*/ 
		}

		}
		else if (t==1)//sensor C1
    15b4:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <t>
    15b8:	81 30       	cpi	r24, 0x01	; 1
    15ba:	09 f0       	breq	.+2      	; 0x15be <__vector_21+0x194>
    15bc:	45 c0       	rjmp	.+138    	; 0x1648 <__vector_21+0x21e>
		{
		ADMUX = 0b01000001;
    15be:	8c e7       	ldi	r24, 0x7C	; 124
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	21 e4       	ldi	r18, 0x41	; 65
    15c4:	fc 01       	movw	r30, r24
    15c6:	20 83       	st	Z, r18
        DIDR0 = 0b00111101;
    15c8:	8e e7       	ldi	r24, 0x7E	; 126
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	2d e3       	ldi	r18, 0x3D	; 61
    15ce:	fc 01       	movw	r30, r24
    15d0:	20 83       	st	Z, r18
		t++;
    15d2:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <t>
    15d6:	8f 5f       	subi	r24, 0xFF	; 255
    15d8:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <t>
		leitura2 = ADC;
    15dc:	88 e7       	ldi	r24, 0x78	; 120
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	fc 01       	movw	r30, r24
    15e2:	80 81       	ld	r24, Z
    15e4:	91 81       	ldd	r25, Z+1	; 0x01
    15e6:	90 93 c1 03 	sts	0x03C1, r25	; 0x8003c1 <leitura2+0x1>
    15ea:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <leitura2>
		conv2 = (int)leitura2*100.0/819.0; //aqui para o sensor de saturacao de oxigenio 
    15ee:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <leitura2>
    15f2:	90 91 c1 03 	lds	r25, 0x03C1	; 0x8003c1 <leitura2+0x1>
    15f6:	09 2e       	mov	r0, r25
    15f8:	00 0c       	add	r0, r0
    15fa:	aa 0b       	sbc	r26, r26
    15fc:	bb 0b       	sbc	r27, r27
    15fe:	bc 01       	movw	r22, r24
    1600:	cd 01       	movw	r24, r26
    1602:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <__floatsisf>
    1606:	dc 01       	movw	r26, r24
    1608:	cb 01       	movw	r24, r22
    160a:	20 e0       	ldi	r18, 0x00	; 0
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	48 ec       	ldi	r20, 0xC8	; 200
    1610:	52 e4       	ldi	r21, 0x42	; 66
    1612:	bc 01       	movw	r22, r24
    1614:	cd 01       	movw	r24, r26
    1616:	0e 94 a0 12 	call	0x2540	; 0x2540 <__mulsf3>
    161a:	dc 01       	movw	r26, r24
    161c:	cb 01       	movw	r24, r22
    161e:	20 e0       	ldi	r18, 0x00	; 0
    1620:	30 ec       	ldi	r19, 0xC0	; 192
    1622:	4c e4       	ldi	r20, 0x4C	; 76
    1624:	54 e4       	ldi	r21, 0x44	; 68
    1626:	bc 01       	movw	r22, r24
    1628:	cd 01       	movw	r24, r26
    162a:	0e 94 41 11 	call	0x2282	; 0x2282 <__divsf3>
    162e:	dc 01       	movw	r26, r24
    1630:	cb 01       	movw	r24, r22
    1632:	bc 01       	movw	r22, r24
    1634:	cd 01       	movw	r24, r26
    1636:	0e 94 ba 11 	call	0x2374	; 0x2374 <__fixunssfsi>
    163a:	dc 01       	movw	r26, r24
    163c:	cb 01       	movw	r24, r22
    163e:	90 93 94 03 	sts	0x0394, r25	; 0x800394 <conv2+0x1>
    1642:	80 93 93 03 	sts	0x0393, r24	; 0x800393 <conv2>
    1646:	3e c0       	rjmp	.+124    	; 0x16c4 <__vector_21+0x29a>
		
		}
		else
		{
		ADMUX = 0b01000010;
    1648:	8c e7       	ldi	r24, 0x7C	; 124
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	22 e4       	ldi	r18, 0x42	; 66
    164e:	fc 01       	movw	r30, r24
    1650:	20 83       	st	Z, r18
		DIDR0 = 0b00111011; 
    1652:	8e e7       	ldi	r24, 0x7E	; 126
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	2b e3       	ldi	r18, 0x3B	; 59
    1658:	fc 01       	movw	r30, r24
    165a:	20 83       	st	Z, r18
		t=0;
    165c:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <t>
		leitura3 = ADC;
    1660:	88 e7       	ldi	r24, 0x78	; 120
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	fc 01       	movw	r30, r24
    1666:	80 81       	ld	r24, Z
    1668:	91 81       	ldd	r25, Z+1	; 0x01
    166a:	90 93 8e 03 	sts	0x038E, r25	; 0x80038e <leitura3+0x1>
    166e:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <leitura3>
		conv3 = (leitura3*(1.1/1024) + 6.85);
    1672:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <leitura3>
    1676:	90 91 8e 03 	lds	r25, 0x038E	; 0x80038e <leitura3+0x1>
    167a:	cc 01       	movw	r24, r24
    167c:	a0 e0       	ldi	r26, 0x00	; 0
    167e:	b0 e0       	ldi	r27, 0x00	; 0
    1680:	bc 01       	movw	r22, r24
    1682:	cd 01       	movw	r24, r26
    1684:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <__floatunsisf>
    1688:	dc 01       	movw	r26, r24
    168a:	cb 01       	movw	r24, r22
    168c:	2d ec       	ldi	r18, 0xCD	; 205
    168e:	3c ec       	ldi	r19, 0xCC	; 204
    1690:	4c e8       	ldi	r20, 0x8C	; 140
    1692:	5a e3       	ldi	r21, 0x3A	; 58
    1694:	bc 01       	movw	r22, r24
    1696:	cd 01       	movw	r24, r26
    1698:	0e 94 a0 12 	call	0x2540	; 0x2540 <__mulsf3>
    169c:	dc 01       	movw	r26, r24
    169e:	cb 01       	movw	r24, r22
    16a0:	23 e3       	ldi	r18, 0x33	; 51
    16a2:	33 e3       	ldi	r19, 0x33	; 51
    16a4:	4b ed       	ldi	r20, 0xDB	; 219
    16a6:	50 e4       	ldi	r21, 0x40	; 64
    16a8:	bc 01       	movw	r22, r24
    16aa:	cd 01       	movw	r24, r26
    16ac:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__addsf3>
    16b0:	dc 01       	movw	r26, r24
    16b2:	cb 01       	movw	r24, r22
    16b4:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <conv3>
    16b8:	90 93 ab 03 	sts	0x03AB, r25	; 0x8003ab <conv3+0x1>
    16bc:	a0 93 ac 03 	sts	0x03AC, r26	; 0x8003ac <conv3+0x2>
    16c0:	b0 93 ad 03 	sts	0x03AD, r27	; 0x8003ad <conv3+0x3>
		
		}
	tempo150 = tempo_ms;
    16c4:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <tempo_ms>
    16c8:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <tempo_ms+0x1>
    16cc:	a0 91 73 01 	lds	r26, 0x0173	; 0x800173 <tempo_ms+0x2>
    16d0:	b0 91 74 01 	lds	r27, 0x0174	; 0x800174 <tempo_ms+0x3>
    16d4:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <tempo150>
    16d8:	90 93 82 01 	sts	0x0182, r25	; 0x800182 <tempo150+0x1>
    16dc:	a0 93 83 01 	sts	0x0183, r26	; 0x800183 <tempo150+0x2>
    16e0:	b0 93 84 01 	sts	0x0184, r27	; 0x800184 <tempo150+0x3>
	}
}
    16e4:	00 00       	nop
    16e6:	df 91       	pop	r29
    16e8:	cf 91       	pop	r28
    16ea:	ff 91       	pop	r31
    16ec:	ef 91       	pop	r30
    16ee:	bf 91       	pop	r27
    16f0:	af 91       	pop	r26
    16f2:	9f 91       	pop	r25
    16f4:	8f 91       	pop	r24
    16f6:	7f 91       	pop	r23
    16f8:	6f 91       	pop	r22
    16fa:	5f 91       	pop	r21
    16fc:	4f 91       	pop	r20
    16fe:	3f 91       	pop	r19
    1700:	2f 91       	pop	r18
    1702:	1f 91       	pop	r17
    1704:	0f 91       	pop	r16
    1706:	ff 90       	pop	r15
    1708:	ef 90       	pop	r14
    170a:	0f 90       	pop	r0
    170c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    1710:	0f 90       	pop	r0
    1712:	1f 90       	pop	r1
    1714:	18 95       	reti

00001716 <__vector_4>:
ISR(PCINT1_vect)
{
    1716:	1f 92       	push	r1
    1718:	0f 92       	push	r0
    171a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    171e:	0f 92       	push	r0
    1720:	11 24       	eor	r1, r1
    1722:	2f 93       	push	r18
    1724:	3f 93       	push	r19
    1726:	4f 93       	push	r20
    1728:	5f 93       	push	r21
    172a:	6f 93       	push	r22
    172c:	7f 93       	push	r23
    172e:	8f 93       	push	r24
    1730:	9f 93       	push	r25
    1732:	af 93       	push	r26
    1734:	bf 93       	push	r27
    1736:	ef 93       	push	r30
    1738:	ff 93       	push	r31
    173a:	cf 93       	push	r28
    173c:	df 93       	push	r29
    173e:	cd b7       	in	r28, 0x3d	; 61
    1740:	de b7       	in	r29, 0x3e	; 62
	sel2+=1; 
    1742:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <sel2>
    1746:	8f 5f       	subi	r24, 0xFF	; 255
    1748:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <sel2>
	USART_Transmit(sel2 + '0');
    174c:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <sel2>
    1750:	80 5d       	subi	r24, 0xD0	; 208
    1752:	0e 94 79 01 	call	0x2f2	; 0x2f2 <USART_Transmit>
	if(sel2>=4)
    1756:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <sel2>
    175a:	84 30       	cpi	r24, 0x04	; 4
    175c:	10 f0       	brcs	.+4      	; 0x1762 <__vector_4+0x4c>
	sel2=0;
    175e:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <sel2>
}
    1762:	00 00       	nop
    1764:	df 91       	pop	r29
    1766:	cf 91       	pop	r28
    1768:	ff 91       	pop	r31
    176a:	ef 91       	pop	r30
    176c:	bf 91       	pop	r27
    176e:	af 91       	pop	r26
    1770:	9f 91       	pop	r25
    1772:	8f 91       	pop	r24
    1774:	7f 91       	pop	r23
    1776:	6f 91       	pop	r22
    1778:	5f 91       	pop	r21
    177a:	4f 91       	pop	r20
    177c:	3f 91       	pop	r19
    177e:	2f 91       	pop	r18
    1780:	0f 90       	pop	r0
    1782:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    1786:	0f 90       	pop	r0
    1788:	1f 90       	pop	r1
    178a:	18 95       	reti

0000178c <__vector_3>:
//vendo a chave seletora
ISR(PCINT0_vect)
{
    178c:	1f 92       	push	r1
    178e:	0f 92       	push	r0
    1790:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    1794:	0f 92       	push	r0
    1796:	11 24       	eor	r1, r1
    1798:	8f 93       	push	r24
    179a:	cf 93       	push	r28
    179c:	df 93       	push	r29
    179e:	cd b7       	in	r28, 0x3d	; 61
    17a0:	de b7       	in	r29, 0x3e	; 62
	sel += 1; 
    17a2:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <__data_end>
    17a6:	8f 5f       	subi	r24, 0xFF	; 255
    17a8:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <__data_end>
	
	if(sel == 10)
    17ac:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <__data_end>
    17b0:	8a 30       	cpi	r24, 0x0A	; 10
    17b2:	11 f4       	brne	.+4      	; 0x17b8 <__vector_3+0x2c>
	{
		sel = 0; 
    17b4:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <__data_end>
	}	
}
    17b8:	00 00       	nop
    17ba:	df 91       	pop	r29
    17bc:	cf 91       	pop	r28
    17be:	8f 91       	pop	r24
    17c0:	0f 90       	pop	r0
    17c2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    17c6:	0f 90       	pop	r0
    17c8:	1f 90       	pop	r1
    17ca:	18 95       	reti

000017cc <__vector_18>:
//fiz o tratamento de erros aqui
ISR(USART_RX_vect)
{
    17cc:	1f 92       	push	r1
    17ce:	0f 92       	push	r0
    17d0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    17d4:	0f 92       	push	r0
    17d6:	11 24       	eor	r1, r1
    17d8:	0f 93       	push	r16
    17da:	1f 93       	push	r17
    17dc:	2f 93       	push	r18
    17de:	3f 93       	push	r19
    17e0:	4f 93       	push	r20
    17e2:	5f 93       	push	r21
    17e4:	6f 93       	push	r22
    17e6:	7f 93       	push	r23
    17e8:	8f 93       	push	r24
    17ea:	9f 93       	push	r25
    17ec:	af 93       	push	r26
    17ee:	bf 93       	push	r27
    17f0:	ef 93       	push	r30
    17f2:	ff 93       	push	r31
    17f4:	cf 93       	push	r28
    17f6:	df 93       	push	r29
    17f8:	00 d0       	rcall	.+0      	; 0x17fa <__vector_18+0x2e>
    17fa:	00 d0       	rcall	.+0      	; 0x17fc <__vector_18+0x30>
    17fc:	cd b7       	in	r28, 0x3d	; 61
    17fe:	de b7       	in	r29, 0x3e	; 62
	pressao[r] = USART_Recepcao(); 
    1800:	00 91 89 01 	lds	r16, 0x0189	; 0x800189 <r>
    1804:	10 91 8a 01 	lds	r17, 0x018A	; 0x80018a <r+0x1>
    1808:	0e 94 67 01 	call	0x2ce	; 0x2ce <USART_Recepcao>
    180c:	28 2f       	mov	r18, r24
    180e:	c8 01       	movw	r24, r16
    1810:	87 56       	subi	r24, 0x67	; 103
    1812:	9c 4f       	sbci	r25, 0xFC	; 252
    1814:	fc 01       	movw	r30, r24
    1816:	20 83       	st	Z, r18

	if (r==8)
    1818:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <r>
    181c:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <r+0x1>
    1820:	08 97       	sbiw	r24, 0x08	; 8
    1822:	09 f0       	breq	.+2      	; 0x1826 <__vector_18+0x5a>
    1824:	65 c0       	rjmp	.+202    	; 0x18f0 <__vector_18+0x124>
	{
		truth = 1; 
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <truth+0x1>
    182e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <truth>
		if ((pressao[0] != ';')|(pressao[8] != ':')|(pressao[4] !='x'))
    1832:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <pressao>
    1836:	91 e0       	ldi	r25, 0x01	; 1
    1838:	8b 33       	cpi	r24, 0x3B	; 59
    183a:	09 f4       	brne	.+2      	; 0x183e <__vector_18+0x72>
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	20 91 a1 03 	lds	r18, 0x03A1	; 0x8003a1 <pressao+0x8>
    1842:	81 e0       	ldi	r24, 0x01	; 1
    1844:	2a 33       	cpi	r18, 0x3A	; 58
    1846:	09 f4       	brne	.+2      	; 0x184a <__vector_18+0x7e>
    1848:	80 e0       	ldi	r24, 0x00	; 0
    184a:	89 2b       	or	r24, r25
    184c:	28 2f       	mov	r18, r24
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	90 91 9d 03 	lds	r25, 0x039D	; 0x80039d <pressao+0x4>
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	98 37       	cpi	r25, 0x78	; 120
    1858:	09 f4       	brne	.+2      	; 0x185c <__vector_18+0x90>
    185a:	80 e0       	ldi	r24, 0x00	; 0
    185c:	88 2f       	mov	r24, r24
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	82 2b       	or	r24, r18
    1862:	93 2b       	or	r25, r19
    1864:	89 2b       	or	r24, r25
    1866:	29 f0       	breq	.+10     	; 0x1872 <__vector_18+0xa6>
				truth = 0; 
    1868:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <truth+0x1>
    186c:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <truth>
    1870:	3a c0       	rjmp	.+116    	; 0x18e6 <__vector_18+0x11a>
		else{	
			for(int u = 1; u<4; u++)
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	9a 83       	std	Y+2, r25	; 0x02
    1878:	89 83       	std	Y+1, r24	; 0x01
    187a:	14 c0       	rjmp	.+40     	; 0x18a4 <__vector_18+0xd8>
			{	
				if((pressao[u] - '0') > 9 )
    187c:	89 81       	ldd	r24, Y+1	; 0x01
    187e:	9a 81       	ldd	r25, Y+2	; 0x02
    1880:	87 56       	subi	r24, 0x67	; 103
    1882:	9c 4f       	sbci	r25, 0xFC	; 252
    1884:	fc 01       	movw	r30, r24
    1886:	80 81       	ld	r24, Z
    1888:	88 2f       	mov	r24, r24
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	c0 97       	sbiw	r24, 0x30	; 48
    188e:	0a 97       	sbiw	r24, 0x0a	; 10
    1890:	24 f0       	brlt	.+8      	; 0x189a <__vector_18+0xce>
					truth =0; 
    1892:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <truth+0x1>
    1896:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <truth>
	{
		truth = 1; 
		if ((pressao[0] != ';')|(pressao[8] != ':')|(pressao[4] !='x'))
				truth = 0; 
		else{	
			for(int u = 1; u<4; u++)
    189a:	89 81       	ldd	r24, Y+1	; 0x01
    189c:	9a 81       	ldd	r25, Y+2	; 0x02
    189e:	01 96       	adiw	r24, 0x01	; 1
    18a0:	9a 83       	std	Y+2, r25	; 0x02
    18a2:	89 83       	std	Y+1, r24	; 0x01
    18a4:	89 81       	ldd	r24, Y+1	; 0x01
    18a6:	9a 81       	ldd	r25, Y+2	; 0x02
    18a8:	04 97       	sbiw	r24, 0x04	; 4
    18aa:	44 f3       	brlt	.-48     	; 0x187c <__vector_18+0xb0>
			{	
				if((pressao[u] - '0') > 9 )
					truth =0; 
			}	
			for(int u =5; u < 8; u++)
    18ac:	85 e0       	ldi	r24, 0x05	; 5
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	9c 83       	std	Y+4, r25	; 0x04
    18b2:	8b 83       	std	Y+3, r24	; 0x03
    18b4:	14 c0       	rjmp	.+40     	; 0x18de <__vector_18+0x112>
		{
			if((pressao[u] - '0') > 9 )
    18b6:	8b 81       	ldd	r24, Y+3	; 0x03
    18b8:	9c 81       	ldd	r25, Y+4	; 0x04
    18ba:	87 56       	subi	r24, 0x67	; 103
    18bc:	9c 4f       	sbci	r25, 0xFC	; 252
    18be:	fc 01       	movw	r30, r24
    18c0:	80 81       	ld	r24, Z
    18c2:	88 2f       	mov	r24, r24
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	c0 97       	sbiw	r24, 0x30	; 48
    18c8:	0a 97       	sbiw	r24, 0x0a	; 10
    18ca:	24 f0       	brlt	.+8      	; 0x18d4 <__vector_18+0x108>
				truth =0; 
    18cc:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <truth+0x1>
    18d0:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <truth>
			for(int u = 1; u<4; u++)
			{	
				if((pressao[u] - '0') > 9 )
					truth =0; 
			}	
			for(int u =5; u < 8; u++)
    18d4:	8b 81       	ldd	r24, Y+3	; 0x03
    18d6:	9c 81       	ldd	r25, Y+4	; 0x04
    18d8:	01 96       	adiw	r24, 0x01	; 1
    18da:	9c 83       	std	Y+4, r25	; 0x04
    18dc:	8b 83       	std	Y+3, r24	; 0x03
    18de:	8b 81       	ldd	r24, Y+3	; 0x03
    18e0:	9c 81       	ldd	r25, Y+4	; 0x04
    18e2:	08 97       	sbiw	r24, 0x08	; 8
    18e4:	44 f3       	brlt	.-48     	; 0x18b6 <__vector_18+0xea>
			if((pressao[u] - '0') > 9 )
				truth =0; 
		}
		}

	r = 0;
    18e6:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <r+0x1>
    18ea:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <r>
	}
	else
	{
	r++; 
	}
}
    18ee:	09 c0       	rjmp	.+18     	; 0x1902 <__vector_18+0x136>

	r = 0;
	}
	else
	{
	r++; 
    18f0:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <r>
    18f4:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <r+0x1>
    18f8:	01 96       	adiw	r24, 0x01	; 1
    18fa:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <r+0x1>
    18fe:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <r>
	}
}
    1902:	00 00       	nop
    1904:	0f 90       	pop	r0
    1906:	0f 90       	pop	r0
    1908:	0f 90       	pop	r0
    190a:	0f 90       	pop	r0
    190c:	df 91       	pop	r29
    190e:	cf 91       	pop	r28
    1910:	ff 91       	pop	r31
    1912:	ef 91       	pop	r30
    1914:	bf 91       	pop	r27
    1916:	af 91       	pop	r26
    1918:	9f 91       	pop	r25
    191a:	8f 91       	pop	r24
    191c:	7f 91       	pop	r23
    191e:	6f 91       	pop	r22
    1920:	5f 91       	pop	r21
    1922:	4f 91       	pop	r20
    1924:	3f 91       	pop	r19
    1926:	2f 91       	pop	r18
    1928:	1f 91       	pop	r17
    192a:	0f 91       	pop	r16
    192c:	0f 90       	pop	r0
    192e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    1932:	0f 90       	pop	r0
    1934:	1f 90       	pop	r1
    1936:	18 95       	reti

00001938 <main>:
#include "defs.h"
#include "nokia5110.h"


int main(void)
{
    1938:	cf 93       	push	r28
    193a:	df 93       	push	r29
    193c:	00 d0       	rcall	.+0      	; 0x193e <main+0x6>
    193e:	cd b7       	in	r28, 0x3d	; 61
    1940:	de b7       	in	r29, 0x3e	; 62
	int a = 1;
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	9a 83       	std	Y+2, r25	; 0x02
    1948:	89 83       	std	Y+1, r24	; 0x01
	enabling(MYUBRR);
    194a:	87 e6       	ldi	r24, 0x67	; 103
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	0e 94 43 01 	call	0x286	; 0x286 <enabling>
	DDRB = 0b00000110; //todos os pinos B como saídas
    1952:	84 e2       	ldi	r24, 0x24	; 36
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	26 e0       	ldi	r18, 0x06	; 6
    1958:	fc 01       	movw	r30, r24
    195a:	20 83       	st	Z, r18
	DDRD = 0b10000000; //todos os pinos D exceto D7 como entradas
    195c:	8a e2       	ldi	r24, 0x2A	; 42
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	20 e8       	ldi	r18, 0x80	; 128
    1962:	fc 01       	movw	r30, r24
    1964:	20 83       	st	Z, r18
	DDRC = 0b00000000; //todos os pinos C como entradas
    1966:	87 e2       	ldi	r24, 0x27	; 39
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	fc 01       	movw	r30, r24
    196c:	10 82       	st	Z, r1
	
	PORTD = 0b01111111; //habilita resistores pullup
    196e:	8b e2       	ldi	r24, 0x2B	; 43
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	2f e7       	ldi	r18, 0x7F	; 127
    1974:	fc 01       	movw	r30, r24
    1976:	20 83       	st	Z, r18
	PORTC = 0b01111111;
    1978:	88 e2       	ldi	r24, 0x28	; 40
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	2f e7       	ldi	r18, 0x7F	; 127
    197e:	fc 01       	movw	r30, r24
    1980:	20 83       	st	Z, r18
	PORTB = 0b10000000;
    1982:	85 e2       	ldi	r24, 0x25	; 37
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	20 e8       	ldi	r18, 0x80	; 128
    1988:	fc 01       	movw	r30, r24
    198a:	20 83       	st	Z, r18
	
	ICR1 = 39999;
    198c:	86 e8       	ldi	r24, 0x86	; 134
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	2f e3       	ldi	r18, 0x3F	; 63
    1992:	3c e9       	ldi	r19, 0x9C	; 156
    1994:	fc 01       	movw	r30, r24
    1996:	31 83       	std	Z+1, r19	; 0x01
    1998:	20 83       	st	Z, r18
	TCCR1A = 0b10100010;
    199a:	80 e8       	ldi	r24, 0x80	; 128
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	22 ea       	ldi	r18, 0xA2	; 162
    19a0:	fc 01       	movw	r30, r24
    19a2:	20 83       	st	Z, r18
	TCCR1B = 0b00011010;
    19a4:	81 e8       	ldi	r24, 0x81	; 129
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	2a e1       	ldi	r18, 0x1A	; 26
    19aa:	fc 01       	movw	r30, r24
    19ac:	20 83       	st	Z, r18
		
	OCR1A = 2000;
    19ae:	88 e8       	ldi	r24, 0x88	; 136
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	20 ed       	ldi	r18, 0xD0	; 208
    19b4:	37 e0       	ldi	r19, 0x07	; 7
    19b6:	fc 01       	movw	r30, r24
    19b8:	31 83       	std	Z+1, r19	; 0x01
    19ba:	20 83       	st	Z, r18
	
	EICRA = 0b00001010; //interrupçao INT0 e INT1
    19bc:	89 e6       	ldi	r24, 0x69	; 105
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	2a e0       	ldi	r18, 0x0A	; 10
    19c2:	fc 01       	movw	r30, r24
    19c4:	20 83       	st	Z, r18
	EIMSK = 0b00000011;
    19c6:	8d e3       	ldi	r24, 0x3D	; 61
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	23 e0       	ldi	r18, 0x03	; 3
    19cc:	fc 01       	movw	r30, r24
    19ce:	20 83       	st	Z, r18
	
	//habilitacao do ADC
	
	ADCSRA = 0b11101111;
    19d0:	8a e7       	ldi	r24, 0x7A	; 122
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	2f ee       	ldi	r18, 0xEF	; 239
    19d6:	fc 01       	movw	r30, r24
    19d8:	20 83       	st	Z, r18
	ADCSRB = 0x00;
    19da:	8b e7       	ldi	r24, 0x7B	; 123
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	fc 01       	movw	r30, r24
    19e0:	10 82       	st	Z, r1
	
	//interrupçao por comparacao (de 1 ms)
	TCCR0A = 0b00000010;
    19e2:	84 e4       	ldi	r24, 0x44	; 68
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	22 e0       	ldi	r18, 0x02	; 2
    19e8:	fc 01       	movw	r30, r24
    19ea:	20 83       	st	Z, r18
	TCCR0B = 0b00000011; //habilita prescaler
    19ec:	85 e4       	ldi	r24, 0x45	; 69
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	23 e0       	ldi	r18, 0x03	; 3
    19f2:	fc 01       	movw	r30, r24
    19f4:	20 83       	st	Z, r18
	OCR0A = 249;
    19f6:	87 e4       	ldi	r24, 0x47	; 71
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	29 ef       	ldi	r18, 0xF9	; 249
    19fc:	fc 01       	movw	r30, r24
    19fe:	20 83       	st	Z, r18
	TIMSK0 = 0b00000010;
    1a00:	8e e6       	ldi	r24, 0x6E	; 110
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	22 e0       	ldi	r18, 0x02	; 2
    1a06:	fc 01       	movw	r30, r24
    1a08:	20 83       	st	Z, r18
	
	//interrupção PCINT16
	PCICR = 0b00000111; //Habilita interrupção dos pinos D, C e B (PCINT)
    1a0a:	88 e6       	ldi	r24, 0x68	; 104
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	27 e0       	ldi	r18, 0x07	; 7
    1a10:	fc 01       	movw	r30, r24
    1a12:	20 83       	st	Z, r18
	PCIFR = 0b00000111;
    1a14:	8b e3       	ldi	r24, 0x3B	; 59
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	27 e0       	ldi	r18, 0x07	; 7
    1a1a:	fc 01       	movw	r30, r24
    1a1c:	20 83       	st	Z, r18
	PCMSK0 = 0b10000000;
    1a1e:	8b e6       	ldi	r24, 0x6B	; 107
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	20 e8       	ldi	r18, 0x80	; 128
    1a24:	fc 01       	movw	r30, r24
    1a26:	20 83       	st	Z, r18
	PCMSK1 = 0b01000000; //habilita interrupcao no pino 6C
    1a28:	8c e6       	ldi	r24, 0x6C	; 108
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	20 e4       	ldi	r18, 0x40	; 64
    1a2e:	fc 01       	movw	r30, r24
    1a30:	20 83       	st	Z, r18
	PCMSK2 = 0b00010000; //Habilita interrupção do pino  21
    1a32:	8d e6       	ldi	r24, 0x6D	; 109
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	20 e1       	ldi	r18, 0x10	; 16
    1a38:	fc 01       	movw	r30, r24
    1a3a:	20 83       	st	Z, r18
	
	UCSR0B |= (1<<RXCIE0); //interrupt usart
    1a3c:	81 ec       	ldi	r24, 0xC1	; 193
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	21 ec       	ldi	r18, 0xC1	; 193
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	f9 01       	movw	r30, r18
    1a46:	20 81       	ld	r18, Z
    1a48:	20 68       	ori	r18, 0x80	; 128
    1a4a:	fc 01       	movw	r30, r24
    1a4c:	20 83       	st	Z, r18
	
	sei();
    1a4e:	78 94       	sei
	nokia_lcd_init();
    1a50:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <nokia_lcd_init>

	while (1)
	{
		funcao_led(&a);
    1a54:	ce 01       	movw	r24, r28
    1a56:	01 96       	adiw	r24, 0x01	; 1
    1a58:	0e 94 0d 07 	call	0xe1a	; 0xe1a <funcao_led>
	}
    1a5c:	fb cf       	rjmp	.-10     	; 0x1a54 <main+0x11c>

00001a5e <write>:
}

void nokia_lcd_power(uint8_t on)
{
	write_cmd(on ? 0x20 : 0x24);
}
    1a5e:	1f 93       	push	r17
    1a60:	cf 93       	push	r28
    1a62:	df 93       	push	r29
    1a64:	00 d0       	rcall	.+0      	; 0x1a66 <write+0x8>
    1a66:	cd b7       	in	r28, 0x3d	; 61
    1a68:	de b7       	in	r29, 0x3e	; 62
    1a6a:	89 83       	std	Y+1, r24	; 0x01
    1a6c:	6a 83       	std	Y+2, r22	; 0x02
    1a6e:	85 e2       	ldi	r24, 0x25	; 37
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	25 e2       	ldi	r18, 0x25	; 37
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	f9 01       	movw	r30, r18
    1a78:	20 81       	ld	r18, Z
    1a7a:	2e 7f       	andi	r18, 0xFE	; 254
    1a7c:	fc 01       	movw	r30, r24
    1a7e:	20 83       	st	Z, r18
    1a80:	8a 81       	ldd	r24, Y+2	; 0x02
    1a82:	88 23       	and	r24, r24
    1a84:	51 f0       	breq	.+20     	; 0x1a9a <write+0x3c>
    1a86:	85 e2       	ldi	r24, 0x25	; 37
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	25 e2       	ldi	r18, 0x25	; 37
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	f9 01       	movw	r30, r18
    1a90:	20 81       	ld	r18, Z
    1a92:	20 61       	ori	r18, 0x10	; 16
    1a94:	fc 01       	movw	r30, r24
    1a96:	20 83       	st	Z, r18
    1a98:	09 c0       	rjmp	.+18     	; 0x1aac <write+0x4e>
    1a9a:	85 e2       	ldi	r24, 0x25	; 37
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	25 e2       	ldi	r18, 0x25	; 37
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	f9 01       	movw	r30, r18
    1aa4:	20 81       	ld	r18, Z
    1aa6:	2f 7e       	andi	r18, 0xEF	; 239
    1aa8:	fc 01       	movw	r30, r24
    1aaa:	20 83       	st	Z, r18
    1aac:	10 e0       	ldi	r17, 0x00	; 0
    1aae:	3c c0       	rjmp	.+120    	; 0x1b28 <write+0xca>
    1ab0:	89 81       	ldd	r24, Y+1	; 0x01
    1ab2:	88 2f       	mov	r24, r24
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	21 2f       	mov	r18, r17
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	47 e0       	ldi	r20, 0x07	; 7
    1abc:	50 e0       	ldi	r21, 0x00	; 0
    1abe:	ba 01       	movw	r22, r20
    1ac0:	62 1b       	sub	r22, r18
    1ac2:	73 0b       	sbc	r23, r19
    1ac4:	9b 01       	movw	r18, r22
    1ac6:	02 c0       	rjmp	.+4      	; 0x1acc <write+0x6e>
    1ac8:	95 95       	asr	r25
    1aca:	87 95       	ror	r24
    1acc:	2a 95       	dec	r18
    1ace:	e2 f7       	brpl	.-8      	; 0x1ac8 <write+0x6a>
    1ad0:	81 70       	andi	r24, 0x01	; 1
    1ad2:	99 27       	eor	r25, r25
    1ad4:	89 2b       	or	r24, r25
    1ad6:	51 f0       	breq	.+20     	; 0x1aec <write+0x8e>
    1ad8:	85 e2       	ldi	r24, 0x25	; 37
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	25 e2       	ldi	r18, 0x25	; 37
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	f9 01       	movw	r30, r18
    1ae2:	20 81       	ld	r18, Z
    1ae4:	20 62       	ori	r18, 0x20	; 32
    1ae6:	fc 01       	movw	r30, r24
    1ae8:	20 83       	st	Z, r18
    1aea:	09 c0       	rjmp	.+18     	; 0x1afe <write+0xa0>
    1aec:	85 e2       	ldi	r24, 0x25	; 37
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	25 e2       	ldi	r18, 0x25	; 37
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	f9 01       	movw	r30, r18
    1af6:	20 81       	ld	r18, Z
    1af8:	2f 7d       	andi	r18, 0xDF	; 223
    1afa:	fc 01       	movw	r30, r24
    1afc:	20 83       	st	Z, r18
    1afe:	85 e2       	ldi	r24, 0x25	; 37
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	25 e2       	ldi	r18, 0x25	; 37
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	f9 01       	movw	r30, r18
    1b08:	20 81       	ld	r18, Z
    1b0a:	20 64       	ori	r18, 0x40	; 64
    1b0c:	fc 01       	movw	r30, r24
    1b0e:	20 83       	st	Z, r18
    1b10:	85 e2       	ldi	r24, 0x25	; 37
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	25 e2       	ldi	r18, 0x25	; 37
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	f9 01       	movw	r30, r18
    1b1a:	20 81       	ld	r18, Z
    1b1c:	2f 7b       	andi	r18, 0xBF	; 191
    1b1e:	fc 01       	movw	r30, r24
    1b20:	20 83       	st	Z, r18
    1b22:	81 2f       	mov	r24, r17
    1b24:	11 e0       	ldi	r17, 0x01	; 1
    1b26:	18 0f       	add	r17, r24
    1b28:	18 30       	cpi	r17, 0x08	; 8
    1b2a:	10 f2       	brcs	.-124    	; 0x1ab0 <write+0x52>
    1b2c:	85 e2       	ldi	r24, 0x25	; 37
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	25 e2       	ldi	r18, 0x25	; 37
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	f9 01       	movw	r30, r18
    1b36:	20 81       	ld	r18, Z
    1b38:	21 60       	ori	r18, 0x01	; 1
    1b3a:	fc 01       	movw	r30, r24
    1b3c:	20 83       	st	Z, r18
    1b3e:	00 00       	nop
    1b40:	0f 90       	pop	r0
    1b42:	0f 90       	pop	r0
    1b44:	df 91       	pop	r29
    1b46:	cf 91       	pop	r28
    1b48:	1f 91       	pop	r17
    1b4a:	08 95       	ret

00001b4c <write_cmd>:
    1b4c:	cf 93       	push	r28
    1b4e:	df 93       	push	r29
    1b50:	1f 92       	push	r1
    1b52:	cd b7       	in	r28, 0x3d	; 61
    1b54:	de b7       	in	r29, 0x3e	; 62
    1b56:	89 83       	std	Y+1, r24	; 0x01
    1b58:	60 e0       	ldi	r22, 0x00	; 0
    1b5a:	89 81       	ldd	r24, Y+1	; 0x01
    1b5c:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <write>
    1b60:	00 00       	nop
    1b62:	0f 90       	pop	r0
    1b64:	df 91       	pop	r29
    1b66:	cf 91       	pop	r28
    1b68:	08 95       	ret

00001b6a <write_data>:
    1b6a:	cf 93       	push	r28
    1b6c:	df 93       	push	r29
    1b6e:	1f 92       	push	r1
    1b70:	cd b7       	in	r28, 0x3d	; 61
    1b72:	de b7       	in	r29, 0x3e	; 62
    1b74:	89 83       	std	Y+1, r24	; 0x01
    1b76:	61 e0       	ldi	r22, 0x01	; 1
    1b78:	89 81       	ldd	r24, Y+1	; 0x01
    1b7a:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <write>
    1b7e:	00 00       	nop
    1b80:	0f 90       	pop	r0
    1b82:	df 91       	pop	r29
    1b84:	cf 91       	pop	r28
    1b86:	08 95       	ret

00001b88 <nokia_lcd_init>:
    1b88:	0f 93       	push	r16
    1b8a:	1f 93       	push	r17
    1b8c:	cf 93       	push	r28
    1b8e:	df 93       	push	r29
    1b90:	cd b7       	in	r28, 0x3d	; 61
    1b92:	de b7       	in	r29, 0x3e	; 62
    1b94:	6c 97       	sbiw	r28, 0x1c	; 28
    1b96:	0f b6       	in	r0, 0x3f	; 63
    1b98:	f8 94       	cli
    1b9a:	de bf       	out	0x3e, r29	; 62
    1b9c:	0f be       	out	0x3f, r0	; 63
    1b9e:	cd bf       	out	0x3d, r28	; 61
    1ba0:	84 e2       	ldi	r24, 0x24	; 36
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	24 e2       	ldi	r18, 0x24	; 36
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	f9 01       	movw	r30, r18
    1baa:	20 81       	ld	r18, Z
    1bac:	21 60       	ori	r18, 0x01	; 1
    1bae:	fc 01       	movw	r30, r24
    1bb0:	20 83       	st	Z, r18
    1bb2:	84 e2       	ldi	r24, 0x24	; 36
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	24 e2       	ldi	r18, 0x24	; 36
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	f9 01       	movw	r30, r18
    1bbc:	20 81       	ld	r18, Z
    1bbe:	28 60       	ori	r18, 0x08	; 8
    1bc0:	fc 01       	movw	r30, r24
    1bc2:	20 83       	st	Z, r18
    1bc4:	84 e2       	ldi	r24, 0x24	; 36
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	24 e2       	ldi	r18, 0x24	; 36
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	f9 01       	movw	r30, r18
    1bce:	20 81       	ld	r18, Z
    1bd0:	20 61       	ori	r18, 0x10	; 16
    1bd2:	fc 01       	movw	r30, r24
    1bd4:	20 83       	st	Z, r18
    1bd6:	84 e2       	ldi	r24, 0x24	; 36
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	24 e2       	ldi	r18, 0x24	; 36
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	f9 01       	movw	r30, r18
    1be0:	20 81       	ld	r18, Z
    1be2:	20 62       	ori	r18, 0x20	; 32
    1be4:	fc 01       	movw	r30, r24
    1be6:	20 83       	st	Z, r18
    1be8:	84 e2       	ldi	r24, 0x24	; 36
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	24 e2       	ldi	r18, 0x24	; 36
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	f9 01       	movw	r30, r18
    1bf2:	20 81       	ld	r18, Z
    1bf4:	20 64       	ori	r18, 0x40	; 64
    1bf6:	fc 01       	movw	r30, r24
    1bf8:	20 83       	st	Z, r18
    1bfa:	85 e2       	ldi	r24, 0x25	; 37
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	25 e2       	ldi	r18, 0x25	; 37
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	f9 01       	movw	r30, r18
    1c04:	20 81       	ld	r18, Z
    1c06:	28 60       	ori	r18, 0x08	; 8
    1c08:	fc 01       	movw	r30, r24
    1c0a:	20 83       	st	Z, r18
    1c0c:	85 e2       	ldi	r24, 0x25	; 37
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	25 e2       	ldi	r18, 0x25	; 37
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	f9 01       	movw	r30, r18
    1c16:	20 81       	ld	r18, Z
    1c18:	21 60       	ori	r18, 0x01	; 1
    1c1a:	fc 01       	movw	r30, r24
    1c1c:	20 83       	st	Z, r18
    1c1e:	80 e0       	ldi	r24, 0x00	; 0
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	a0 e2       	ldi	r26, 0x20	; 32
    1c24:	b1 e4       	ldi	r27, 0x41	; 65
    1c26:	89 83       	std	Y+1, r24	; 0x01
    1c28:	9a 83       	std	Y+2, r25	; 0x02
    1c2a:	ab 83       	std	Y+3, r26	; 0x03
    1c2c:	bc 83       	std	Y+4, r27	; 0x04
    1c2e:	20 e0       	ldi	r18, 0x00	; 0
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	4a e7       	ldi	r20, 0x7A	; 122
    1c34:	53 e4       	ldi	r21, 0x43	; 67
    1c36:	69 81       	ldd	r22, Y+1	; 0x01
    1c38:	7a 81       	ldd	r23, Y+2	; 0x02
    1c3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c3e:	0e 94 a0 12 	call	0x2540	; 0x2540 <__mulsf3>
    1c42:	dc 01       	movw	r26, r24
    1c44:	cb 01       	movw	r24, r22
    1c46:	8b 8b       	std	Y+19, r24	; 0x13
    1c48:	9c 8b       	std	Y+20, r25	; 0x14
    1c4a:	ad 8b       	std	Y+21, r26	; 0x15
    1c4c:	be 8b       	std	Y+22, r27	; 0x16
    1c4e:	20 e0       	ldi	r18, 0x00	; 0
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	40 e8       	ldi	r20, 0x80	; 128
    1c54:	5f e3       	ldi	r21, 0x3F	; 63
    1c56:	6b 89       	ldd	r22, Y+19	; 0x13
    1c58:	7c 89       	ldd	r23, Y+20	; 0x14
    1c5a:	8d 89       	ldd	r24, Y+21	; 0x15
    1c5c:	9e 89       	ldd	r25, Y+22	; 0x16
    1c5e:	0e 94 3c 11 	call	0x2278	; 0x2278 <__cmpsf2>
    1c62:	88 23       	and	r24, r24
    1c64:	2c f4       	brge	.+10     	; 0x1c70 <nokia_lcd_init+0xe8>
    1c66:	81 e0       	ldi	r24, 0x01	; 1
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	98 8f       	std	Y+24, r25	; 0x18
    1c6c:	8f 8b       	std	Y+23, r24	; 0x17
    1c6e:	3f c0       	rjmp	.+126    	; 0x1cee <nokia_lcd_init+0x166>
    1c70:	20 e0       	ldi	r18, 0x00	; 0
    1c72:	3f ef       	ldi	r19, 0xFF	; 255
    1c74:	4f e7       	ldi	r20, 0x7F	; 127
    1c76:	57 e4       	ldi	r21, 0x47	; 71
    1c78:	6b 89       	ldd	r22, Y+19	; 0x13
    1c7a:	7c 89       	ldd	r23, Y+20	; 0x14
    1c7c:	8d 89       	ldd	r24, Y+21	; 0x15
    1c7e:	9e 89       	ldd	r25, Y+22	; 0x16
    1c80:	0e 94 9b 12 	call	0x2536	; 0x2536 <__gesf2>
    1c84:	18 16       	cp	r1, r24
    1c86:	4c f5       	brge	.+82     	; 0x1cda <nokia_lcd_init+0x152>
    1c88:	20 e0       	ldi	r18, 0x00	; 0
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	40 e2       	ldi	r20, 0x20	; 32
    1c8e:	51 e4       	ldi	r21, 0x41	; 65
    1c90:	69 81       	ldd	r22, Y+1	; 0x01
    1c92:	7a 81       	ldd	r23, Y+2	; 0x02
    1c94:	8b 81       	ldd	r24, Y+3	; 0x03
    1c96:	9c 81       	ldd	r25, Y+4	; 0x04
    1c98:	0e 94 a0 12 	call	0x2540	; 0x2540 <__mulsf3>
    1c9c:	dc 01       	movw	r26, r24
    1c9e:	cb 01       	movw	r24, r22
    1ca0:	bc 01       	movw	r22, r24
    1ca2:	cd 01       	movw	r24, r26
    1ca4:	0e 94 ba 11 	call	0x2374	; 0x2374 <__fixunssfsi>
    1ca8:	dc 01       	movw	r26, r24
    1caa:	cb 01       	movw	r24, r22
    1cac:	98 8f       	std	Y+24, r25	; 0x18
    1cae:	8f 8b       	std	Y+23, r24	; 0x17
    1cb0:	0f c0       	rjmp	.+30     	; 0x1cd0 <nokia_lcd_init+0x148>
    1cb2:	89 e1       	ldi	r24, 0x19	; 25
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	9a 8f       	std	Y+26, r25	; 0x1a
    1cb8:	89 8f       	std	Y+25, r24	; 0x19
    1cba:	89 8d       	ldd	r24, Y+25	; 0x19
    1cbc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1cbe:	01 97       	sbiw	r24, 0x01	; 1
    1cc0:	f1 f7       	brne	.-4      	; 0x1cbe <nokia_lcd_init+0x136>
    1cc2:	9a 8f       	std	Y+26, r25	; 0x1a
    1cc4:	89 8f       	std	Y+25, r24	; 0x19
    1cc6:	8f 89       	ldd	r24, Y+23	; 0x17
    1cc8:	98 8d       	ldd	r25, Y+24	; 0x18
    1cca:	01 97       	sbiw	r24, 0x01	; 1
    1ccc:	98 8f       	std	Y+24, r25	; 0x18
    1cce:	8f 8b       	std	Y+23, r24	; 0x17
    1cd0:	8f 89       	ldd	r24, Y+23	; 0x17
    1cd2:	98 8d       	ldd	r25, Y+24	; 0x18
    1cd4:	89 2b       	or	r24, r25
    1cd6:	69 f7       	brne	.-38     	; 0x1cb2 <nokia_lcd_init+0x12a>
    1cd8:	14 c0       	rjmp	.+40     	; 0x1d02 <nokia_lcd_init+0x17a>
    1cda:	6b 89       	ldd	r22, Y+19	; 0x13
    1cdc:	7c 89       	ldd	r23, Y+20	; 0x14
    1cde:	8d 89       	ldd	r24, Y+21	; 0x15
    1ce0:	9e 89       	ldd	r25, Y+22	; 0x16
    1ce2:	0e 94 ba 11 	call	0x2374	; 0x2374 <__fixunssfsi>
    1ce6:	dc 01       	movw	r26, r24
    1ce8:	cb 01       	movw	r24, r22
    1cea:	98 8f       	std	Y+24, r25	; 0x18
    1cec:	8f 8b       	std	Y+23, r24	; 0x17
    1cee:	8f 89       	ldd	r24, Y+23	; 0x17
    1cf0:	98 8d       	ldd	r25, Y+24	; 0x18
    1cf2:	9c 8f       	std	Y+28, r25	; 0x1c
    1cf4:	8b 8f       	std	Y+27, r24	; 0x1b
    1cf6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cf8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cfa:	01 97       	sbiw	r24, 0x01	; 1
    1cfc:	f1 f7       	brne	.-4      	; 0x1cfa <nokia_lcd_init+0x172>
    1cfe:	9c 8f       	std	Y+28, r25	; 0x1c
    1d00:	8b 8f       	std	Y+27, r24	; 0x1b
    1d02:	85 e2       	ldi	r24, 0x25	; 37
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	25 e2       	ldi	r18, 0x25	; 37
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	f9 01       	movw	r30, r18
    1d0c:	20 81       	ld	r18, Z
    1d0e:	27 7f       	andi	r18, 0xF7	; 247
    1d10:	fc 01       	movw	r30, r24
    1d12:	20 83       	st	Z, r18
    1d14:	80 e0       	ldi	r24, 0x00	; 0
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	ac e8       	ldi	r26, 0x8C	; 140
    1d1a:	b2 e4       	ldi	r27, 0x42	; 66
    1d1c:	8d 83       	std	Y+5, r24	; 0x05
    1d1e:	9e 83       	std	Y+6, r25	; 0x06
    1d20:	af 83       	std	Y+7, r26	; 0x07
    1d22:	b8 87       	std	Y+8, r27	; 0x08
    1d24:	20 e0       	ldi	r18, 0x00	; 0
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	4a e7       	ldi	r20, 0x7A	; 122
    1d2a:	53 e4       	ldi	r21, 0x43	; 67
    1d2c:	6d 81       	ldd	r22, Y+5	; 0x05
    1d2e:	7e 81       	ldd	r23, Y+6	; 0x06
    1d30:	8f 81       	ldd	r24, Y+7	; 0x07
    1d32:	98 85       	ldd	r25, Y+8	; 0x08
    1d34:	0e 94 a0 12 	call	0x2540	; 0x2540 <__mulsf3>
    1d38:	dc 01       	movw	r26, r24
    1d3a:	cb 01       	movw	r24, r22
    1d3c:	89 87       	std	Y+9, r24	; 0x09
    1d3e:	9a 87       	std	Y+10, r25	; 0x0a
    1d40:	ab 87       	std	Y+11, r26	; 0x0b
    1d42:	bc 87       	std	Y+12, r27	; 0x0c
    1d44:	20 e0       	ldi	r18, 0x00	; 0
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	40 e8       	ldi	r20, 0x80	; 128
    1d4a:	5f e3       	ldi	r21, 0x3F	; 63
    1d4c:	69 85       	ldd	r22, Y+9	; 0x09
    1d4e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1d50:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d52:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d54:	0e 94 3c 11 	call	0x2278	; 0x2278 <__cmpsf2>
    1d58:	88 23       	and	r24, r24
    1d5a:	2c f4       	brge	.+10     	; 0x1d66 <nokia_lcd_init+0x1de>
    1d5c:	81 e0       	ldi	r24, 0x01	; 1
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	9e 87       	std	Y+14, r25	; 0x0e
    1d62:	8d 87       	std	Y+13, r24	; 0x0d
    1d64:	3f c0       	rjmp	.+126    	; 0x1de4 <nokia_lcd_init+0x25c>
    1d66:	20 e0       	ldi	r18, 0x00	; 0
    1d68:	3f ef       	ldi	r19, 0xFF	; 255
    1d6a:	4f e7       	ldi	r20, 0x7F	; 127
    1d6c:	57 e4       	ldi	r21, 0x47	; 71
    1d6e:	69 85       	ldd	r22, Y+9	; 0x09
    1d70:	7a 85       	ldd	r23, Y+10	; 0x0a
    1d72:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d74:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d76:	0e 94 9b 12 	call	0x2536	; 0x2536 <__gesf2>
    1d7a:	18 16       	cp	r1, r24
    1d7c:	4c f5       	brge	.+82     	; 0x1dd0 <nokia_lcd_init+0x248>
    1d7e:	20 e0       	ldi	r18, 0x00	; 0
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	40 e2       	ldi	r20, 0x20	; 32
    1d84:	51 e4       	ldi	r21, 0x41	; 65
    1d86:	6d 81       	ldd	r22, Y+5	; 0x05
    1d88:	7e 81       	ldd	r23, Y+6	; 0x06
    1d8a:	8f 81       	ldd	r24, Y+7	; 0x07
    1d8c:	98 85       	ldd	r25, Y+8	; 0x08
    1d8e:	0e 94 a0 12 	call	0x2540	; 0x2540 <__mulsf3>
    1d92:	dc 01       	movw	r26, r24
    1d94:	cb 01       	movw	r24, r22
    1d96:	bc 01       	movw	r22, r24
    1d98:	cd 01       	movw	r24, r26
    1d9a:	0e 94 ba 11 	call	0x2374	; 0x2374 <__fixunssfsi>
    1d9e:	dc 01       	movw	r26, r24
    1da0:	cb 01       	movw	r24, r22
    1da2:	9e 87       	std	Y+14, r25	; 0x0e
    1da4:	8d 87       	std	Y+13, r24	; 0x0d
    1da6:	0f c0       	rjmp	.+30     	; 0x1dc6 <nokia_lcd_init+0x23e>
    1da8:	89 e1       	ldi	r24, 0x19	; 25
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	98 8b       	std	Y+16, r25	; 0x10
    1dae:	8f 87       	std	Y+15, r24	; 0x0f
    1db0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1db2:	98 89       	ldd	r25, Y+16	; 0x10
    1db4:	01 97       	sbiw	r24, 0x01	; 1
    1db6:	f1 f7       	brne	.-4      	; 0x1db4 <nokia_lcd_init+0x22c>
    1db8:	98 8b       	std	Y+16, r25	; 0x10
    1dba:	8f 87       	std	Y+15, r24	; 0x0f
    1dbc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dbe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dc0:	01 97       	sbiw	r24, 0x01	; 1
    1dc2:	9e 87       	std	Y+14, r25	; 0x0e
    1dc4:	8d 87       	std	Y+13, r24	; 0x0d
    1dc6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dc8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dca:	89 2b       	or	r24, r25
    1dcc:	69 f7       	brne	.-38     	; 0x1da8 <nokia_lcd_init+0x220>
    1dce:	14 c0       	rjmp	.+40     	; 0x1df8 <nokia_lcd_init+0x270>
    1dd0:	69 85       	ldd	r22, Y+9	; 0x09
    1dd2:	7a 85       	ldd	r23, Y+10	; 0x0a
    1dd4:	8b 85       	ldd	r24, Y+11	; 0x0b
    1dd6:	9c 85       	ldd	r25, Y+12	; 0x0c
    1dd8:	0e 94 ba 11 	call	0x2374	; 0x2374 <__fixunssfsi>
    1ddc:	dc 01       	movw	r26, r24
    1dde:	cb 01       	movw	r24, r22
    1de0:	9e 87       	std	Y+14, r25	; 0x0e
    1de2:	8d 87       	std	Y+13, r24	; 0x0d
    1de4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1de6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1de8:	9a 8b       	std	Y+18, r25	; 0x12
    1dea:	89 8b       	std	Y+17, r24	; 0x11
    1dec:	89 89       	ldd	r24, Y+17	; 0x11
    1dee:	9a 89       	ldd	r25, Y+18	; 0x12
    1df0:	01 97       	sbiw	r24, 0x01	; 1
    1df2:	f1 f7       	brne	.-4      	; 0x1df0 <nokia_lcd_init+0x268>
    1df4:	9a 8b       	std	Y+18, r25	; 0x12
    1df6:	89 8b       	std	Y+17, r24	; 0x11
    1df8:	85 e2       	ldi	r24, 0x25	; 37
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	25 e2       	ldi	r18, 0x25	; 37
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	f9 01       	movw	r30, r18
    1e02:	20 81       	ld	r18, Z
    1e04:	28 60       	ori	r18, 0x08	; 8
    1e06:	fc 01       	movw	r30, r24
    1e08:	20 83       	st	Z, r18
    1e0a:	85 e2       	ldi	r24, 0x25	; 37
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	25 e2       	ldi	r18, 0x25	; 37
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	f9 01       	movw	r30, r18
    1e14:	20 81       	ld	r18, Z
    1e16:	2e 7f       	andi	r18, 0xFE	; 254
    1e18:	fc 01       	movw	r30, r24
    1e1a:	20 83       	st	Z, r18
    1e1c:	81 e2       	ldi	r24, 0x21	; 33
    1e1e:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <write_cmd>
    1e22:	83 e1       	ldi	r24, 0x13	; 19
    1e24:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <write_cmd>
    1e28:	86 e0       	ldi	r24, 0x06	; 6
    1e2a:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <write_cmd>
    1e2e:	82 ec       	ldi	r24, 0xC2	; 194
    1e30:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <write_cmd>
    1e34:	80 e2       	ldi	r24, 0x20	; 32
    1e36:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <write_cmd>
    1e3a:	89 e0       	ldi	r24, 0x09	; 9
    1e3c:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <write_cmd>
    1e40:	80 e8       	ldi	r24, 0x80	; 128
    1e42:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <write_cmd>
    1e46:	80 e4       	ldi	r24, 0x40	; 64
    1e48:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <write_cmd>
    1e4c:	00 e0       	ldi	r16, 0x00	; 0
    1e4e:	10 e0       	ldi	r17, 0x00	; 0
    1e50:	05 c0       	rjmp	.+10     	; 0x1e5c <nokia_lcd_init+0x2d4>
    1e52:	80 e0       	ldi	r24, 0x00	; 0
    1e54:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <write_data>
    1e58:	0f 5f       	subi	r16, 0xFF	; 255
    1e5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e5c:	08 3f       	cpi	r16, 0xF8	; 248
    1e5e:	f1 e0       	ldi	r31, 0x01	; 1
    1e60:	1f 07       	cpc	r17, r31
    1e62:	b8 f3       	brcs	.-18     	; 0x1e52 <nokia_lcd_init+0x2ca>
    1e64:	88 e0       	ldi	r24, 0x08	; 8
    1e66:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <write_cmd>
    1e6a:	8c e0       	ldi	r24, 0x0C	; 12
    1e6c:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <write_cmd>
    1e70:	00 00       	nop
    1e72:	6c 96       	adiw	r28, 0x1c	; 28
    1e74:	0f b6       	in	r0, 0x3f	; 63
    1e76:	f8 94       	cli
    1e78:	de bf       	out	0x3e, r29	; 62
    1e7a:	0f be       	out	0x3f, r0	; 63
    1e7c:	cd bf       	out	0x3d, r28	; 61
    1e7e:	df 91       	pop	r29
    1e80:	cf 91       	pop	r28
    1e82:	1f 91       	pop	r17
    1e84:	0f 91       	pop	r16
    1e86:	08 95       	ret

00001e88 <nokia_lcd_clear>:
    1e88:	0f 93       	push	r16
    1e8a:	1f 93       	push	r17
    1e8c:	cf 93       	push	r28
    1e8e:	df 93       	push	r29
    1e90:	cd b7       	in	r28, 0x3d	; 61
    1e92:	de b7       	in	r29, 0x3e	; 62
    1e94:	80 e8       	ldi	r24, 0x80	; 128
    1e96:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <write_cmd>
    1e9a:	80 e4       	ldi	r24, 0x40	; 64
    1e9c:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <write_cmd>
    1ea0:	10 92 87 03 	sts	0x0387, r1	; 0x800387 <nokia_lcd+0x1f8>
    1ea4:	10 92 88 03 	sts	0x0388, r1	; 0x800388 <nokia_lcd+0x1f9>
    1ea8:	00 e0       	ldi	r16, 0x00	; 0
    1eaa:	10 e0       	ldi	r17, 0x00	; 0
    1eac:	07 c0       	rjmp	.+14     	; 0x1ebc <nokia_lcd_clear+0x34>
    1eae:	c8 01       	movw	r24, r16
    1eb0:	81 57       	subi	r24, 0x71	; 113
    1eb2:	9e 4f       	sbci	r25, 0xFE	; 254
    1eb4:	fc 01       	movw	r30, r24
    1eb6:	10 82       	st	Z, r1
    1eb8:	0f 5f       	subi	r16, 0xFF	; 255
    1eba:	1f 4f       	sbci	r17, 0xFF	; 255
    1ebc:	08 3f       	cpi	r16, 0xF8	; 248
    1ebe:	f1 e0       	ldi	r31, 0x01	; 1
    1ec0:	1f 07       	cpc	r17, r31
    1ec2:	a8 f3       	brcs	.-22     	; 0x1eae <nokia_lcd_clear+0x26>
    1ec4:	00 00       	nop
    1ec6:	df 91       	pop	r29
    1ec8:	cf 91       	pop	r28
    1eca:	1f 91       	pop	r17
    1ecc:	0f 91       	pop	r16
    1ece:	08 95       	ret

00001ed0 <nokia_lcd_set_pixel>:

void nokia_lcd_set_pixel(uint8_t x, uint8_t y, uint8_t value)
{
    1ed0:	cf 93       	push	r28
    1ed2:	df 93       	push	r29
    1ed4:	00 d0       	rcall	.+0      	; 0x1ed6 <nokia_lcd_set_pixel+0x6>
    1ed6:	00 d0       	rcall	.+0      	; 0x1ed8 <nokia_lcd_set_pixel+0x8>
    1ed8:	1f 92       	push	r1
    1eda:	cd b7       	in	r28, 0x3d	; 61
    1edc:	de b7       	in	r29, 0x3e	; 62
    1ede:	8b 83       	std	Y+3, r24	; 0x03
    1ee0:	6c 83       	std	Y+4, r22	; 0x04
    1ee2:	4d 83       	std	Y+5, r20	; 0x05
	uint8_t *byte = &nokia_lcd.screen[y/8*84+x];
    1ee4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ee6:	86 95       	lsr	r24
    1ee8:	86 95       	lsr	r24
    1eea:	86 95       	lsr	r24
    1eec:	88 2f       	mov	r24, r24
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	44 e5       	ldi	r20, 0x54	; 84
    1ef2:	48 9f       	mul	r20, r24
    1ef4:	90 01       	movw	r18, r0
    1ef6:	49 9f       	mul	r20, r25
    1ef8:	30 0d       	add	r19, r0
    1efa:	11 24       	eor	r1, r1
    1efc:	8b 81       	ldd	r24, Y+3	; 0x03
    1efe:	88 2f       	mov	r24, r24
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	82 0f       	add	r24, r18
    1f04:	93 1f       	adc	r25, r19
    1f06:	81 57       	subi	r24, 0x71	; 113
    1f08:	9e 4f       	sbci	r25, 0xFE	; 254
    1f0a:	9a 83       	std	Y+2, r25	; 0x02
    1f0c:	89 83       	std	Y+1, r24	; 0x01
	if (value)
    1f0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f10:	88 23       	and	r24, r24
    1f12:	c9 f0       	breq	.+50     	; 0x1f46 <nokia_lcd_set_pixel+0x76>
		*byte |= (1 << (y % 8));
    1f14:	89 81       	ldd	r24, Y+1	; 0x01
    1f16:	9a 81       	ldd	r25, Y+2	; 0x02
    1f18:	fc 01       	movw	r30, r24
    1f1a:	80 81       	ld	r24, Z
    1f1c:	48 2f       	mov	r20, r24
    1f1e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f20:	88 2f       	mov	r24, r24
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	9c 01       	movw	r18, r24
    1f26:	27 70       	andi	r18, 0x07	; 7
    1f28:	33 27       	eor	r19, r19
    1f2a:	81 e0       	ldi	r24, 0x01	; 1
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	02 c0       	rjmp	.+4      	; 0x1f34 <nokia_lcd_set_pixel+0x64>
    1f30:	88 0f       	add	r24, r24
    1f32:	99 1f       	adc	r25, r25
    1f34:	2a 95       	dec	r18
    1f36:	e2 f7       	brpl	.-8      	; 0x1f30 <nokia_lcd_set_pixel+0x60>
    1f38:	84 2b       	or	r24, r20
    1f3a:	28 2f       	mov	r18, r24
    1f3c:	89 81       	ldd	r24, Y+1	; 0x01
    1f3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f40:	fc 01       	movw	r30, r24
    1f42:	20 83       	st	Z, r18
	else
		*byte &= ~(1 << (y %8 ));
}
    1f44:	19 c0       	rjmp	.+50     	; 0x1f78 <nokia_lcd_set_pixel+0xa8>
{
	uint8_t *byte = &nokia_lcd.screen[y/8*84+x];
	if (value)
		*byte |= (1 << (y % 8));
	else
		*byte &= ~(1 << (y %8 ));
    1f46:	89 81       	ldd	r24, Y+1	; 0x01
    1f48:	9a 81       	ldd	r25, Y+2	; 0x02
    1f4a:	fc 01       	movw	r30, r24
    1f4c:	80 81       	ld	r24, Z
    1f4e:	48 2f       	mov	r20, r24
    1f50:	8c 81       	ldd	r24, Y+4	; 0x04
    1f52:	88 2f       	mov	r24, r24
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	9c 01       	movw	r18, r24
    1f58:	27 70       	andi	r18, 0x07	; 7
    1f5a:	33 27       	eor	r19, r19
    1f5c:	81 e0       	ldi	r24, 0x01	; 1
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	02 c0       	rjmp	.+4      	; 0x1f66 <nokia_lcd_set_pixel+0x96>
    1f62:	88 0f       	add	r24, r24
    1f64:	99 1f       	adc	r25, r25
    1f66:	2a 95       	dec	r18
    1f68:	e2 f7       	brpl	.-8      	; 0x1f62 <nokia_lcd_set_pixel+0x92>
    1f6a:	80 95       	com	r24
    1f6c:	84 23       	and	r24, r20
    1f6e:	28 2f       	mov	r18, r24
    1f70:	89 81       	ldd	r24, Y+1	; 0x01
    1f72:	9a 81       	ldd	r25, Y+2	; 0x02
    1f74:	fc 01       	movw	r30, r24
    1f76:	20 83       	st	Z, r18
}
    1f78:	00 00       	nop
    1f7a:	0f 90       	pop	r0
    1f7c:	0f 90       	pop	r0
    1f7e:	0f 90       	pop	r0
    1f80:	0f 90       	pop	r0
    1f82:	0f 90       	pop	r0
    1f84:	df 91       	pop	r29
    1f86:	cf 91       	pop	r28
    1f88:	08 95       	ret

00001f8a <nokia_lcd_write_char>:

void nokia_lcd_write_char(char code, uint8_t scale)
{
    1f8a:	0f 93       	push	r16
    1f8c:	1f 93       	push	r17
    1f8e:	cf 93       	push	r28
    1f90:	df 93       	push	r29
    1f92:	00 d0       	rcall	.+0      	; 0x1f94 <nokia_lcd_write_char+0xa>
    1f94:	00 d0       	rcall	.+0      	; 0x1f96 <nokia_lcd_write_char+0xc>
    1f96:	1f 92       	push	r1
    1f98:	cd b7       	in	r28, 0x3d	; 61
    1f9a:	de b7       	in	r29, 0x3e	; 62
    1f9c:	8c 83       	std	Y+4, r24	; 0x04
    1f9e:	6d 83       	std	Y+5, r22	; 0x05
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
    1fa0:	10 e0       	ldi	r17, 0x00	; 0
    1fa2:	65 c0       	rjmp	.+202    	; 0x206e <nokia_lcd_write_char+0xe4>
		for (y = 0; y < 7*scale; y++)
    1fa4:	00 e0       	ldi	r16, 0x00	; 0
    1fa6:	4e c0       	rjmp	.+156    	; 0x2044 <nokia_lcd_write_char+0xba>
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
    1fa8:	8c 81       	ldd	r24, Y+4	; 0x04
    1faa:	88 2f       	mov	r24, r24
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	9c 01       	movw	r18, r24
    1fb0:	20 52       	subi	r18, 0x20	; 32
    1fb2:	31 09       	sbc	r19, r1
    1fb4:	9d 81       	ldd	r25, Y+5	; 0x05
    1fb6:	81 2f       	mov	r24, r17
    1fb8:	69 2f       	mov	r22, r25
    1fba:	0e 94 0d 13 	call	0x261a	; 0x261a <__udivmodqi4>
    1fbe:	48 2f       	mov	r20, r24
    1fc0:	50 e0       	ldi	r21, 0x00	; 0
    1fc2:	c9 01       	movw	r24, r18
    1fc4:	88 0f       	add	r24, r24
    1fc6:	99 1f       	adc	r25, r25
    1fc8:	88 0f       	add	r24, r24
    1fca:	99 1f       	adc	r25, r25
    1fcc:	82 0f       	add	r24, r18
    1fce:	93 1f       	adc	r25, r19
    1fd0:	84 0f       	add	r24, r20
    1fd2:	95 1f       	adc	r25, r21
    1fd4:	88 59       	subi	r24, 0x98	; 152
    1fd6:	9f 4f       	sbci	r25, 0xFF	; 255
    1fd8:	9a 83       	std	Y+2, r25	; 0x02
    1fda:	89 83       	std	Y+1, r24	; 0x01
    1fdc:	89 81       	ldd	r24, Y+1	; 0x01
    1fde:	9a 81       	ldd	r25, Y+2	; 0x02
    1fe0:	fc 01       	movw	r30, r24
    1fe2:	84 91       	lpm	r24, Z
    1fe4:	8b 83       	std	Y+3, r24	; 0x03
    1fe6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe8:	28 2f       	mov	r18, r24
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	9d 81       	ldd	r25, Y+5	; 0x05
    1fee:	80 2f       	mov	r24, r16
    1ff0:	69 2f       	mov	r22, r25
    1ff2:	0e 94 0d 13 	call	0x261a	; 0x261a <__udivmodqi4>
    1ff6:	88 2f       	mov	r24, r24
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	a9 01       	movw	r20, r18
    1ffc:	02 c0       	rjmp	.+4      	; 0x2002 <nokia_lcd_write_char+0x78>
    1ffe:	55 95       	asr	r21
    2000:	47 95       	ror	r20
    2002:	8a 95       	dec	r24
    2004:	e2 f7       	brpl	.-8      	; 0x1ffe <nokia_lcd_write_char+0x74>
    2006:	ca 01       	movw	r24, r20
    2008:	81 70       	andi	r24, 0x01	; 1
    200a:	99 27       	eor	r25, r25
    200c:	89 2b       	or	r24, r25
    200e:	61 f0       	breq	.+24     	; 0x2028 <nokia_lcd_write_char+0x9e>
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
    2010:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <nokia_lcd+0x1f9>
    2014:	98 2f       	mov	r25, r24
    2016:	90 0f       	add	r25, r16
    2018:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <nokia_lcd+0x1f8>
    201c:	81 0f       	add	r24, r17
    201e:	41 e0       	ldi	r20, 0x01	; 1
    2020:	69 2f       	mov	r22, r25
    2022:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <nokia_lcd_set_pixel>
    2026:	0b c0       	rjmp	.+22     	; 0x203e <nokia_lcd_write_char+0xb4>
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);
    2028:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <nokia_lcd+0x1f9>
    202c:	98 2f       	mov	r25, r24
    202e:	90 0f       	add	r25, r16
    2030:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <nokia_lcd+0x1f8>
    2034:	81 0f       	add	r24, r17
    2036:	40 e0       	ldi	r20, 0x00	; 0
    2038:	69 2f       	mov	r22, r25
    203a:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <nokia_lcd_set_pixel>
void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
		for (y = 0; y < 7*scale; y++)
    203e:	80 2f       	mov	r24, r16
    2040:	01 e0       	ldi	r16, 0x01	; 1
    2042:	08 0f       	add	r16, r24
    2044:	40 2f       	mov	r20, r16
    2046:	50 e0       	ldi	r21, 0x00	; 0
    2048:	8d 81       	ldd	r24, Y+5	; 0x05
    204a:	28 2f       	mov	r18, r24
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	c9 01       	movw	r24, r18
    2050:	88 0f       	add	r24, r24
    2052:	99 1f       	adc	r25, r25
    2054:	88 0f       	add	r24, r24
    2056:	99 1f       	adc	r25, r25
    2058:	88 0f       	add	r24, r24
    205a:	99 1f       	adc	r25, r25
    205c:	82 1b       	sub	r24, r18
    205e:	93 0b       	sbc	r25, r19
    2060:	48 17       	cp	r20, r24
    2062:	59 07       	cpc	r21, r25
    2064:	0c f4       	brge	.+2      	; 0x2068 <nokia_lcd_write_char+0xde>
    2066:	a0 cf       	rjmp	.-192    	; 0x1fa8 <nokia_lcd_write_char+0x1e>

void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
    2068:	81 2f       	mov	r24, r17
    206a:	11 e0       	ldi	r17, 0x01	; 1
    206c:	18 0f       	add	r17, r24
    206e:	41 2f       	mov	r20, r17
    2070:	50 e0       	ldi	r21, 0x00	; 0
    2072:	8d 81       	ldd	r24, Y+5	; 0x05
    2074:	28 2f       	mov	r18, r24
    2076:	30 e0       	ldi	r19, 0x00	; 0
    2078:	c9 01       	movw	r24, r18
    207a:	88 0f       	add	r24, r24
    207c:	99 1f       	adc	r25, r25
    207e:	88 0f       	add	r24, r24
    2080:	99 1f       	adc	r25, r25
    2082:	82 0f       	add	r24, r18
    2084:	93 1f       	adc	r25, r19
    2086:	48 17       	cp	r20, r24
    2088:	59 07       	cpc	r21, r25
    208a:	0c f4       	brge	.+2      	; 0x208e <nokia_lcd_write_char+0x104>
    208c:	8b cf       	rjmp	.-234    	; 0x1fa4 <nokia_lcd_write_char+0x1a>
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);

	nokia_lcd.cursor_x += 5*scale + 1;
    208e:	20 91 87 03 	lds	r18, 0x0387	; 0x800387 <nokia_lcd+0x1f8>
    2092:	9d 81       	ldd	r25, Y+5	; 0x05
    2094:	89 2f       	mov	r24, r25
    2096:	88 0f       	add	r24, r24
    2098:	88 0f       	add	r24, r24
    209a:	89 0f       	add	r24, r25
    209c:	82 0f       	add	r24, r18
    209e:	8f 5f       	subi	r24, 0xFF	; 255
    20a0:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <nokia_lcd+0x1f8>
	if (nokia_lcd.cursor_x >= 84) {
    20a4:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <nokia_lcd+0x1f8>
    20a8:	84 35       	cpi	r24, 0x54	; 84
    20aa:	70 f0       	brcs	.+28     	; 0x20c8 <nokia_lcd_write_char+0x13e>
		nokia_lcd.cursor_x = 0;
    20ac:	10 92 87 03 	sts	0x0387, r1	; 0x800387 <nokia_lcd+0x1f8>
		nokia_lcd.cursor_y += 7*scale + 1;
    20b0:	20 91 88 03 	lds	r18, 0x0388	; 0x800388 <nokia_lcd+0x1f9>
    20b4:	9d 81       	ldd	r25, Y+5	; 0x05
    20b6:	89 2f       	mov	r24, r25
    20b8:	88 0f       	add	r24, r24
    20ba:	88 0f       	add	r24, r24
    20bc:	88 0f       	add	r24, r24
    20be:	89 1b       	sub	r24, r25
    20c0:	82 0f       	add	r24, r18
    20c2:	8f 5f       	subi	r24, 0xFF	; 255
    20c4:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <nokia_lcd+0x1f9>
	}
	if (nokia_lcd.cursor_y >= 48) {
    20c8:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <nokia_lcd+0x1f9>
    20cc:	80 33       	cpi	r24, 0x30	; 48
    20ce:	20 f0       	brcs	.+8      	; 0x20d8 <nokia_lcd_write_char+0x14e>
		nokia_lcd.cursor_x = 0;
    20d0:	10 92 87 03 	sts	0x0387, r1	; 0x800387 <nokia_lcd+0x1f8>
		nokia_lcd.cursor_y = 0;
    20d4:	10 92 88 03 	sts	0x0388, r1	; 0x800388 <nokia_lcd+0x1f9>
	}
}
    20d8:	00 00       	nop
    20da:	0f 90       	pop	r0
    20dc:	0f 90       	pop	r0
    20de:	0f 90       	pop	r0
    20e0:	0f 90       	pop	r0
    20e2:	0f 90       	pop	r0
    20e4:	df 91       	pop	r29
    20e6:	cf 91       	pop	r28
    20e8:	1f 91       	pop	r17
    20ea:	0f 91       	pop	r16
    20ec:	08 95       	ret

000020ee <nokia_lcd_write_string>:

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
    20ee:	cf 93       	push	r28
    20f0:	df 93       	push	r29
    20f2:	00 d0       	rcall	.+0      	; 0x20f4 <nokia_lcd_write_string+0x6>
    20f4:	1f 92       	push	r1
    20f6:	cd b7       	in	r28, 0x3d	; 61
    20f8:	de b7       	in	r29, 0x3e	; 62
    20fa:	9a 83       	std	Y+2, r25	; 0x02
    20fc:	89 83       	std	Y+1, r24	; 0x01
    20fe:	6b 83       	std	Y+3, r22	; 0x03
	while(*str)
    2100:	0c c0       	rjmp	.+24     	; 0x211a <nokia_lcd_write_string+0x2c>
		nokia_lcd_write_char(*str++, scale);
    2102:	89 81       	ldd	r24, Y+1	; 0x01
    2104:	9a 81       	ldd	r25, Y+2	; 0x02
    2106:	9c 01       	movw	r18, r24
    2108:	2f 5f       	subi	r18, 0xFF	; 255
    210a:	3f 4f       	sbci	r19, 0xFF	; 255
    210c:	3a 83       	std	Y+2, r19	; 0x02
    210e:	29 83       	std	Y+1, r18	; 0x01
    2110:	fc 01       	movw	r30, r24
    2112:	80 81       	ld	r24, Z
    2114:	6b 81       	ldd	r22, Y+3	; 0x03
    2116:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <nokia_lcd_write_char>
	}
}

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
	while(*str)
    211a:	89 81       	ldd	r24, Y+1	; 0x01
    211c:	9a 81       	ldd	r25, Y+2	; 0x02
    211e:	fc 01       	movw	r30, r24
    2120:	80 81       	ld	r24, Z
    2122:	88 23       	and	r24, r24
    2124:	71 f7       	brne	.-36     	; 0x2102 <nokia_lcd_write_string+0x14>
		nokia_lcd_write_char(*str++, scale);
}
    2126:	00 00       	nop
    2128:	0f 90       	pop	r0
    212a:	0f 90       	pop	r0
    212c:	0f 90       	pop	r0
    212e:	df 91       	pop	r29
    2130:	cf 91       	pop	r28
    2132:	08 95       	ret

00002134 <nokia_lcd_set_cursor>:

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
    2134:	cf 93       	push	r28
    2136:	df 93       	push	r29
    2138:	00 d0       	rcall	.+0      	; 0x213a <nokia_lcd_set_cursor+0x6>
    213a:	cd b7       	in	r28, 0x3d	; 61
    213c:	de b7       	in	r29, 0x3e	; 62
    213e:	89 83       	std	Y+1, r24	; 0x01
    2140:	6a 83       	std	Y+2, r22	; 0x02
	nokia_lcd.cursor_x = x;
    2142:	89 81       	ldd	r24, Y+1	; 0x01
    2144:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <nokia_lcd+0x1f8>
	nokia_lcd.cursor_y = y;
    2148:	8a 81       	ldd	r24, Y+2	; 0x02
    214a:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <nokia_lcd+0x1f9>
}
    214e:	00 00       	nop
    2150:	0f 90       	pop	r0
    2152:	0f 90       	pop	r0
    2154:	df 91       	pop	r29
    2156:	cf 91       	pop	r28
    2158:	08 95       	ret

0000215a <nokia_lcd_render>:

void nokia_lcd_render(void)
{
    215a:	0f 93       	push	r16
    215c:	1f 93       	push	r17
    215e:	cf 93       	push	r28
    2160:	df 93       	push	r29
    2162:	cd b7       	in	r28, 0x3d	; 61
    2164:	de b7       	in	r29, 0x3e	; 62
	register unsigned i;
	/* Set column and row to 0 */
	write_cmd(0x80);
    2166:	80 e8       	ldi	r24, 0x80	; 128
    2168:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <write_cmd>
	write_cmd(0x40);
    216c:	80 e4       	ldi	r24, 0x40	; 64
    216e:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <write_cmd>

	/* Write screen to display */
	for (i = 0; i < 504; i++)
    2172:	00 e0       	ldi	r16, 0x00	; 0
    2174:	10 e0       	ldi	r17, 0x00	; 0
    2176:	09 c0       	rjmp	.+18     	; 0x218a <nokia_lcd_render+0x30>
		write_data(nokia_lcd.screen[i]);
    2178:	c8 01       	movw	r24, r16
    217a:	81 57       	subi	r24, 0x71	; 113
    217c:	9e 4f       	sbci	r25, 0xFE	; 254
    217e:	fc 01       	movw	r30, r24
    2180:	80 81       	ld	r24, Z
    2182:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <write_data>
	/* Set column and row to 0 */
	write_cmd(0x80);
	write_cmd(0x40);

	/* Write screen to display */
	for (i = 0; i < 504; i++)
    2186:	0f 5f       	subi	r16, 0xFF	; 255
    2188:	1f 4f       	sbci	r17, 0xFF	; 255
    218a:	08 3f       	cpi	r16, 0xF8	; 248
    218c:	f1 e0       	ldi	r31, 0x01	; 1
    218e:	1f 07       	cpc	r17, r31
    2190:	98 f3       	brcs	.-26     	; 0x2178 <nokia_lcd_render+0x1e>
		write_data(nokia_lcd.screen[i]);
}
    2192:	00 00       	nop
    2194:	df 91       	pop	r29
    2196:	cf 91       	pop	r28
    2198:	1f 91       	pop	r17
    219a:	0f 91       	pop	r16
    219c:	08 95       	ret

0000219e <__subsf3>:
    219e:	50 58       	subi	r21, 0x80	; 128

000021a0 <__addsf3>:
    21a0:	bb 27       	eor	r27, r27
    21a2:	aa 27       	eor	r26, r26
    21a4:	0e 94 e7 10 	call	0x21ce	; 0x21ce <__addsf3x>
    21a8:	0c 94 61 12 	jmp	0x24c2	; 0x24c2 <__fp_round>
    21ac:	0e 94 53 12 	call	0x24a6	; 0x24a6 <__fp_pscA>
    21b0:	38 f0       	brcs	.+14     	; 0x21c0 <__addsf3+0x20>
    21b2:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <__fp_pscB>
    21b6:	20 f0       	brcs	.+8      	; 0x21c0 <__addsf3+0x20>
    21b8:	39 f4       	brne	.+14     	; 0x21c8 <__addsf3+0x28>
    21ba:	9f 3f       	cpi	r25, 0xFF	; 255
    21bc:	19 f4       	brne	.+6      	; 0x21c4 <__addsf3+0x24>
    21be:	26 f4       	brtc	.+8      	; 0x21c8 <__addsf3+0x28>
    21c0:	0c 94 50 12 	jmp	0x24a0	; 0x24a0 <__fp_nan>
    21c4:	0e f4       	brtc	.+2      	; 0x21c8 <__addsf3+0x28>
    21c6:	e0 95       	com	r30
    21c8:	e7 fb       	bst	r30, 7
    21ca:	0c 94 4a 12 	jmp	0x2494	; 0x2494 <__fp_inf>

000021ce <__addsf3x>:
    21ce:	e9 2f       	mov	r30, r25
    21d0:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__fp_split3>
    21d4:	58 f3       	brcs	.-42     	; 0x21ac <__addsf3+0xc>
    21d6:	ba 17       	cp	r27, r26
    21d8:	62 07       	cpc	r22, r18
    21da:	73 07       	cpc	r23, r19
    21dc:	84 07       	cpc	r24, r20
    21de:	95 07       	cpc	r25, r21
    21e0:	20 f0       	brcs	.+8      	; 0x21ea <__addsf3x+0x1c>
    21e2:	79 f4       	brne	.+30     	; 0x2202 <__addsf3x+0x34>
    21e4:	a6 f5       	brtc	.+104    	; 0x224e <__addsf3x+0x80>
    21e6:	0c 94 94 12 	jmp	0x2528	; 0x2528 <__fp_zero>
    21ea:	0e f4       	brtc	.+2      	; 0x21ee <__addsf3x+0x20>
    21ec:	e0 95       	com	r30
    21ee:	0b 2e       	mov	r0, r27
    21f0:	ba 2f       	mov	r27, r26
    21f2:	a0 2d       	mov	r26, r0
    21f4:	0b 01       	movw	r0, r22
    21f6:	b9 01       	movw	r22, r18
    21f8:	90 01       	movw	r18, r0
    21fa:	0c 01       	movw	r0, r24
    21fc:	ca 01       	movw	r24, r20
    21fe:	a0 01       	movw	r20, r0
    2200:	11 24       	eor	r1, r1
    2202:	ff 27       	eor	r31, r31
    2204:	59 1b       	sub	r21, r25
    2206:	99 f0       	breq	.+38     	; 0x222e <__addsf3x+0x60>
    2208:	59 3f       	cpi	r21, 0xF9	; 249
    220a:	50 f4       	brcc	.+20     	; 0x2220 <__addsf3x+0x52>
    220c:	50 3e       	cpi	r21, 0xE0	; 224
    220e:	68 f1       	brcs	.+90     	; 0x226a <__addsf3x+0x9c>
    2210:	1a 16       	cp	r1, r26
    2212:	f0 40       	sbci	r31, 0x00	; 0
    2214:	a2 2f       	mov	r26, r18
    2216:	23 2f       	mov	r18, r19
    2218:	34 2f       	mov	r19, r20
    221a:	44 27       	eor	r20, r20
    221c:	58 5f       	subi	r21, 0xF8	; 248
    221e:	f3 cf       	rjmp	.-26     	; 0x2206 <__addsf3x+0x38>
    2220:	46 95       	lsr	r20
    2222:	37 95       	ror	r19
    2224:	27 95       	ror	r18
    2226:	a7 95       	ror	r26
    2228:	f0 40       	sbci	r31, 0x00	; 0
    222a:	53 95       	inc	r21
    222c:	c9 f7       	brne	.-14     	; 0x2220 <__addsf3x+0x52>
    222e:	7e f4       	brtc	.+30     	; 0x224e <__addsf3x+0x80>
    2230:	1f 16       	cp	r1, r31
    2232:	ba 0b       	sbc	r27, r26
    2234:	62 0b       	sbc	r22, r18
    2236:	73 0b       	sbc	r23, r19
    2238:	84 0b       	sbc	r24, r20
    223a:	ba f0       	brmi	.+46     	; 0x226a <__addsf3x+0x9c>
    223c:	91 50       	subi	r25, 0x01	; 1
    223e:	a1 f0       	breq	.+40     	; 0x2268 <__addsf3x+0x9a>
    2240:	ff 0f       	add	r31, r31
    2242:	bb 1f       	adc	r27, r27
    2244:	66 1f       	adc	r22, r22
    2246:	77 1f       	adc	r23, r23
    2248:	88 1f       	adc	r24, r24
    224a:	c2 f7       	brpl	.-16     	; 0x223c <__addsf3x+0x6e>
    224c:	0e c0       	rjmp	.+28     	; 0x226a <__addsf3x+0x9c>
    224e:	ba 0f       	add	r27, r26
    2250:	62 1f       	adc	r22, r18
    2252:	73 1f       	adc	r23, r19
    2254:	84 1f       	adc	r24, r20
    2256:	48 f4       	brcc	.+18     	; 0x226a <__addsf3x+0x9c>
    2258:	87 95       	ror	r24
    225a:	77 95       	ror	r23
    225c:	67 95       	ror	r22
    225e:	b7 95       	ror	r27
    2260:	f7 95       	ror	r31
    2262:	9e 3f       	cpi	r25, 0xFE	; 254
    2264:	08 f0       	brcs	.+2      	; 0x2268 <__addsf3x+0x9a>
    2266:	b0 cf       	rjmp	.-160    	; 0x21c8 <__addsf3+0x28>
    2268:	93 95       	inc	r25
    226a:	88 0f       	add	r24, r24
    226c:	08 f0       	brcs	.+2      	; 0x2270 <__addsf3x+0xa2>
    226e:	99 27       	eor	r25, r25
    2270:	ee 0f       	add	r30, r30
    2272:	97 95       	ror	r25
    2274:	87 95       	ror	r24
    2276:	08 95       	ret

00002278 <__cmpsf2>:
    2278:	0e 94 26 12 	call	0x244c	; 0x244c <__fp_cmp>
    227c:	08 f4       	brcc	.+2      	; 0x2280 <__cmpsf2+0x8>
    227e:	81 e0       	ldi	r24, 0x01	; 1
    2280:	08 95       	ret

00002282 <__divsf3>:
    2282:	0e 94 55 11 	call	0x22aa	; 0x22aa <__divsf3x>
    2286:	0c 94 61 12 	jmp	0x24c2	; 0x24c2 <__fp_round>
    228a:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <__fp_pscB>
    228e:	58 f0       	brcs	.+22     	; 0x22a6 <__divsf3+0x24>
    2290:	0e 94 53 12 	call	0x24a6	; 0x24a6 <__fp_pscA>
    2294:	40 f0       	brcs	.+16     	; 0x22a6 <__divsf3+0x24>
    2296:	29 f4       	brne	.+10     	; 0x22a2 <__divsf3+0x20>
    2298:	5f 3f       	cpi	r21, 0xFF	; 255
    229a:	29 f0       	breq	.+10     	; 0x22a6 <__divsf3+0x24>
    229c:	0c 94 4a 12 	jmp	0x2494	; 0x2494 <__fp_inf>
    22a0:	51 11       	cpse	r21, r1
    22a2:	0c 94 95 12 	jmp	0x252a	; 0x252a <__fp_szero>
    22a6:	0c 94 50 12 	jmp	0x24a0	; 0x24a0 <__fp_nan>

000022aa <__divsf3x>:
    22aa:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__fp_split3>
    22ae:	68 f3       	brcs	.-38     	; 0x228a <__divsf3+0x8>

000022b0 <__divsf3_pse>:
    22b0:	99 23       	and	r25, r25
    22b2:	b1 f3       	breq	.-20     	; 0x22a0 <__divsf3+0x1e>
    22b4:	55 23       	and	r21, r21
    22b6:	91 f3       	breq	.-28     	; 0x229c <__divsf3+0x1a>
    22b8:	95 1b       	sub	r25, r21
    22ba:	55 0b       	sbc	r21, r21
    22bc:	bb 27       	eor	r27, r27
    22be:	aa 27       	eor	r26, r26
    22c0:	62 17       	cp	r22, r18
    22c2:	73 07       	cpc	r23, r19
    22c4:	84 07       	cpc	r24, r20
    22c6:	38 f0       	brcs	.+14     	; 0x22d6 <__divsf3_pse+0x26>
    22c8:	9f 5f       	subi	r25, 0xFF	; 255
    22ca:	5f 4f       	sbci	r21, 0xFF	; 255
    22cc:	22 0f       	add	r18, r18
    22ce:	33 1f       	adc	r19, r19
    22d0:	44 1f       	adc	r20, r20
    22d2:	aa 1f       	adc	r26, r26
    22d4:	a9 f3       	breq	.-22     	; 0x22c0 <__divsf3_pse+0x10>
    22d6:	35 d0       	rcall	.+106    	; 0x2342 <__divsf3_pse+0x92>
    22d8:	0e 2e       	mov	r0, r30
    22da:	3a f0       	brmi	.+14     	; 0x22ea <__divsf3_pse+0x3a>
    22dc:	e0 e8       	ldi	r30, 0x80	; 128
    22de:	32 d0       	rcall	.+100    	; 0x2344 <__divsf3_pse+0x94>
    22e0:	91 50       	subi	r25, 0x01	; 1
    22e2:	50 40       	sbci	r21, 0x00	; 0
    22e4:	e6 95       	lsr	r30
    22e6:	00 1c       	adc	r0, r0
    22e8:	ca f7       	brpl	.-14     	; 0x22dc <__divsf3_pse+0x2c>
    22ea:	2b d0       	rcall	.+86     	; 0x2342 <__divsf3_pse+0x92>
    22ec:	fe 2f       	mov	r31, r30
    22ee:	29 d0       	rcall	.+82     	; 0x2342 <__divsf3_pse+0x92>
    22f0:	66 0f       	add	r22, r22
    22f2:	77 1f       	adc	r23, r23
    22f4:	88 1f       	adc	r24, r24
    22f6:	bb 1f       	adc	r27, r27
    22f8:	26 17       	cp	r18, r22
    22fa:	37 07       	cpc	r19, r23
    22fc:	48 07       	cpc	r20, r24
    22fe:	ab 07       	cpc	r26, r27
    2300:	b0 e8       	ldi	r27, 0x80	; 128
    2302:	09 f0       	breq	.+2      	; 0x2306 <__divsf3_pse+0x56>
    2304:	bb 0b       	sbc	r27, r27
    2306:	80 2d       	mov	r24, r0
    2308:	bf 01       	movw	r22, r30
    230a:	ff 27       	eor	r31, r31
    230c:	93 58       	subi	r25, 0x83	; 131
    230e:	5f 4f       	sbci	r21, 0xFF	; 255
    2310:	3a f0       	brmi	.+14     	; 0x2320 <__divsf3_pse+0x70>
    2312:	9e 3f       	cpi	r25, 0xFE	; 254
    2314:	51 05       	cpc	r21, r1
    2316:	78 f0       	brcs	.+30     	; 0x2336 <__divsf3_pse+0x86>
    2318:	0c 94 4a 12 	jmp	0x2494	; 0x2494 <__fp_inf>
    231c:	0c 94 95 12 	jmp	0x252a	; 0x252a <__fp_szero>
    2320:	5f 3f       	cpi	r21, 0xFF	; 255
    2322:	e4 f3       	brlt	.-8      	; 0x231c <__divsf3_pse+0x6c>
    2324:	98 3e       	cpi	r25, 0xE8	; 232
    2326:	d4 f3       	brlt	.-12     	; 0x231c <__divsf3_pse+0x6c>
    2328:	86 95       	lsr	r24
    232a:	77 95       	ror	r23
    232c:	67 95       	ror	r22
    232e:	b7 95       	ror	r27
    2330:	f7 95       	ror	r31
    2332:	9f 5f       	subi	r25, 0xFF	; 255
    2334:	c9 f7       	brne	.-14     	; 0x2328 <__divsf3_pse+0x78>
    2336:	88 0f       	add	r24, r24
    2338:	91 1d       	adc	r25, r1
    233a:	96 95       	lsr	r25
    233c:	87 95       	ror	r24
    233e:	97 f9       	bld	r25, 7
    2340:	08 95       	ret
    2342:	e1 e0       	ldi	r30, 0x01	; 1
    2344:	66 0f       	add	r22, r22
    2346:	77 1f       	adc	r23, r23
    2348:	88 1f       	adc	r24, r24
    234a:	bb 1f       	adc	r27, r27
    234c:	62 17       	cp	r22, r18
    234e:	73 07       	cpc	r23, r19
    2350:	84 07       	cpc	r24, r20
    2352:	ba 07       	cpc	r27, r26
    2354:	20 f0       	brcs	.+8      	; 0x235e <__divsf3_pse+0xae>
    2356:	62 1b       	sub	r22, r18
    2358:	73 0b       	sbc	r23, r19
    235a:	84 0b       	sbc	r24, r20
    235c:	ba 0b       	sbc	r27, r26
    235e:	ee 1f       	adc	r30, r30
    2360:	88 f7       	brcc	.-30     	; 0x2344 <__divsf3_pse+0x94>
    2362:	e0 95       	com	r30
    2364:	08 95       	ret

00002366 <__fixsfsi>:
    2366:	0e 94 ba 11 	call	0x2374	; 0x2374 <__fixunssfsi>
    236a:	68 94       	set
    236c:	b1 11       	cpse	r27, r1
    236e:	0c 94 95 12 	jmp	0x252a	; 0x252a <__fp_szero>
    2372:	08 95       	ret

00002374 <__fixunssfsi>:
    2374:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <__fp_splitA>
    2378:	88 f0       	brcs	.+34     	; 0x239c <__fixunssfsi+0x28>
    237a:	9f 57       	subi	r25, 0x7F	; 127
    237c:	98 f0       	brcs	.+38     	; 0x23a4 <__fixunssfsi+0x30>
    237e:	b9 2f       	mov	r27, r25
    2380:	99 27       	eor	r25, r25
    2382:	b7 51       	subi	r27, 0x17	; 23
    2384:	b0 f0       	brcs	.+44     	; 0x23b2 <__fixunssfsi+0x3e>
    2386:	e1 f0       	breq	.+56     	; 0x23c0 <__fixunssfsi+0x4c>
    2388:	66 0f       	add	r22, r22
    238a:	77 1f       	adc	r23, r23
    238c:	88 1f       	adc	r24, r24
    238e:	99 1f       	adc	r25, r25
    2390:	1a f0       	brmi	.+6      	; 0x2398 <__fixunssfsi+0x24>
    2392:	ba 95       	dec	r27
    2394:	c9 f7       	brne	.-14     	; 0x2388 <__fixunssfsi+0x14>
    2396:	14 c0       	rjmp	.+40     	; 0x23c0 <__fixunssfsi+0x4c>
    2398:	b1 30       	cpi	r27, 0x01	; 1
    239a:	91 f0       	breq	.+36     	; 0x23c0 <__fixunssfsi+0x4c>
    239c:	0e 94 94 12 	call	0x2528	; 0x2528 <__fp_zero>
    23a0:	b1 e0       	ldi	r27, 0x01	; 1
    23a2:	08 95       	ret
    23a4:	0c 94 94 12 	jmp	0x2528	; 0x2528 <__fp_zero>
    23a8:	67 2f       	mov	r22, r23
    23aa:	78 2f       	mov	r23, r24
    23ac:	88 27       	eor	r24, r24
    23ae:	b8 5f       	subi	r27, 0xF8	; 248
    23b0:	39 f0       	breq	.+14     	; 0x23c0 <__fixunssfsi+0x4c>
    23b2:	b9 3f       	cpi	r27, 0xF9	; 249
    23b4:	cc f3       	brlt	.-14     	; 0x23a8 <__fixunssfsi+0x34>
    23b6:	86 95       	lsr	r24
    23b8:	77 95       	ror	r23
    23ba:	67 95       	ror	r22
    23bc:	b3 95       	inc	r27
    23be:	d9 f7       	brne	.-10     	; 0x23b6 <__fixunssfsi+0x42>
    23c0:	3e f4       	brtc	.+14     	; 0x23d0 <__fixunssfsi+0x5c>
    23c2:	90 95       	com	r25
    23c4:	80 95       	com	r24
    23c6:	70 95       	com	r23
    23c8:	61 95       	neg	r22
    23ca:	7f 4f       	sbci	r23, 0xFF	; 255
    23cc:	8f 4f       	sbci	r24, 0xFF	; 255
    23ce:	9f 4f       	sbci	r25, 0xFF	; 255
    23d0:	08 95       	ret

000023d2 <__floatunsisf>:
    23d2:	e8 94       	clt
    23d4:	09 c0       	rjmp	.+18     	; 0x23e8 <__floatsisf+0x12>

000023d6 <__floatsisf>:
    23d6:	97 fb       	bst	r25, 7
    23d8:	3e f4       	brtc	.+14     	; 0x23e8 <__floatsisf+0x12>
    23da:	90 95       	com	r25
    23dc:	80 95       	com	r24
    23de:	70 95       	com	r23
    23e0:	61 95       	neg	r22
    23e2:	7f 4f       	sbci	r23, 0xFF	; 255
    23e4:	8f 4f       	sbci	r24, 0xFF	; 255
    23e6:	9f 4f       	sbci	r25, 0xFF	; 255
    23e8:	99 23       	and	r25, r25
    23ea:	a9 f0       	breq	.+42     	; 0x2416 <__floatsisf+0x40>
    23ec:	f9 2f       	mov	r31, r25
    23ee:	96 e9       	ldi	r25, 0x96	; 150
    23f0:	bb 27       	eor	r27, r27
    23f2:	93 95       	inc	r25
    23f4:	f6 95       	lsr	r31
    23f6:	87 95       	ror	r24
    23f8:	77 95       	ror	r23
    23fa:	67 95       	ror	r22
    23fc:	b7 95       	ror	r27
    23fe:	f1 11       	cpse	r31, r1
    2400:	f8 cf       	rjmp	.-16     	; 0x23f2 <__floatsisf+0x1c>
    2402:	fa f4       	brpl	.+62     	; 0x2442 <__floatsisf+0x6c>
    2404:	bb 0f       	add	r27, r27
    2406:	11 f4       	brne	.+4      	; 0x240c <__floatsisf+0x36>
    2408:	60 ff       	sbrs	r22, 0
    240a:	1b c0       	rjmp	.+54     	; 0x2442 <__floatsisf+0x6c>
    240c:	6f 5f       	subi	r22, 0xFF	; 255
    240e:	7f 4f       	sbci	r23, 0xFF	; 255
    2410:	8f 4f       	sbci	r24, 0xFF	; 255
    2412:	9f 4f       	sbci	r25, 0xFF	; 255
    2414:	16 c0       	rjmp	.+44     	; 0x2442 <__floatsisf+0x6c>
    2416:	88 23       	and	r24, r24
    2418:	11 f0       	breq	.+4      	; 0x241e <__floatsisf+0x48>
    241a:	96 e9       	ldi	r25, 0x96	; 150
    241c:	11 c0       	rjmp	.+34     	; 0x2440 <__floatsisf+0x6a>
    241e:	77 23       	and	r23, r23
    2420:	21 f0       	breq	.+8      	; 0x242a <__floatsisf+0x54>
    2422:	9e e8       	ldi	r25, 0x8E	; 142
    2424:	87 2f       	mov	r24, r23
    2426:	76 2f       	mov	r23, r22
    2428:	05 c0       	rjmp	.+10     	; 0x2434 <__floatsisf+0x5e>
    242a:	66 23       	and	r22, r22
    242c:	71 f0       	breq	.+28     	; 0x244a <__floatsisf+0x74>
    242e:	96 e8       	ldi	r25, 0x86	; 134
    2430:	86 2f       	mov	r24, r22
    2432:	70 e0       	ldi	r23, 0x00	; 0
    2434:	60 e0       	ldi	r22, 0x00	; 0
    2436:	2a f0       	brmi	.+10     	; 0x2442 <__floatsisf+0x6c>
    2438:	9a 95       	dec	r25
    243a:	66 0f       	add	r22, r22
    243c:	77 1f       	adc	r23, r23
    243e:	88 1f       	adc	r24, r24
    2440:	da f7       	brpl	.-10     	; 0x2438 <__floatsisf+0x62>
    2442:	88 0f       	add	r24, r24
    2444:	96 95       	lsr	r25
    2446:	87 95       	ror	r24
    2448:	97 f9       	bld	r25, 7
    244a:	08 95       	ret

0000244c <__fp_cmp>:
    244c:	99 0f       	add	r25, r25
    244e:	00 08       	sbc	r0, r0
    2450:	55 0f       	add	r21, r21
    2452:	aa 0b       	sbc	r26, r26
    2454:	e0 e8       	ldi	r30, 0x80	; 128
    2456:	fe ef       	ldi	r31, 0xFE	; 254
    2458:	16 16       	cp	r1, r22
    245a:	17 06       	cpc	r1, r23
    245c:	e8 07       	cpc	r30, r24
    245e:	f9 07       	cpc	r31, r25
    2460:	c0 f0       	brcs	.+48     	; 0x2492 <__fp_cmp+0x46>
    2462:	12 16       	cp	r1, r18
    2464:	13 06       	cpc	r1, r19
    2466:	e4 07       	cpc	r30, r20
    2468:	f5 07       	cpc	r31, r21
    246a:	98 f0       	brcs	.+38     	; 0x2492 <__fp_cmp+0x46>
    246c:	62 1b       	sub	r22, r18
    246e:	73 0b       	sbc	r23, r19
    2470:	84 0b       	sbc	r24, r20
    2472:	95 0b       	sbc	r25, r21
    2474:	39 f4       	brne	.+14     	; 0x2484 <__fp_cmp+0x38>
    2476:	0a 26       	eor	r0, r26
    2478:	61 f0       	breq	.+24     	; 0x2492 <__fp_cmp+0x46>
    247a:	23 2b       	or	r18, r19
    247c:	24 2b       	or	r18, r20
    247e:	25 2b       	or	r18, r21
    2480:	21 f4       	brne	.+8      	; 0x248a <__fp_cmp+0x3e>
    2482:	08 95       	ret
    2484:	0a 26       	eor	r0, r26
    2486:	09 f4       	brne	.+2      	; 0x248a <__fp_cmp+0x3e>
    2488:	a1 40       	sbci	r26, 0x01	; 1
    248a:	a6 95       	lsr	r26
    248c:	8f ef       	ldi	r24, 0xFF	; 255
    248e:	81 1d       	adc	r24, r1
    2490:	81 1d       	adc	r24, r1
    2492:	08 95       	ret

00002494 <__fp_inf>:
    2494:	97 f9       	bld	r25, 7
    2496:	9f 67       	ori	r25, 0x7F	; 127
    2498:	80 e8       	ldi	r24, 0x80	; 128
    249a:	70 e0       	ldi	r23, 0x00	; 0
    249c:	60 e0       	ldi	r22, 0x00	; 0
    249e:	08 95       	ret

000024a0 <__fp_nan>:
    24a0:	9f ef       	ldi	r25, 0xFF	; 255
    24a2:	80 ec       	ldi	r24, 0xC0	; 192
    24a4:	08 95       	ret

000024a6 <__fp_pscA>:
    24a6:	00 24       	eor	r0, r0
    24a8:	0a 94       	dec	r0
    24aa:	16 16       	cp	r1, r22
    24ac:	17 06       	cpc	r1, r23
    24ae:	18 06       	cpc	r1, r24
    24b0:	09 06       	cpc	r0, r25
    24b2:	08 95       	ret

000024b4 <__fp_pscB>:
    24b4:	00 24       	eor	r0, r0
    24b6:	0a 94       	dec	r0
    24b8:	12 16       	cp	r1, r18
    24ba:	13 06       	cpc	r1, r19
    24bc:	14 06       	cpc	r1, r20
    24be:	05 06       	cpc	r0, r21
    24c0:	08 95       	ret

000024c2 <__fp_round>:
    24c2:	09 2e       	mov	r0, r25
    24c4:	03 94       	inc	r0
    24c6:	00 0c       	add	r0, r0
    24c8:	11 f4       	brne	.+4      	; 0x24ce <__fp_round+0xc>
    24ca:	88 23       	and	r24, r24
    24cc:	52 f0       	brmi	.+20     	; 0x24e2 <__fp_round+0x20>
    24ce:	bb 0f       	add	r27, r27
    24d0:	40 f4       	brcc	.+16     	; 0x24e2 <__fp_round+0x20>
    24d2:	bf 2b       	or	r27, r31
    24d4:	11 f4       	brne	.+4      	; 0x24da <__fp_round+0x18>
    24d6:	60 ff       	sbrs	r22, 0
    24d8:	04 c0       	rjmp	.+8      	; 0x24e2 <__fp_round+0x20>
    24da:	6f 5f       	subi	r22, 0xFF	; 255
    24dc:	7f 4f       	sbci	r23, 0xFF	; 255
    24de:	8f 4f       	sbci	r24, 0xFF	; 255
    24e0:	9f 4f       	sbci	r25, 0xFF	; 255
    24e2:	08 95       	ret

000024e4 <__fp_split3>:
    24e4:	57 fd       	sbrc	r21, 7
    24e6:	90 58       	subi	r25, 0x80	; 128
    24e8:	44 0f       	add	r20, r20
    24ea:	55 1f       	adc	r21, r21
    24ec:	59 f0       	breq	.+22     	; 0x2504 <__fp_splitA+0x10>
    24ee:	5f 3f       	cpi	r21, 0xFF	; 255
    24f0:	71 f0       	breq	.+28     	; 0x250e <__fp_splitA+0x1a>
    24f2:	47 95       	ror	r20

000024f4 <__fp_splitA>:
    24f4:	88 0f       	add	r24, r24
    24f6:	97 fb       	bst	r25, 7
    24f8:	99 1f       	adc	r25, r25
    24fa:	61 f0       	breq	.+24     	; 0x2514 <__fp_splitA+0x20>
    24fc:	9f 3f       	cpi	r25, 0xFF	; 255
    24fe:	79 f0       	breq	.+30     	; 0x251e <__fp_splitA+0x2a>
    2500:	87 95       	ror	r24
    2502:	08 95       	ret
    2504:	12 16       	cp	r1, r18
    2506:	13 06       	cpc	r1, r19
    2508:	14 06       	cpc	r1, r20
    250a:	55 1f       	adc	r21, r21
    250c:	f2 cf       	rjmp	.-28     	; 0x24f2 <__fp_split3+0xe>
    250e:	46 95       	lsr	r20
    2510:	f1 df       	rcall	.-30     	; 0x24f4 <__fp_splitA>
    2512:	08 c0       	rjmp	.+16     	; 0x2524 <__fp_splitA+0x30>
    2514:	16 16       	cp	r1, r22
    2516:	17 06       	cpc	r1, r23
    2518:	18 06       	cpc	r1, r24
    251a:	99 1f       	adc	r25, r25
    251c:	f1 cf       	rjmp	.-30     	; 0x2500 <__fp_splitA+0xc>
    251e:	86 95       	lsr	r24
    2520:	71 05       	cpc	r23, r1
    2522:	61 05       	cpc	r22, r1
    2524:	08 94       	sec
    2526:	08 95       	ret

00002528 <__fp_zero>:
    2528:	e8 94       	clt

0000252a <__fp_szero>:
    252a:	bb 27       	eor	r27, r27
    252c:	66 27       	eor	r22, r22
    252e:	77 27       	eor	r23, r23
    2530:	cb 01       	movw	r24, r22
    2532:	97 f9       	bld	r25, 7
    2534:	08 95       	ret

00002536 <__gesf2>:
    2536:	0e 94 26 12 	call	0x244c	; 0x244c <__fp_cmp>
    253a:	08 f4       	brcc	.+2      	; 0x253e <__gesf2+0x8>
    253c:	8f ef       	ldi	r24, 0xFF	; 255
    253e:	08 95       	ret

00002540 <__mulsf3>:
    2540:	0e 94 b3 12 	call	0x2566	; 0x2566 <__mulsf3x>
    2544:	0c 94 61 12 	jmp	0x24c2	; 0x24c2 <__fp_round>
    2548:	0e 94 53 12 	call	0x24a6	; 0x24a6 <__fp_pscA>
    254c:	38 f0       	brcs	.+14     	; 0x255c <__mulsf3+0x1c>
    254e:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <__fp_pscB>
    2552:	20 f0       	brcs	.+8      	; 0x255c <__mulsf3+0x1c>
    2554:	95 23       	and	r25, r21
    2556:	11 f0       	breq	.+4      	; 0x255c <__mulsf3+0x1c>
    2558:	0c 94 4a 12 	jmp	0x2494	; 0x2494 <__fp_inf>
    255c:	0c 94 50 12 	jmp	0x24a0	; 0x24a0 <__fp_nan>
    2560:	11 24       	eor	r1, r1
    2562:	0c 94 95 12 	jmp	0x252a	; 0x252a <__fp_szero>

00002566 <__mulsf3x>:
    2566:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__fp_split3>
    256a:	70 f3       	brcs	.-36     	; 0x2548 <__mulsf3+0x8>

0000256c <__mulsf3_pse>:
    256c:	95 9f       	mul	r25, r21
    256e:	c1 f3       	breq	.-16     	; 0x2560 <__mulsf3+0x20>
    2570:	95 0f       	add	r25, r21
    2572:	50 e0       	ldi	r21, 0x00	; 0
    2574:	55 1f       	adc	r21, r21
    2576:	62 9f       	mul	r22, r18
    2578:	f0 01       	movw	r30, r0
    257a:	72 9f       	mul	r23, r18
    257c:	bb 27       	eor	r27, r27
    257e:	f0 0d       	add	r31, r0
    2580:	b1 1d       	adc	r27, r1
    2582:	63 9f       	mul	r22, r19
    2584:	aa 27       	eor	r26, r26
    2586:	f0 0d       	add	r31, r0
    2588:	b1 1d       	adc	r27, r1
    258a:	aa 1f       	adc	r26, r26
    258c:	64 9f       	mul	r22, r20
    258e:	66 27       	eor	r22, r22
    2590:	b0 0d       	add	r27, r0
    2592:	a1 1d       	adc	r26, r1
    2594:	66 1f       	adc	r22, r22
    2596:	82 9f       	mul	r24, r18
    2598:	22 27       	eor	r18, r18
    259a:	b0 0d       	add	r27, r0
    259c:	a1 1d       	adc	r26, r1
    259e:	62 1f       	adc	r22, r18
    25a0:	73 9f       	mul	r23, r19
    25a2:	b0 0d       	add	r27, r0
    25a4:	a1 1d       	adc	r26, r1
    25a6:	62 1f       	adc	r22, r18
    25a8:	83 9f       	mul	r24, r19
    25aa:	a0 0d       	add	r26, r0
    25ac:	61 1d       	adc	r22, r1
    25ae:	22 1f       	adc	r18, r18
    25b0:	74 9f       	mul	r23, r20
    25b2:	33 27       	eor	r19, r19
    25b4:	a0 0d       	add	r26, r0
    25b6:	61 1d       	adc	r22, r1
    25b8:	23 1f       	adc	r18, r19
    25ba:	84 9f       	mul	r24, r20
    25bc:	60 0d       	add	r22, r0
    25be:	21 1d       	adc	r18, r1
    25c0:	82 2f       	mov	r24, r18
    25c2:	76 2f       	mov	r23, r22
    25c4:	6a 2f       	mov	r22, r26
    25c6:	11 24       	eor	r1, r1
    25c8:	9f 57       	subi	r25, 0x7F	; 127
    25ca:	50 40       	sbci	r21, 0x00	; 0
    25cc:	9a f0       	brmi	.+38     	; 0x25f4 <__mulsf3_pse+0x88>
    25ce:	f1 f0       	breq	.+60     	; 0x260c <__mulsf3_pse+0xa0>
    25d0:	88 23       	and	r24, r24
    25d2:	4a f0       	brmi	.+18     	; 0x25e6 <__mulsf3_pse+0x7a>
    25d4:	ee 0f       	add	r30, r30
    25d6:	ff 1f       	adc	r31, r31
    25d8:	bb 1f       	adc	r27, r27
    25da:	66 1f       	adc	r22, r22
    25dc:	77 1f       	adc	r23, r23
    25de:	88 1f       	adc	r24, r24
    25e0:	91 50       	subi	r25, 0x01	; 1
    25e2:	50 40       	sbci	r21, 0x00	; 0
    25e4:	a9 f7       	brne	.-22     	; 0x25d0 <__mulsf3_pse+0x64>
    25e6:	9e 3f       	cpi	r25, 0xFE	; 254
    25e8:	51 05       	cpc	r21, r1
    25ea:	80 f0       	brcs	.+32     	; 0x260c <__mulsf3_pse+0xa0>
    25ec:	0c 94 4a 12 	jmp	0x2494	; 0x2494 <__fp_inf>
    25f0:	0c 94 95 12 	jmp	0x252a	; 0x252a <__fp_szero>
    25f4:	5f 3f       	cpi	r21, 0xFF	; 255
    25f6:	e4 f3       	brlt	.-8      	; 0x25f0 <__mulsf3_pse+0x84>
    25f8:	98 3e       	cpi	r25, 0xE8	; 232
    25fa:	d4 f3       	brlt	.-12     	; 0x25f0 <__mulsf3_pse+0x84>
    25fc:	86 95       	lsr	r24
    25fe:	77 95       	ror	r23
    2600:	67 95       	ror	r22
    2602:	b7 95       	ror	r27
    2604:	f7 95       	ror	r31
    2606:	e7 95       	ror	r30
    2608:	9f 5f       	subi	r25, 0xFF	; 255
    260a:	c1 f7       	brne	.-16     	; 0x25fc <__mulsf3_pse+0x90>
    260c:	fe 2b       	or	r31, r30
    260e:	88 0f       	add	r24, r24
    2610:	91 1d       	adc	r25, r1
    2612:	96 95       	lsr	r25
    2614:	87 95       	ror	r24
    2616:	97 f9       	bld	r25, 7
    2618:	08 95       	ret

0000261a <__udivmodqi4>:
    261a:	99 1b       	sub	r25, r25
    261c:	79 e0       	ldi	r23, 0x09	; 9
    261e:	04 c0       	rjmp	.+8      	; 0x2628 <__udivmodqi4_ep>

00002620 <__udivmodqi4_loop>:
    2620:	99 1f       	adc	r25, r25
    2622:	96 17       	cp	r25, r22
    2624:	08 f0       	brcs	.+2      	; 0x2628 <__udivmodqi4_ep>
    2626:	96 1b       	sub	r25, r22

00002628 <__udivmodqi4_ep>:
    2628:	88 1f       	adc	r24, r24
    262a:	7a 95       	dec	r23
    262c:	c9 f7       	brne	.-14     	; 0x2620 <__udivmodqi4_loop>
    262e:	80 95       	com	r24
    2630:	08 95       	ret

00002632 <__divmodhi4>:
    2632:	97 fb       	bst	r25, 7
    2634:	07 2e       	mov	r0, r23
    2636:	16 f4       	brtc	.+4      	; 0x263c <__divmodhi4+0xa>
    2638:	00 94       	com	r0
    263a:	07 d0       	rcall	.+14     	; 0x264a <__divmodhi4_neg1>
    263c:	77 fd       	sbrc	r23, 7
    263e:	09 d0       	rcall	.+18     	; 0x2652 <__divmodhi4_neg2>
    2640:	0e 94 47 13 	call	0x268e	; 0x268e <__udivmodhi4>
    2644:	07 fc       	sbrc	r0, 7
    2646:	05 d0       	rcall	.+10     	; 0x2652 <__divmodhi4_neg2>
    2648:	3e f4       	brtc	.+14     	; 0x2658 <__divmodhi4_exit>

0000264a <__divmodhi4_neg1>:
    264a:	90 95       	com	r25
    264c:	81 95       	neg	r24
    264e:	9f 4f       	sbci	r25, 0xFF	; 255
    2650:	08 95       	ret

00002652 <__divmodhi4_neg2>:
    2652:	70 95       	com	r23
    2654:	61 95       	neg	r22
    2656:	7f 4f       	sbci	r23, 0xFF	; 255

00002658 <__divmodhi4_exit>:
    2658:	08 95       	ret

0000265a <__umulhisi3>:
    265a:	a2 9f       	mul	r26, r18
    265c:	b0 01       	movw	r22, r0
    265e:	b3 9f       	mul	r27, r19
    2660:	c0 01       	movw	r24, r0
    2662:	a3 9f       	mul	r26, r19
    2664:	70 0d       	add	r23, r0
    2666:	81 1d       	adc	r24, r1
    2668:	11 24       	eor	r1, r1
    266a:	91 1d       	adc	r25, r1
    266c:	b2 9f       	mul	r27, r18
    266e:	70 0d       	add	r23, r0
    2670:	81 1d       	adc	r24, r1
    2672:	11 24       	eor	r1, r1
    2674:	91 1d       	adc	r25, r1
    2676:	08 95       	ret

00002678 <__muluhisi3>:
    2678:	0e 94 2d 13 	call	0x265a	; 0x265a <__umulhisi3>
    267c:	a5 9f       	mul	r26, r21
    267e:	90 0d       	add	r25, r0
    2680:	b4 9f       	mul	r27, r20
    2682:	90 0d       	add	r25, r0
    2684:	a4 9f       	mul	r26, r20
    2686:	80 0d       	add	r24, r0
    2688:	91 1d       	adc	r25, r1
    268a:	11 24       	eor	r1, r1
    268c:	08 95       	ret

0000268e <__udivmodhi4>:
    268e:	aa 1b       	sub	r26, r26
    2690:	bb 1b       	sub	r27, r27
    2692:	51 e1       	ldi	r21, 0x11	; 17
    2694:	07 c0       	rjmp	.+14     	; 0x26a4 <__udivmodhi4_ep>

00002696 <__udivmodhi4_loop>:
    2696:	aa 1f       	adc	r26, r26
    2698:	bb 1f       	adc	r27, r27
    269a:	a6 17       	cp	r26, r22
    269c:	b7 07       	cpc	r27, r23
    269e:	10 f0       	brcs	.+4      	; 0x26a4 <__udivmodhi4_ep>
    26a0:	a6 1b       	sub	r26, r22
    26a2:	b7 0b       	sbc	r27, r23

000026a4 <__udivmodhi4_ep>:
    26a4:	88 1f       	adc	r24, r24
    26a6:	99 1f       	adc	r25, r25
    26a8:	5a 95       	dec	r21
    26aa:	a9 f7       	brne	.-22     	; 0x2696 <__udivmodhi4_loop>
    26ac:	80 95       	com	r24
    26ae:	90 95       	com	r25
    26b0:	bc 01       	movw	r22, r24
    26b2:	cd 01       	movw	r24, r26
    26b4:	08 95       	ret

000026b6 <_exit>:
    26b6:	f8 94       	cli

000026b8 <__stop_program>:
    26b8:	ff cf       	rjmp	.-2      	; 0x26b8 <__stop_program>
